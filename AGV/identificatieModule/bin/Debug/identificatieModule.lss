
bin\Debug\identificatieModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000866  0000091a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800222  00800222  0000093c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000093c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001b8  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001f44  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000012b7  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000014ca  00000000  00000000  00003d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000003b0  00000000  00000000  00005218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007c5  00000000  00000000  000055c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000212  00000000  00000000  00005d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000003aa  00000000  00000000  00005f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000059  00000000  00000000  00006349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e6 e6       	ldi	r30, 0x66	; 102

000000fc <.Loc.4>:
  fc:	f8 e0       	ldi	r31, 0x08	; 8

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	ac 32       	cpi	r26, 0x2C	; 44

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
 122:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initDonkInterrupt>:
#define PORT_IR PORTD
#define PIN_IR  PIND
#define IR      PD1 //pin 30

void initDonkInterrupt(void){
    DDR_IR &= ~(1<<IR);
 12a:	51 98       	cbi	0x0a, 1	; 10

0000012c <.Loc.3>:
    PORT_IR |= (1<<IR);
 12c:	59 9a       	sbi	0x0b, 1	; 11

0000012e <.Loc.5>:

    EIMSK |= (1<<INT1);       //ENABLE HARDWARE INTERRUPT ON PD1
 12e:	e9 9a       	sbi	0x1d, 1	; 29

00000130 <.Loc.7>:
    EICRA |= (0<<ISC11) | (1<<ISC10);    //FALLING edge of INTn generates asynchronously an interrupt request
 130:	e9 e6       	ldi	r30, 0x69	; 105
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z

00000136 <.Loc.8>:
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 83       	st	Z, r24

0000013a <.Loc.9>:
}
 13a:	08 95       	ret

0000013c <ISR>:

unsigned int aantalGedectecteerd = 0;

ISR(INT1_vect){
    aantalGedectecteerd++;
 13c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <aantalGedectecteerd>
 140:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <aantalGedectecteerd+0x1>

00000144 <.Loc.13>:
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <aantalGedectecteerd+0x1>
 14a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <aantalGedectecteerd>

0000014e <.Loc.14>:
}
 14e:	08 95       	ret

00000150 <volgendeOpdracht>:

void volgendeOpdracht(){
    unsigned int opdracht = 0;
    if(opdracht==0){
        opdracht ++;
        sendCommand();  //navigeer, detecteer, identificeer
 150:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sendCommand>

00000154 <.LBB3>:
    }
    if(opdracht==1){
        opdracht++;     //bocht ...om
        sendCommand();
 154:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sendCommand>

00000158 <.LBE3>:
    }
}
 158:	08 95       	ret

0000015a <main>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "main.h"

int main(void){
    sei();
 15a:	78 94       	sei

0000015c <.Loc.2>:
    initUsart();
 15c:	0e 94 47 03 	call	0x68e	; 0x68e <initUsart>

00000160 <.LVL0>:
    flushUsart2Buffer();
 160:	0e 94 8c 03 	call	0x718	; 0x718 <flushUsart2Buffer>

00000164 <.LVL1>:
    initDonkInterrupt();
 164:	0e 94 95 00 	call	0x12a	; 0x12a <initDonkInterrupt>

00000168 <.LVL2>:
    display_init();
 168:	0e 94 27 02 	call	0x44e	; 0x44e <display_init>

0000016c <.LVL3>:

    sendCommand(0x01,0xFF, 0x00, 0x00); //vooruit
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	6f ef       	ldi	r22, 0xFF	; 255
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sendCommand>

00000180 <.LBB4>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	83 ed       	ldi	r24, 0xD3	; 211
 184:	90 e3       	ldi	r25, 0x30	; 48

00000186 <.L1^B1>:
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <.L1^B1>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <L0^A>

00000190 <L0^A>:
	...

00000192 <.LBE4>:
    _delay_ms(1000);
    sendCommand(0x02,0x00, 0x00, 0x00); //achteruit
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sendCommand>

000001a6 <.LVL6>:


    return 1;
}
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret

000001ac <initAdc>:
#define pulseWidth 85
#define threshold 364   // Drempelwaarde om metaal te detecteren (zelf testen!)364 voor touw spoel met 100 micro seconde
#define nMeas 40

void initAdc(void){
    ADMUX = (0<<REFS1) | (1<<REFS0);
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

000001b2 <.Loc.3>:
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<ADPS0);
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	80 83       	st	Z, r24

000001ba <.Loc.5>:
    ADCSRA |= (1<<ADEN);
 1ba:	80 81       	ld	r24, Z

000001bc <.Loc.6>:
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	80 83       	st	Z, r24

000001c0 <.Loc.7>:
}
 1c0:	08 95       	ret

000001c2 <initMetaalDetector>:

void initMetaalDetector(void) {
    //configure pins als output
    DDR_pin_pulse |= (1<<pin_pulse);
 1c2:	81 9a       	sbi	0x10, 1	; 16

000001c4 <.Loc.11>:
    DDR_LED |= (1<<LED);
 1c4:	82 9a       	sbi	0x10, 2	; 16

000001c6 <.Loc.13>:
    initAdc();
 1c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <initAdc>

000001ca <.LVL0>:
}
 1ca:	08 95       	ret

000001cc <detectMetaal>:

int detectMetaal(void) {
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29

000001d8 <.Loc.16>:
    ADCSRA |= (1<<ADSC);    //ADC start conversion [ALS DE ADC NIET WERKT KNAL DEZE LINE VOOR DAT JE HET STORED IN DE VARIABELE]
 1d8:	ea e7       	ldi	r30, 0x7A	; 122
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z

000001de <.Loc.17>:
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	80 83       	st	Z, r24

000001e2 <.Loc.18>:
 1e2:	a8 e2       	ldi	r26, 0x28	; 40
 1e4:	b0 e0       	ldi	r27, 0x00	; 0

000001e6 <.Loc.23>:
    long unsigned int sum = 0;
 1e6:	c1 2c       	mov	r12, r1
 1e8:	d1 2c       	mov	r13, r1
 1ea:	76 01       	movw	r14, r12

000001ec <.Loc.24>:

    //40 keer meten (meer = stabieler)
    for (int i=0; i< nMeas; i++) {
        // Condensator ontladen
        DDR_pin_cap |= (1<<DDR_pin_cap); //output
 1ec:	e1 e0       	ldi	r30, 0x01	; 1
 1ee:	f0 e0       	ldi	r31, 0x00	; 0

000001f0 <.Loc.25>:
            PORT_pin_pulse |= (1<<DDR_pin_cap); //pin hoog
            _delay_ms(pulseWidth);
        }

    // Meet de spanning
    int val = ADC;  // Leest tussen 0 en 1023
 1f0:	c8 e7       	ldi	r28, 0x78	; 120
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	0e c0       	rjmp	.+28     	; 0x212 <.L5>

000001f6 <.L11>:
 1f6:	48 81       	ld	r20, Y
 1f8:	59 81       	ldd	r21, Y+1	; 0x01

000001fa <.Loc.28>:
    sum += val;
 1fa:	05 2e       	mov	r0, r21
 1fc:	00 0c       	add	r0, r0
 1fe:	66 0b       	sbc	r22, r22
 200:	77 0b       	sbc	r23, r23

00000202 <.Loc.30>:
 202:	c4 0e       	add	r12, r20
 204:	d5 1e       	adc	r13, r21
 206:	e6 1e       	adc	r14, r22
 208:	f7 1e       	adc	r15, r23

0000020a <.Loc.31>:
    for (int i=0; i< nMeas; i++) {
 20a:	11 97       	sbiw	r26, 0x01	; 1

0000020c <.Loc.34>:
 20c:	10 97       	sbiw	r26, 0x00	; 0
 20e:	09 f4       	brne	.+2      	; 0x212 <.L5>

00000210 <L0^A>:
 210:	5b c0       	rjmp	.+182    	; 0x2c8 <.L10>

00000212 <.L5>:
        DDR_pin_cap |= (1<<DDR_pin_cap); //output
 212:	20 b3       	in	r18, 0x10	; 16

00000214 <.Loc.37>:
 214:	80 b3       	in	r24, 0x10	; 16

00000216 <.Loc.38>:
 216:	af 01       	movw	r20, r30
 218:	02 c0       	rjmp	.+4      	; 0x21e <.L2^B1>

0000021a <.L1^B1>:
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21

0000021e <.L2^B1>:
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <.L1^B1>

00000222 <.Loc.39>:
 222:	84 2b       	or	r24, r20
 224:	80 bb       	out	0x10, r24	; 16

00000226 <.Loc.40>:
        PORT_pin_cap |= (1<<DDR_pin_cap); //pin low
 226:	20 b3       	in	r18, 0x10	; 16

00000228 <.Loc.42>:
 228:	81 b3       	in	r24, 0x11	; 17

0000022a <.Loc.43>:
 22a:	bf 01       	movw	r22, r30
 22c:	02 c0       	rjmp	.+4      	; 0x232 <.L2^B2>

0000022e <.L1^B2>:
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23

00000232 <.L2^B2>:
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <.L1^B2>

00000236 <.Loc.44>:
 236:	86 2b       	or	r24, r22
 238:	81 bb       	out	0x11, r24	; 17

0000023a <.LBB13>:
 23a:	7f ef       	ldi	r23, 0xFF	; 255
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0

00000240 <.L1^B3>:
 240:	71 50       	subi	r23, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <.L1^B3>
 248:	00 c0       	rjmp	.+0      	; 0x24a <L0^A>

0000024a <L0^A>:
	...

0000024c <.LBE13>:
        DDR_pin_cap &= ~(1<<DDR_pin_cap); //input
 24c:	80 b3       	in	r24, 0x10	; 16

0000024e <.Loc.56>:
 24e:	20 b3       	in	r18, 0x10	; 16

00000250 <.Loc.57>:
 250:	af 01       	movw	r20, r30
 252:	02 c0       	rjmp	.+4      	; 0x258 <.L2^B3>

00000254 <.L1^B4>:
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21

00000258 <.L2^B3>:
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <.L1^B4>
 25c:	ca 01       	movw	r24, r20

0000025e <.Loc.58>:
 25e:	80 95       	com	r24
 260:	90 95       	com	r25

00000262 <.Loc.59>:
 262:	82 23       	and	r24, r18
 264:	80 bb       	out	0x10, r24	; 16

00000266 <.Loc.60>:
 266:	48 e0       	ldi	r20, 0x08	; 8
 268:	50 e0       	ldi	r21, 0x00	; 0

0000026a <.L4>:
            PORT_pin_pulse &= ~(1<<DDR_pin_cap); //pin hoog
 26a:	80 b3       	in	r24, 0x10	; 16

0000026c <.Loc.66>:
 26c:	21 b3       	in	r18, 0x11	; 17

0000026e <.Loc.67>:
 26e:	bf 01       	movw	r22, r30
 270:	02 c0       	rjmp	.+4      	; 0x276 <.L2^B4>

00000272 <.L1^B5>:
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23

00000276 <.L2^B4>:
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <.L1^B5>
 27a:	cb 01       	movw	r24, r22

0000027c <.Loc.68>:
 27c:	80 95       	com	r24
 27e:	90 95       	com	r25

00000280 <.Loc.69>:
 280:	82 23       	and	r24, r18
 282:	81 bb       	out	0x11, r24	; 17

00000284 <.LBB16>:
 284:	7f e7       	ldi	r23, 0x7F	; 127
 286:	86 e2       	ldi	r24, 0x26	; 38
 288:	94 e0       	ldi	r25, 0x04	; 4

0000028a <.L1^B6>:
 28a:	71 50       	subi	r23, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <.L1^B6>
 292:	00 c0       	rjmp	.+0      	; 0x294 <L0^A>

00000294 <L0^A>:
	...

00000296 <.LBE16>:
            PORT_pin_pulse |= (1<<DDR_pin_cap); //pin hoog
 296:	20 b3       	in	r18, 0x10	; 16

00000298 <.Loc.81>:
 298:	81 b3       	in	r24, 0x11	; 17

0000029a <.Loc.82>:
 29a:	bf 01       	movw	r22, r30
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <.L2^B5>

0000029e <.L1^B7>:
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23

000002a2 <.L2^B5>:
 2a2:	2a 95       	dec	r18
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <.L1^B7>

000002a6 <.Loc.83>:
 2a6:	86 2b       	or	r24, r22
 2a8:	81 bb       	out	0x11, r24	; 17

000002aa <.LBB18>:
 2aa:	7f e7       	ldi	r23, 0x7F	; 127
 2ac:	86 e2       	ldi	r24, 0x26	; 38
 2ae:	94 e0       	ldi	r25, 0x04	; 4

000002b0 <.L1^B8>:
 2b0:	71 50       	subi	r23, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.L1^B8>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <L0^A>

000002ba <L0^A>:
	...

000002bc <.LBE18>:
        for (int j = 0; j < 8; j++) {//aantal pulsen per meting
 2bc:	41 50       	subi	r20, 0x01	; 1
 2be:	51 09       	sbc	r21, r1

000002c0 <.Loc.95>:
 2c0:	41 15       	cp	r20, r1
 2c2:	51 05       	cpc	r21, r1
 2c4:	91 f6       	brne	.-92     	; 0x26a <.L4>
 2c6:	97 cf       	rjmp	.-210    	; 0x1f6 <.L11>

000002c8 <.L10>:
    }

    // Gemiddelde berekenen
    int avg = sum / nMeas;//rekenen sturen
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	28 e2       	ldi	r18, 0x28	; 40
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__udivmodsi4>

000002d8 <.Loc.100>:
    //Serial.print("Gemiddelde waarde: ");
    //Serial.print(avg);

    // Metaaldetectie
    if (avg < threshold) {//rekenen sturen
 2d8:	2c 36       	cpi	r18, 0x6C	; 108
 2da:	31 40       	sbci	r19, 0x01	; 1
 2dc:	54 f4       	brge	.+20     	; 0x2f2 <.L6>

000002de <.Loc.101>:
        //Serial.println(" --> METAAL GEDETECTEERD!");
        PORT_LED &= ~(1<<LED); //led aan
 2de:	8a 98       	cbi	0x11, 2	; 17

000002e0 <.Loc.103>:
    return 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0

000002e4 <.L3>:
    else {
        //Serial.println(" --> Geen metaal.");
        PORT_LED |= (1<<LED); //led uit
    return 0;
  }
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12

000002f0 <.Loc.106>:
 2f0:	08 95       	ret

000002f2 <.L6>:
        PORT_LED |= (1<<LED); //led uit
 2f2:	8a 9a       	sbi	0x11, 2	; 17

000002f4 <.Loc.109>:
    return 0;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <.L3>

000002fa <initNoodstop>:
#define PIN_knop PINA
#define PORT_knop PORTA


void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 2fa:	50 98       	cbi	0x0a, 0	; 10

000002fc <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 2fc:	58 9a       	sbi	0x0b, 0	; 11

000002fe <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 2fe:	e8 9a       	sbi	0x1d, 0	; 29

00000300 <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 300:	e9 e6       	ldi	r30, 0x69	; 105
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z

00000306 <.Loc.8>:
 306:	81 60       	ori	r24, 0x01	; 1
 308:	80 83       	st	Z, r24

0000030a <.Loc.9>:
    sei();
 30a:	78 94       	sei

0000030c <.Loc.10>:
}
 30c:	08 95       	ret

0000030e <__vector_1>:
        if(!(PIN_knop&(1<<start))){
            //uitvoer();
            break;
        }
    }*/
}
 30e:	18 95       	reti

00000310 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 310:	ea e0       	ldi	r30, 0x0A	; 10
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	80 81       	ld	r24, Z

00000316 <.Loc.2>:
 316:	80 68       	ori	r24, 0x80	; 128
 318:	80 83       	st	Z, r24

0000031a <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 31a:	eb e0       	ldi	r30, 0x0B	; 11
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	80 81       	ld	r24, Z

00000320 <.Loc.4>:
 320:	80 68       	ori	r24, 0x80	; 128
 322:	80 83       	st	Z, r24

00000324 <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 324:	80 81       	ld	r24, Z

00000326 <.Loc.6>:
 326:	80 62       	ori	r24, 0x20	; 32
 328:	80 83       	st	Z, r24

0000032a <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 32a:	80 81       	ld	r24, Z
 32c:	8f 77       	andi	r24, 0x7F	; 127
 32e:	80 83       	st	Z, r24

00000330 <.Loc.9>:
}
 330:	08 95       	ret

00000332 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 332:	ea e0       	ldi	r30, 0x0A	; 10
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	80 81       	ld	r24, Z

00000338 <.Loc.12>:
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	80 83       	st	Z, r24

0000033c <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 33c:	eb e0       	ldi	r30, 0x0B	; 11
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	80 81       	ld	r24, Z
 342:	8f 7d       	andi	r24, 0xDF	; 223
 344:	80 83       	st	Z, r24

00000346 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 346:	80 81       	ld	r24, Z

00000348 <.Loc.16>:
 348:	80 62       	ori	r24, 0x20	; 32
 34a:	80 83       	st	Z, r24

0000034c <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 34c:	80 81       	ld	r24, Z

0000034e <.Loc.18>:
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24

00000352 <.Loc.19>:
}
 352:	08 95       	ret

00000354 <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 354:	ea e0       	ldi	r30, 0x0A	; 10
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	90 81       	ld	r25, Z

0000035a <.Loc.22>:
 35a:	90 68       	ori	r25, 0x80	; 128
 35c:	90 83       	st	Z, r25

0000035e <.Loc.23>:
 35e:	28 e0       	ldi	r18, 0x08	; 8
 360:	30 e0       	ldi	r19, 0x00	; 0

00000362 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 362:	eb e0       	ldi	r30, 0x0B	; 11
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	0c c0       	rjmp	.+24     	; 0x380 <.L6>

00000368 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 368:	90 81       	ld	r25, Z
 36a:	9f 77       	andi	r25, 0x7F	; 127
 36c:	90 83       	st	Z, r25

0000036e <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 36e:	90 81       	ld	r25, Z

00000370 <.Loc.31>:
 370:	90 62       	ori	r25, 0x20	; 32
 372:	90 83       	st	Z, r25

00000374 <.Loc.32>:
        data >>= 1;
 374:	86 95       	lsr	r24

00000376 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 376:	21 50       	subi	r18, 0x01	; 1
 378:	31 09       	sbc	r19, r1

0000037a <.Loc.36>:
 37a:	21 15       	cp	r18, r1
 37c:	31 05       	cpc	r19, r1
 37e:	49 f0       	breq	.+18     	; 0x392 <.L8>

00000380 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 380:	90 81       	ld	r25, Z
 382:	9f 7d       	andi	r25, 0xDF	; 223
 384:	90 83       	st	Z, r25

00000386 <.Loc.39>:
        if(data & 0x01){
 386:	80 ff       	sbrs	r24, 0
 388:	ef cf       	rjmp	.-34     	; 0x368 <.L4>

0000038a <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 38a:	90 81       	ld	r25, Z

0000038c <.Loc.42>:
 38c:	90 68       	ori	r25, 0x80	; 128
 38e:	90 83       	st	Z, r25
 390:	ee cf       	rjmp	.-36     	; 0x36e <.L5>

00000392 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 392:	eb e0       	ldi	r30, 0x0B	; 11
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	80 81       	ld	r24, Z

00000398 <.Loc.46>:
 398:	8f 7d       	andi	r24, 0xDF	; 223
 39a:	80 83       	st	Z, r24

0000039c <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 39c:	80 81       	ld	r24, Z

0000039e <.Loc.48>:
 39e:	80 62       	ori	r24, 0x20	; 32
 3a0:	80 83       	st	Z, r24

000003a2 <.Loc.49>:
}
 3a2:	08 95       	ret

000003a4 <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 3a4:	cf 93       	push	r28
 3a6:	c8 2f       	mov	r28, r24

000003a8 <.Loc.52>:
    display_start();
 3a8:	0e 94 88 01 	call	0x310	; 0x310 <display_start>

000003ac <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 3ac:	8c 2f       	mov	r24, r28
 3ae:	87 70       	andi	r24, 0x07	; 7
 3b0:	88 68       	ori	r24, 0x88	; 136
 3b2:	0e 94 aa 01 	call	0x354	; 0x354 <display_sendbyte>

000003b6 <.LVL9>:
    display_stop();
 3b6:	0e 94 99 01 	call	0x332	; 0x332 <display_stop>

000003ba <.LVL10>:
}
 3ba:	cf 91       	pop	r28

000003bc <.Loc.56>:
 3bc:	08 95       	ret

000003be <display_number>:

// Display 4 digit integer
void display_number(int number){
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	d8 2f       	mov	r29, r24
 3ca:	c9 2f       	mov	r28, r25

000003cc <.Loc.59>:
    display_start();
 3cc:	0e 94 88 01 	call	0x310	; 0x310 <display_start>

000003d0 <.LVL13>:
    display_sendbyte(0x40);
 3d0:	80 e4       	ldi	r24, 0x40	; 64
 3d2:	0e 94 aa 01 	call	0x354	; 0x354 <display_sendbyte>

000003d6 <.LVL14>:
    display_stop();
 3d6:	0e 94 99 01 	call	0x332	; 0x332 <display_stop>

000003da <.LVL15>:
 3da:	13 ec       	ldi	r17, 0xC3	; 195

000003dc <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 3dc:	0f 2e       	mov	r0, r31
 3de:	fa e0       	ldi	r31, 0x0A	; 10
 3e0:	ef 2e       	mov	r14, r31
 3e2:	f1 2c       	mov	r15, r1
 3e4:	f0 2d       	mov	r31, r0

000003e6 <.L11>:
        display_start();
 3e6:	0e 94 88 01 	call	0x310	; 0x310 <display_start>

000003ea <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 3ea:	81 2f       	mov	r24, r17
 3ec:	0e 94 aa 01 	call	0x354	; 0x354 <display_sendbyte>

000003f0 <.LVL18>:
        display_sendbyte(digits[number%10]);
 3f0:	8d 2f       	mov	r24, r29
 3f2:	9c 2f       	mov	r25, r28
 3f4:	b7 01       	movw	r22, r14
 3f6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__divmodhi4>
 3fa:	d6 2f       	mov	r29, r22

000003fc <.Loc.71>:
 3fc:	c7 2f       	mov	r28, r23

000003fe <.Loc.72>:
 3fe:	fc 01       	movw	r30, r24
 400:	ec 5e       	subi	r30, 0xEC	; 236
 402:	fd 4f       	sbci	r31, 0xFD	; 253

00000404 <.Loc.73>:
 404:	80 81       	ld	r24, Z
 406:	0e 94 aa 01 	call	0x354	; 0x354 <display_sendbyte>

0000040a <.LVL20>:
        number /= 10;
        display_stop();
 40a:	0e 94 99 01 	call	0x332	; 0x332 <display_stop>

0000040e <.LVL21>:
    for (int i = 0; i < 4; i++) {
 40e:	11 50       	subi	r17, 0x01	; 1
 410:	1f 3b       	cpi	r17, 0xBF	; 191
 412:	49 f7       	brne	.-46     	; 0x3e6 <.L11>

00000414 <.Loc.78>:
    }
}
 414:	df 91       	pop	r29

00000416 <.Loc.79>:
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	08 95       	ret

00000420 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	c8 2f       	mov	r28, r24
 428:	d9 2f       	mov	r29, r25
 42a:	16 2f       	mov	r17, r22

0000042c <.Loc.82>:
    display_start();
 42c:	0e 94 88 01 	call	0x310	; 0x310 <display_start>

00000430 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 430:	80 ec       	ldi	r24, 0xC0	; 192
 432:	81 0f       	add	r24, r17
 434:	0e 94 aa 01 	call	0x354	; 0x354 <display_sendbyte>

00000438 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 438:	c0 50       	subi	r28, 0x00	; 0
 43a:	de 4f       	sbci	r29, 0xFE	; 254

0000043c <.Loc.86>:
 43c:	88 81       	ld	r24, Y
 43e:	0e 94 aa 01 	call	0x354	; 0x354 <display_sendbyte>

00000442 <.LVL26>:
    display_stop();
 442:	0e 94 99 01 	call	0x332	; 0x332 <display_stop>

00000446 <.LVL27>:
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17

0000044c <.Loc.89>:
 44c:	08 95       	ret

0000044e <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 44e:	ea e0       	ldi	r30, 0x0A	; 10
 450:	f1 e0       	ldi	r31, 0x01	; 1
 452:	80 81       	ld	r24, Z

00000454 <.Loc.92>:
 454:	80 68       	ori	r24, 0x80	; 128
 456:	80 83       	st	Z, r24

00000458 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 458:	80 81       	ld	r24, Z

0000045a <.Loc.94>:
 45a:	80 62       	ori	r24, 0x20	; 32
 45c:	80 83       	st	Z, r24

0000045e <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 45e:	eb e0       	ldi	r30, 0x0B	; 11
 460:	f1 e0       	ldi	r31, 0x01	; 1
 462:	80 81       	ld	r24, Z

00000464 <.Loc.96>:
 464:	80 68       	ori	r24, 0x80	; 128
 466:	80 83       	st	Z, r24

00000468 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 468:	80 81       	ld	r24, Z

0000046a <.Loc.98>:
 46a:	80 62       	ori	r24, 0x20	; 32
 46c:	80 83       	st	Z, r24

0000046e <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 46e:	87 e0       	ldi	r24, 0x07	; 7
 470:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <display_brightness>

00000474 <.LVL29>:
}
 474:	08 95       	ret

00000476 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	83 e1       	ldi	r24, 0x13	; 19
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000480 <.LVL30>:
    display_letter(3, 1);
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000048a <.LVL31>:
    display_letter(6, 2);
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000494 <.LVL32>:
    display_letter(7, 3);
 494:	63 e0       	ldi	r22, 0x03	; 3
 496:	87 e0       	ldi	r24, 0x07	; 7
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000049e <.LVL33>:
}
 49e:	08 95       	ret

000004a0 <display_fol>:

void display_fol(void){
    display_letter(19, 0);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	83 e1       	ldi	r24, 0x13	; 19
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004aa <.LVL34>:
    display_letter(6, 1);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004b4 <.LVL35>:
    display_letter(13, 2);
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	8d e0       	ldi	r24, 0x0D	; 13
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004be <.LVL36>:
    display_letter(11, 3);
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	8b e0       	ldi	r24, 0x0B	; 11
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004c8 <.LVL37>:
}
 4c8:	08 95       	ret

000004ca <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	83 e1       	ldi	r24, 0x13	; 19
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004d4 <.LVL38>:
    display_letter(3, 1);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004de <.LVL39>:
    display_letter(12, 2);
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	8c e0       	ldi	r24, 0x0C	; 12
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004e8 <.LVL40>:
    display_letter(17, 3);
 4e8:	63 e0       	ldi	r22, 0x03	; 3
 4ea:	81 e1       	ldi	r24, 0x11	; 17
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004f2 <.LVL41>:
}
 4f2:	08 95       	ret

000004f4 <display_turn>:

void display_turn(void){
    display_letter(17, 0);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	81 e1       	ldi	r24, 0x11	; 17
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000004fe <.LVL42>:
    display_letter(18, 1);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	82 e1       	ldi	r24, 0x12	; 18
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000508 <.LVL43>:
    display_letter(15, 2);
 508:	62 e0       	ldi	r22, 0x02	; 2
 50a:	8f e0       	ldi	r24, 0x0F	; 15
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000512 <.LVL44>:
    display_letter(12, 3);
 512:	63 e0       	ldi	r22, 0x03	; 3
 514:	8c e0       	ldi	r24, 0x0C	; 12
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000051c <.LVL45>:
}
 51c:	08 95       	ret

0000051e <display_dist>:

void display_dist(void){
    display_letter(4, 0);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	84 e0       	ldi	r24, 0x04	; 4
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000528 <.LVL46>:
    display_letter(9, 1);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	89 e0       	ldi	r24, 0x09	; 9
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000532 <.LVL47>:
    display_letter(16, 2);
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	80 e1       	ldi	r24, 0x10	; 16
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000053c <.LVL48>:
    display_letter(17, 3);
 53c:	63 e0       	ldi	r22, 0x03	; 3
 53e:	81 e1       	ldi	r24, 0x11	; 17
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000546 <.LVL49>:
}
 546:	08 95       	ret

00000548 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	83 e1       	ldi	r24, 0x13	; 19
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000552 <.LVL50>:
    display_letter(14, 1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	8e e0       	ldi	r24, 0x0E	; 14
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000055c <.LVL51>:
    display_letter(1, 2);
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000566 <.LVL52>:
    display_letter(3, 3);
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	83 e0       	ldi	r24, 0x03	; 3
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000570 <.LVL53>:
}
 570:	08 95       	ret

00000572 <display_mode>:
    if(mode){
 572:	88 23       	and	r24, r24
 574:	19 f0       	breq	.+6      	; 0x57c <.L22>

00000576 <.Loc.140>:
        display_fol();
 576:	0e 94 50 02 	call	0x4a0	; 0x4a0 <display_fol>

0000057a <.LVL55>:
 57a:	08 95       	ret

0000057c <.L22>:
        display_pac();
 57c:	0e 94 a4 02 	call	0x548	; 0x548 <display_pac>

00000580 <.LVL57>:
}
 580:	08 95       	ret

00000582 <display_left>:

void display_left(void){
    display_letter(11, 0);
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	8b e0       	ldi	r24, 0x0B	; 11
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000058c <.LVL58>:
    display_letter(5, 1);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	85 e0       	ldi	r24, 0x05	; 5
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000596 <.LVL59>:
    display_letter(6, 2);
 596:	62 e0       	ldi	r22, 0x02	; 2
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005a0 <.LVL60>:
    display_letter(17, 3);
 5a0:	63 e0       	ldi	r22, 0x03	; 3
 5a2:	81 e1       	ldi	r24, 0x11	; 17
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005aa <.LVL61>:
}
 5aa:	08 95       	ret

000005ac <display_rght>:

void display_rght(void){
    display_letter(15, 0);
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	8f e0       	ldi	r24, 0x0F	; 15
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005b6 <.LVL62>:
    display_letter(7, 1);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	87 e0       	ldi	r24, 0x07	; 7
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005c0 <.LVL63>:
    display_letter(8, 2);
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	88 e0       	ldi	r24, 0x08	; 8
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005ca <.LVL64>:
    display_letter(17, 3);
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	81 e1       	ldi	r24, 0x11	; 17
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005d4 <.LVL65>:
}
 5d4:	08 95       	ret

000005d6 <display_direction>:
    if(dir){
 5d6:	88 23       	and	r24, r24
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <.L27>

000005da <.Loc.159>:
        display_rght();
 5da:	0e 94 d6 02 	call	0x5ac	; 0x5ac <display_rght>

000005de <.LVL67>:
 5de:	08 95       	ret

000005e0 <.L27>:
        display_left();
 5e0:	0e 94 c1 02 	call	0x582	; 0x582 <display_left>

000005e4 <.LVL69>:
}
 5e4:	08 95       	ret

000005e6 <display_go>:

void display_go(void){
    display_letter(19, 0);
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	83 e1       	ldi	r24, 0x13	; 19
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005f0 <.LVL70>:
    display_letter(19, 1);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	83 e1       	ldi	r24, 0x13	; 19
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

000005fa <.LVL71>:
    display_letter(7, 2);
 5fa:	62 e0       	ldi	r22, 0x02	; 2
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000604 <.LVL72>:
    display_letter(13, 3);
 604:	63 e0       	ldi	r22, 0x03	; 3
 606:	8d e0       	ldi	r24, 0x0D	; 13
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000060e <.LVL73>:
}
 60e:	08 95       	ret

00000610 <display_end>:

void display_end(void){
    display_letter(19, 0);
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	83 e1       	ldi	r24, 0x13	; 19
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000061a <.LVL74>:
    display_letter(5, 1);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	85 e0       	ldi	r24, 0x05	; 5
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000624 <.LVL75>:
    display_letter(12, 2);
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	8c e0       	ldi	r24, 0x0C	; 12
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000062e <.LVL76>:
    display_letter(4, 3);
 62e:	63 e0       	ldi	r22, 0x03	; 3
 630:	84 e0       	ldi	r24, 0x04	; 4
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000638 <.LVL77>:
}
 638:	08 95       	ret

0000063a <display_srch>:

void display_srch(void){
    display_letter(16, 0);
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	80 e1       	ldi	r24, 0x10	; 16
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000644 <.LVL78>:
    display_letter(15, 1);
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	8f e0       	ldi	r24, 0x0F	; 15
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000064e <.LVL79>:
    display_letter(3, 2);
 64e:	62 e0       	ldi	r22, 0x02	; 2
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000658 <.LVL80>:
    display_letter(8, 3);
 658:	63 e0       	ldi	r22, 0x03	; 3
 65a:	88 e0       	ldi	r24, 0x08	; 8
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000662 <.LVL81>:
}
 662:	08 95       	ret

00000664 <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	80 e1       	ldi	r24, 0x10	; 16
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000066e <.LVL82>:
    display_letter(17, 1);
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	81 e1       	ldi	r24, 0x11	; 17
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000678 <.LVL83>:
    display_letter(13, 2);
 678:	62 e0       	ldi	r22, 0x02	; 2
 67a:	8d e0       	ldi	r24, 0x0D	; 13
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

00000682 <.LVL84>:
    display_letter(14, 3);
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	8e e0       	ldi	r24, 0x0E	; 14
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 10 02 	call	0x420	; 0x420 <display_letter>

0000068c <.LVL85>:
}
 68c:	08 95       	ret

0000068e <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 68e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

00000692 <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 692:	87 e6       	ldi	r24, 0x67	; 103
 694:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

00000698 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 698:	88 e9       	ldi	r24, 0x98	; 152
 69a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

0000069e <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 69e:	86 e0       	ldi	r24, 0x06	; 6
 6a0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

000006a4 <.Loc.9>:
}
 6a4:	08 95       	ret

000006a6 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 6a6:	e8 ec       	ldi	r30, 0xC8	; 200
 6a8:	f0 e0       	ldi	r31, 0x00	; 0

000006aa <.L3>:
 6aa:	90 81       	ld	r25, Z
 6ac:	95 ff       	sbrs	r25, 5
 6ae:	fd cf       	rjmp	.-6      	; 0x6aa <.L3>

000006b0 <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 6b0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

000006b4 <.Loc.17>:
}
 6b4:	08 95       	ret

000006b6 <sendCommand>:

void sendCommand(int command, int parameter, int snelheid, int acceleratie){
 6b6:	ef 92       	push	r14
 6b8:	ff 92       	push	r15
 6ba:	0f 93       	push	r16
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <L0^A>

000006c4 <L0^A>:
 6c4:	00 d0       	rcall	.+0      	; 0x6c6 <L0^A>

000006c6 <L0^A>:
 6c6:	0f 92       	push	r0
 6c8:	0f 92       	push	r0
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62

000006ce <.Loc.20>:
    int serialschrijven[4] = {command, parameter, snelheid, acceleratie}; // array serieel schrijven 0,1,2,3 (4 hex totaal)
 6ce:	9a 83       	std	Y+2, r25	; 0x02
 6d0:	89 83       	std	Y+1, r24	; 0x01
 6d2:	7c 83       	std	Y+4, r23	; 0x04
 6d4:	6b 83       	std	Y+3, r22	; 0x03
 6d6:	5e 83       	std	Y+6, r21	; 0x06
 6d8:	4d 83       	std	Y+5, r20	; 0x05
 6da:	38 87       	std	Y+8, r19	; 0x08
 6dc:	2f 83       	std	Y+7, r18	; 0x07

000006de <.LBB2>:
    for(int i = 0; i<4; i++){
 6de:	8e 01       	movw	r16, r28
 6e0:	0f 5f       	subi	r16, 0xFF	; 255
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	7e 01       	movw	r14, r28
 6e6:	89 e0       	ldi	r24, 0x09	; 9
 6e8:	e8 0e       	add	r14, r24
 6ea:	f1 1c       	adc	r15, r1

000006ec <.L6>:
        sendByte(serialschrijven[i]);
 6ec:	f8 01       	movw	r30, r16
 6ee:	81 91       	ld	r24, Z+
 6f0:	91 91       	ld	r25, Z+
 6f2:	8f 01       	movw	r16, r30
 6f4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sendByte>

000006f8 <.LVL4>:
    for(int i = 0; i<4; i++){
 6f8:	0e 15       	cp	r16, r14
 6fa:	1f 05       	cpc	r17, r15
 6fc:	b9 f7       	brne	.-18     	; 0x6ec <.L6>

000006fe <.LBE2>:
    }
}
 6fe:	28 96       	adiw	r28, 0x08	; 8
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	08 95       	ret

00000718 <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 718:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 71c:	88 23       	and	r24, r24
 71e:	44 f4       	brge	.+16     	; 0x730 <.L8>

00000720 <.Loc.33>:
        dummy = UDR1; // Read and discard
 720:	ae ec       	ldi	r26, 0xCE	; 206
 722:	b0 e0       	ldi	r27, 0x00	; 0

00000724 <.Loc.34>:
    while (UCSR1A & (1 << RXC1)) {
 724:	e8 ec       	ldi	r30, 0xC8	; 200
 726:	f0 e0       	ldi	r31, 0x00	; 0

00000728 <.L10>:
        dummy = UDR1; // Read and discard
 728:	8c 91       	ld	r24, X

0000072a <.Loc.37>:
    while (UCSR1A & (1 << RXC1)) {
 72a:	80 81       	ld	r24, Z
 72c:	88 23       	and	r24, r24
 72e:	e4 f3       	brlt	.-8      	; 0x728 <.L10>

00000730 <.L8>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 730:	08 95       	ret

00000732 <receiveByte>:

int receiveByte() { //ontvangen van 1 hex getal
    while ( !(UCSR1A & (1<<RXC1))); //Wait for data to be received
 732:	e8 ec       	ldi	r30, 0xC8	; 200
 734:	f0 e0       	ldi	r31, 0x00	; 0

00000736 <.L13>:
 736:	80 81       	ld	r24, Z

00000738 <.Loc.44>:
 738:	88 23       	and	r24, r24
 73a:	ec f7       	brge	.-6      	; 0x736 <.L13>

0000073c <.Loc.45>:
    return UDR1;
 73c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000740 <.Loc.47>:
}
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	08 95       	ret

00000744 <receiveCommand>:

unsigned int serialOntvangen[4];

void receiveCommand(){
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29

0000074c <.LBB3>:
    for(int i = 0; i<4; i++){
 74c:	c4 e2       	ldi	r28, 0x24	; 36
 74e:	d2 e0       	ldi	r29, 0x02	; 2
 750:	0c e2       	ldi	r16, 0x2C	; 44
 752:	12 e0       	ldi	r17, 0x02	; 2

00000754 <.L16>:
        serialOntvangen[i] = receiveByte();
 754:	0e 94 99 03 	call	0x732	; 0x732 <receiveByte>

00000758 <.LVL7>:
 758:	89 93       	st	Y+, r24
 75a:	99 93       	st	Y+, r25

0000075c <.Loc.55>:
    for(int i = 0; i<4; i++){
 75c:	c0 17       	cp	r28, r16
 75e:	d1 07       	cpc	r29, r17
 760:	c9 f7       	brne	.-14     	; 0x754 <.L16>

00000762 <.LBE3>:
    }
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <__vector_36>:

ISR(USART1_RX_vect){
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	0b b6       	in	r0, 0x3b	; 59
 778:	0f 92       	push	r0
 77a:	2f 93       	push	r18
 77c:	3f 93       	push	r19
 77e:	4f 93       	push	r20
 780:	5f 93       	push	r21
 782:	6f 93       	push	r22
 784:	7f 93       	push	r23
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31

00000792 <.Loc.59>:
    receiveCommand();
 792:	0e 94 a2 03 	call	0x744	; 0x744 <receiveCommand>

00000796 <.LVL8>:
    if(serialOntvangen[0]==0x01){
 796:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <serialOntvangen>
 79a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <serialOntvangen+0x1>
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	99 f0       	breq	.+38     	; 0x7c8 <.L20>

000007a2 <.L18>:
        volgendeOpdracht();
    }
}
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0b be       	out	0x3b, r0	; 59
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <.L20>:
        volgendeOpdracht();
 7c8:	0e 94 a8 00 	call	0x150	; 0x150 <volgendeOpdracht>

000007cc <.LVL9>:
}
 7cc:	ea cf       	rjmp	.-44     	; 0x7a2 <.L18>

000007ce <__divmodhi4>:
 7ce:	97 fb       	bst	r25, 7

000007d0 <.Loc.1>:
 7d0:	07 2e       	mov	r0, r23

000007d2 <.Loc.2>:
 7d2:	16 f4       	brtc	.+4      	; 0x7d8 <.L^B1>

000007d4 <.Loc.3>:
 7d4:	00 94       	com	r0

000007d6 <.Loc.4>:
 7d6:	07 d0       	rcall	.+14     	; 0x7e6 <__divmodhi4_neg1>

000007d8 <.L^B1>:
 7d8:	77 fd       	sbrc	r23, 7

000007da <.Loc.6>:
 7da:	09 d0       	rcall	.+18     	; 0x7ee <__divmodhi4_neg2>

000007dc <.Loc.7>:
 7dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodhi4>

000007e0 <.Loc.8>:
 7e0:	07 fc       	sbrc	r0, 7

000007e2 <.Loc.9>:
 7e2:	05 d0       	rcall	.+10     	; 0x7ee <__divmodhi4_neg2>

000007e4 <.Loc.10>:
 7e4:	3e f4       	brtc	.+14     	; 0x7f4 <__divmodhi4_exit>

000007e6 <__divmodhi4_neg1>:
 7e6:	90 95       	com	r25

000007e8 <.Loc.12>:
 7e8:	81 95       	neg	r24

000007ea <.Loc.13>:
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255

000007ec <.Loc.14>:
 7ec:	08 95       	ret

000007ee <__divmodhi4_neg2>:
 7ee:	70 95       	com	r23

000007f0 <.Loc.16>:
 7f0:	61 95       	neg	r22

000007f2 <.Loc.17>:
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255

000007f4 <__divmodhi4_exit>:
 7f4:	08 95       	ret

000007f6 <__udivmodsi4>:
 7f6:	a1 e2       	ldi	r26, 0x21	; 33

000007f8 <.Loc.1>:
 7f8:	1a 2e       	mov	r1, r26

000007fa <.Loc.2>:
 7fa:	aa 1b       	sub	r26, r26

000007fc <.Loc.3>:
 7fc:	bb 1b       	sub	r27, r27

000007fe <.Loc.4>:
 7fe:	fd 01       	movw	r30, r26

00000800 <.Loc.5>:
 800:	0d c0       	rjmp	.+26     	; 0x81c <__udivmodsi4_ep>

00000802 <__udivmodsi4_loop>:
 802:	aa 1f       	adc	r26, r26

00000804 <.Loc.7>:
 804:	bb 1f       	adc	r27, r27

00000806 <.Loc.8>:
 806:	ee 1f       	adc	r30, r30

00000808 <.Loc.9>:
 808:	ff 1f       	adc	r31, r31

0000080a <.Loc.10>:
 80a:	a2 17       	cp	r26, r18

0000080c <.Loc.11>:
 80c:	b3 07       	cpc	r27, r19

0000080e <.Loc.12>:
 80e:	e4 07       	cpc	r30, r20

00000810 <.Loc.13>:
 810:	f5 07       	cpc	r31, r21

00000812 <.Loc.14>:
 812:	20 f0       	brcs	.+8      	; 0x81c <__udivmodsi4_ep>

00000814 <.Loc.15>:
 814:	a2 1b       	sub	r26, r18

00000816 <.Loc.16>:
 816:	b3 0b       	sbc	r27, r19

00000818 <.Loc.17>:
 818:	e4 0b       	sbc	r30, r20

0000081a <.Loc.18>:
 81a:	f5 0b       	sbc	r31, r21

0000081c <__udivmodsi4_ep>:
 81c:	66 1f       	adc	r22, r22

0000081e <.Loc.20>:
 81e:	77 1f       	adc	r23, r23

00000820 <.Loc.21>:
 820:	88 1f       	adc	r24, r24

00000822 <.Loc.22>:
 822:	99 1f       	adc	r25, r25

00000824 <.Loc.23>:
 824:	1a 94       	dec	r1

00000826 <.Loc.24>:
 826:	69 f7       	brne	.-38     	; 0x802 <__udivmodsi4_loop>

00000828 <.Loc.25>:
 828:	60 95       	com	r22

0000082a <.Loc.26>:
 82a:	70 95       	com	r23

0000082c <.Loc.27>:
 82c:	80 95       	com	r24

0000082e <.Loc.28>:
 82e:	90 95       	com	r25

00000830 <.Loc.29>:
 830:	9b 01       	movw	r18, r22

00000832 <.Loc.30>:
 832:	ac 01       	movw	r20, r24

00000834 <.Loc.31>:
 834:	bd 01       	movw	r22, r26

00000836 <.Loc.32>:
 836:	cf 01       	movw	r24, r30

00000838 <.Loc.33>:
 838:	08 95       	ret

0000083a <__udivmodhi4>:
 83a:	aa 1b       	sub	r26, r26

0000083c <.Loc.1>:
 83c:	bb 1b       	sub	r27, r27

0000083e <.Loc.2>:
 83e:	51 e1       	ldi	r21, 0x11	; 17

00000840 <.Loc.3>:
 840:	07 c0       	rjmp	.+14     	; 0x850 <__udivmodhi4_ep>

00000842 <__udivmodhi4_loop>:
 842:	aa 1f       	adc	r26, r26

00000844 <.Loc.5>:
 844:	bb 1f       	adc	r27, r27

00000846 <.Loc.6>:
 846:	a6 17       	cp	r26, r22

00000848 <.Loc.7>:
 848:	b7 07       	cpc	r27, r23

0000084a <.Loc.8>:
 84a:	10 f0       	brcs	.+4      	; 0x850 <__udivmodhi4_ep>

0000084c <.Loc.9>:
 84c:	a6 1b       	sub	r26, r22

0000084e <.Loc.10>:
 84e:	b7 0b       	sbc	r27, r23

00000850 <__udivmodhi4_ep>:
 850:	88 1f       	adc	r24, r24

00000852 <.Loc.12>:
 852:	99 1f       	adc	r25, r25

00000854 <.Loc.13>:
 854:	5a 95       	dec	r21

00000856 <.Loc.14>:
 856:	a9 f7       	brne	.-22     	; 0x842 <__udivmodhi4_loop>

00000858 <.Loc.15>:
 858:	80 95       	com	r24

0000085a <.Loc.16>:
 85a:	90 95       	com	r25

0000085c <.Loc.17>:
 85c:	bc 01       	movw	r22, r24

0000085e <.Loc.18>:
 85e:	cd 01       	movw	r24, r26

00000860 <.Loc.19>:
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
