
bin\Debug\identificatieModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  00000954  00000a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000954  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800256  00800256  00000a5e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000a61  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001b8  00000000  00000000  00000ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001fcd  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001525  00000000  00000000  00002c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001aa4  00000000  00000000  00004162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000324  00000000  00000000  00005c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007a0  00000000  00000000  00005f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000237  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000005c8  00000000  00000000  00006903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000006d  00000000  00000000  00006ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e4 e5       	ldi	r30, 0x54	; 84

000000fc <.Loc.4>:
  fc:	f9 e0       	ldi	r31, 0x09	; 9

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a6 35       	cpi	r26, 0x56	; 86

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a6 e5       	ldi	r26, 0x56	; 86

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a0 36       	cpi	r26, 0x60	; 96

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
 122:	0c 94 a8 04 	jmp	0x950	; 0x950 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initDonkInterrupt>:
#define PIN_IR  PINE
#define IR_R     PE4
#define IR_L     PE5

void initDonkInterrupt(void){
    DDR_IR &= ~(1<<IR_R);
 12a:	6c 98       	cbi	0x0d, 4	; 13

0000012c <.Loc.3>:
    PORT_IR |= (1<<IR_R);
 12c:	74 9a       	sbi	0x0e, 4	; 14

0000012e <.Loc.5>:

    DDR_IR &= ~(1<<IR_L);
 12e:	6d 98       	cbi	0x0d, 5	; 13

00000130 <.Loc.7>:
    PORT_IR |= (1<<IR_L);
 130:	75 9a       	sbi	0x0e, 5	; 14

00000132 <.Loc.9>:
}
 132:	08 95       	ret

00000134 <irDetect>:

 int aantalGedectecteerd = -2;

int irDetect(void){
    static int buttonstate1 = 0;
        if((PIN_IR & (1<<IR_R))){
 134:	64 9b       	sbis	0x0c, 4	; 12
 136:	36 c0       	rjmp	.+108    	; 0x1a4 <.L3>

00000138 <.Loc.14>:
            if(buttonstate1 ==0){
 138:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <buttonstate1.1>
 13c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <buttonstate1.1+0x1>
 140:	89 2b       	or	r24, r25
 142:	49 f0       	breq	.+18     	; 0x156 <.L10>

00000144 <.L4>:
            return 0;
            }
        }

        static int buttonstate2 = 0;
        if((PIN_IR & (1<<IR_L))){
 144:	65 9b       	sbis	0x0c, 5	; 12
 146:	68 c0       	rjmp	.+208    	; 0x218 <.L7>

00000148 <.Loc.19>:
            if(buttonstate2 ==0){
 148:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonstate2.0>
 14c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <buttonstate2.0+0x1>
 150:	89 2b       	or	r24, r25
 152:	d9 f1       	breq	.+118    	; 0x1ca <.L11>

00000154 <.L8>:
            buttonstate2 = 0;
            _delay_ms(10);
            return 0;
            }
        }
}
 154:	08 95       	ret

00000156 <.L10>:
                aantalGedectecteerd++;
 156:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 15a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 164:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>

00000168 <.Loc.24>:
                if(detectMetaalLinks()==1){
 168:	0e 94 55 02 	call	0x4aa	; 0x4aa <detectMetaalLinks>

0000016c <.LVL0>:
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	79 f0       	breq	.+30     	; 0x18e <.L12>

00000170 <.L5>:
                buttonstate1 = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <buttonstate1.1+0x1>
 178:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <buttonstate1.1>

0000017c <.LBB10>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9c e9       	ldi	r25, 0x9C	; 156

00000180 <.L1^B1>:
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <.L1^B1>
 184:	00 c0       	rjmp	.+0      	; 0x186 <L0^A>

00000186 <L0^A>:
	...

00000188 <.LBE10>:
                return 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret

0000018e <.L12>:
                    aantalGedectecteerd+=100;
 18e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 192:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 196:	8c 59       	subi	r24, 0x9C	; 156
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 19e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>
 1a2:	e6 cf       	rjmp	.-52     	; 0x170 <.L5>

000001a4 <.L3>:
            if(buttonstate1 == 1){
 1a4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <buttonstate1.1>
 1a8:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <buttonstate1.1+0x1>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	51 f6       	brne	.-108    	; 0x144 <.L4>

000001b0 <.Loc.44>:
            buttonstate1 = 0;
 1b0:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <buttonstate1.1+0x1>
 1b4:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <buttonstate1.1>

000001b8 <.LBB12>:
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9c e9       	ldi	r25, 0x9C	; 156

000001bc <.L1^B2>:
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <.L1^B2>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <L0^A>

000001c2 <L0^A>:
	...

000001c4 <.LBE12>:
            return 0;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret

000001ca <.L11>:
                aantalGedectecteerd++;
 1ca:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 1ce:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 1d8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>

000001dc <.Loc.59>:
                if(detectMetaalRechts()==1){
 1dc:	0e 94 bc 01 	call	0x378	; 0x378 <detectMetaalRechts>

000001e0 <.LVL5>:
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	79 f0       	breq	.+30     	; 0x202 <.L13>

000001e4 <.L9>:
                buttonstate2 = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <buttonstate2.0+0x1>
 1ec:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <buttonstate2.0>

000001f0 <.LBB14>:
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156

000001f4 <.L1^B3>:
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <.L1^B3>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <L0^A>

000001fa <L0^A>:
	...

000001fc <.LBE14>:
                return 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret

00000202 <.L13>:
                    aantalGedectecteerd+=100;
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 206:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 20a:	8c 59       	subi	r24, 0x9C	; 156
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 212:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>
 216:	e6 cf       	rjmp	.-52     	; 0x1e4 <.L9>

00000218 <.L7>:
            if(buttonstate2 == 1){
 218:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonstate2.0>
 21c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <buttonstate2.0+0x1>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	09 f0       	breq	.+2      	; 0x226 <.Loc.79>

00000224 <L0^A>:
 224:	97 cf       	rjmp	.-210    	; 0x154 <.L8>

00000226 <.Loc.79>:
            buttonstate2 = 0;
 226:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <buttonstate2.0+0x1>
 22a:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <buttonstate2.0>

0000022e <.LBB16>:
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156

00000232 <.L1^B4>:
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <.L1^B4>
 236:	00 c0       	rjmp	.+0      	; 0x238 <L0^A>

00000238 <L0^A>:
	...

0000023a <.LBE16>:
            return 0;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	08 95       	ret

00000240 <volgendeOpdracht>:
#include <avr/io.h>
#include <util/delay.h>

void volgendeOpdracht(){
    static unsigned int opdracht = 0;
    if(opdracht==0){
 240:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <opdracht.0>
 244:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <opdracht.0+0x1>
 248:	89 2b       	or	r24, r25
 24a:	c9 f5       	brne	.+114    	; 0x2be <.L2>

0000024c <.Loc.4>:
        opdracht ++;            //om te onthouden welke opdracht al geweest is
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <opdracht.0+0x1>
 254:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <opdracht.0>

00000258 <.Loc.6>:
        while(stopRequest!=1){
 258:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <stopRequest>
 25c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <stopRequest+0x1>
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	b9 f4       	brne	.+46     	; 0x292 <.L5>

00000264 <.L3>:
            }
            display_number(aantalGedectecteerd);
        }
    }
    if(opdracht==1){
        opdracht++;     //bocht rechtsom
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <opdracht.0+0x1>
 26c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <opdracht.0>

00000270 <.Loc.10>:
        sendByte(0xB1);
 270:	81 eb       	ldi	r24, 0xB1	; 177
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sendByte>

00000278 <.LVL0>:
 278:	28 c0       	rjmp	.+80     	; 0x2ca <.L6>

0000027a <.L4>:
            display_number(aantalGedectecteerd);
 27a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 27e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 282:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <display_number>

00000286 <.LVL1>:
        while(stopRequest!=1){
 286:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <stopRequest>
 28a:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <stopRequest+0x1>
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	b1 f0       	breq	.+44     	; 0x2be <.L2>

00000292 <.L5>:
            sendByte(0x01);  //navigeer, detecteer, identificeer
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sendByte>

0000029a <.LVL2>:
            if(irDetect()==0){  //als de agv iets detecteerd stop 1 seconde
 29a:	0e 94 9a 00 	call	0x134	; 0x134 <irDetect>

0000029e <.LVL3>:
 29e:	89 2b       	or	r24, r25
 2a0:	61 f7       	brne	.-40     	; 0x27a <.L4>

000002a2 <.Loc.17>:
                    sendByte(0xFF);  //stop agv
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sendByte>

000002aa <.LBB4>:
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	83 ed       	ldi	r24, 0xD3	; 211
 2ae:	90 e3       	ldi	r25, 0x30	; 48

000002b0 <.L1^B1>:
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.L1^B1>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <L0^A>

000002ba <L0^A>:
	...

000002bc <.Loc.26>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 2bc:	de cf       	rjmp	.-68     	; 0x27a <.L4>

000002be <.L2>:
    if(opdracht==1){
 2be:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <opdracht.0>
 2c2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <opdracht.0+0x1>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	69 f2       	breq	.-102    	; 0x264 <.L3>

000002ca <.L6>:
    }
    if(opdracht==2){
 2ca:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <opdracht.0>
 2ce:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <opdracht.0+0x1>
 2d2:	02 97       	sbiw	r24, 0x02	; 2
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <.L9>

000002d6 <.L1>:
        sendByte(0xFF);
    }
}
 2d6:	08 95       	ret

000002d8 <.L9>:
        sendByte(0xFF);
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sendByte>

000002e0 <.LVL6>:
}
 2e0:	fa cf       	rjmp	.-12     	; 0x2d6 <.L1>

000002e2 <main>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "main.h"

int main(void){
    sei();
 2e2:	78 94       	sei

000002e4 <.Loc.2>:
    initNoodstop();
 2e4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <initNoodstop>

000002e8 <.LVL0>:
    initUsart();
 2e8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <initUsart>

000002ec <.LVL1>:
    flushUsart2Buffer();
 2ec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <flushUsart2Buffer>

000002f0 <.LVL2>:
    initDonkInterrupt();
 2f0:	0e 94 95 00 	call	0x12a	; 0x12a <initDonkInterrupt>

000002f4 <.LVL3>:
    display_init();
 2f4:	0e 94 c2 03 	call	0x784	; 0x784 <display_init>

000002f8 <.LVL4>:
    initStartKnop();
 2f8:	0e 94 20 03 	call	0x640	; 0x640 <initStartKnop>

000002fc <.L2>:


    while(1){
        display_number(0000);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <display_number>

00000304 <.LVL6>:
        if(!(PINA&(1<<PA6))){          //START CONDITION (start knop is pressed
 304:	06 99       	sbic	0x00, 6	; 0
 306:	fa cf       	rjmp	.-12     	; 0x2fc <.L2>

00000308 <.LBB4>:
	__builtin_avr_delay_cycles(__ticks_dc);
 308:	8f e3       	ldi	r24, 0x3F	; 63
 30a:	9c e9       	ldi	r25, 0x9C	; 156

0000030c <.L1^B1>:
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <.L1^B1>
 310:	00 c0       	rjmp	.+0      	; 0x312 <L0^A>

00000312 <L0^A>:
	...

00000314 <.LBE4>:
            _delay_ms(10);
            volgendeOpdracht();
 314:	0e 94 20 01 	call	0x240	; 0x240 <volgendeOpdracht>

00000318 <.LVL9>:
 318:	f1 cf       	rjmp	.-30     	; 0x2fc <.L2>

0000031a <initSerialCom>:
#include <util/delay.h>

///serial com for debugging
void initSerialCom(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr >> 8);
 31a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

0000031e <.Loc.3>:
    UBRR0L = (unsigned char)ubrr;
 31e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

00000322 <.Loc.5>:

    // Enable transmitter
    UCSR0B = (1 << TXEN0);
 322:	88 e0       	ldi	r24, 0x08	; 8

00000324 <.Loc.7>:
 324:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

00000328 <.Loc.8>:

    // Set frame format: 8data, 1stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

0000032e <.Loc.10>:
}
 32e:	08 95       	ret

00000330 <SerialComTransmit>:

void SerialComTransmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)));
 330:	e0 ec       	ldi	r30, 0xC0	; 192
 332:	f0 e0       	ldi	r31, 0x00	; 0

00000334 <.L3>:
 334:	90 81       	ld	r25, Z

00000336 <.Loc.16>:
 336:	95 ff       	sbrs	r25, 5
 338:	fd cf       	rjmp	.-6      	; 0x334 <.L3>

0000033a <.Loc.17>:
    // Put data into buffer, sends the data
    UDR0 = data;
 33a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

0000033e <.Loc.19>:
}
 33e:	08 95       	ret

00000340 <Serialprint>:

void Serialprint(const char *s) {
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	c8 2f       	mov	r28, r24
 346:	d9 2f       	mov	r29, r25

00000348 <.Loc.22>:
    while (*s) {
 348:	88 81       	ld	r24, Y
 34a:	88 23       	and	r24, r24
 34c:	31 f0       	breq	.+12     	; 0x35a <.L5>
 34e:	21 96       	adiw	r28, 0x01	; 1

00000350 <.L7>:
        SerialComTransmit(*s++);
 350:	0e 94 98 01 	call	0x330	; 0x330 <SerialComTransmit>

00000354 <.LVL6>:
    while (*s) {
 354:	89 91       	ld	r24, Y+

00000356 <.Loc.27>:
 356:	81 11       	cpse	r24, r1
 358:	fb cf       	rjmp	.-10     	; 0x350 <.L7>

0000035a <.L5>:
    }
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <initMetaalDetectorRechts>:
#define nMeas 40

///metaal detector Rechts
void initMetaalDetectorRechts(void) {
    //configure pins als output
    DDRPulseRechts |= (1<<pinPulseRechts);
 360:	81 9a       	sbi	0x10, 1	; 16

00000362 <.Loc.32>:
}
 362:	08 95       	ret

00000364 <initAdcRechts>:

void initAdcRechts(void){
    ADMUX = (0<<REFS1) | (1<<REFS0) | (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
 364:	80 e4       	ldi	r24, 0x40	; 64
 366:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

0000036a <.Loc.36>:
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<ADPS0);
 36a:	ea e7       	ldi	r30, 0x7A	; 122
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	86 e0       	ldi	r24, 0x06	; 6
 370:	80 83       	st	Z, r24

00000372 <.Loc.38>:
    ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC enable, prescaler 128
 372:	87 e8       	ldi	r24, 0x87	; 135
 374:	80 83       	st	Z, r24

00000376 <.Loc.40>:
}
 376:	08 95       	ret

00000378 <detectMetaalRechts>:

int detectMetaalRechts(void) {
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <L0^A>

00000386 <L0^A>:
 386:	00 d0       	rcall	.+0      	; 0x388 <L0^A>

00000388 <L0^A>:
 388:	00 d0       	rcall	.+0      	; 0x38a <L0^A>

0000038a <L0^A>:
 38a:	0f 92       	push	r0
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62

00000390 <.Loc.42>:
    initSerialCom(MYUBRR);
 390:	87 e6       	ldi	r24, 0x67	; 103
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 8d 01 	call	0x31a	; 0x31a <initSerialCom>

00000398 <.LVL9>:
    initMetaalDetectorRechts();
 398:	0e 94 b0 01 	call	0x360	; 0x360 <initMetaalDetectorRechts>

0000039c <.LVL10>:
    initAdcRechts();
 39c:	0e 94 b2 01 	call	0x364	; 0x364 <initAdcRechts>

000003a0 <.LVL11>:
 3a0:	28 e2       	ldi	r18, 0x28	; 40
 3a2:	30 e0       	ldi	r19, 0x00	; 0

000003a4 <.Loc.50>:
    long unsigned int sum = 0;
 3a4:	c1 2c       	mov	r12, r1
 3a6:	d1 2c       	mov	r13, r1
 3a8:	76 01       	movw	r14, r12

000003aa <.Loc.51>:
            PORTPulseRechts &= ~(1<<pinPulseRechts); //pin low
            _delay_us(pulseWidth);
        }

    // Meet de spanning
    ADCSRA |= (1<<ADSC);    //start adc
 3aa:	ea e7       	ldi	r30, 0x7A	; 122
 3ac:	f0 e0       	ldi	r31, 0x00	; 0

000003ae <.Loc.52>:
    while (ADCSRA & (1<<ADSC)); // wait until done
    int val = ADC;  // Leest tussen 0 en 1023
 3ae:	48 e7       	ldi	r20, 0x78	; 120
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	16 c0       	rjmp	.+44     	; 0x3e0 <.L14>

000003b4 <.L21>:
    ADCSRA |= (1<<ADSC);    //start adc
 3b4:	80 81       	ld	r24, Z

000003b6 <.Loc.54>:
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	80 83       	st	Z, r24

000003ba <.L13>:
    while (ADCSRA & (1<<ADSC)); // wait until done
 3ba:	80 81       	ld	r24, Z
 3bc:	86 fd       	sbrc	r24, 6
 3be:	fd cf       	rjmp	.-6      	; 0x3ba <.L13>

000003c0 <.Loc.57>:
    int val = ADC;  // Leest tussen 0 en 1023
 3c0:	da 01       	movw	r26, r20
 3c2:	8d 91       	ld	r24, X+
 3c4:	9c 91       	ld	r25, X

000003c6 <.Loc.59>:
    sum += val;
 3c6:	09 2e       	mov	r0, r25
 3c8:	00 0c       	add	r0, r0
 3ca:	aa 0b       	sbc	r26, r26
 3cc:	bb 0b       	sbc	r27, r27

000003ce <.Loc.61>:
 3ce:	c8 0e       	add	r12, r24
 3d0:	d9 1e       	adc	r13, r25
 3d2:	ea 1e       	adc	r14, r26
 3d4:	fb 1e       	adc	r15, r27

000003d6 <.Loc.62>:
    for (int i=0; i< nMeas; i++) {
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	31 09       	sbc	r19, r1

000003da <.Loc.65>:
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	e9 f0       	breq	.+58     	; 0x41a <.L20>

000003e0 <.L14>:
        DDRCapRechts |= (1<<pinCapRechts); //output
 3e0:	80 9a       	sbi	0x10, 0	; 16

000003e2 <.Loc.68>:
        PORTCapRechts &= ~(1<<pinCapRechts); //pin low
 3e2:	88 98       	cbi	0x11, 0	; 17

000003e4 <.LBB30>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e4:	8f ec       	ldi	r24, 0xCF	; 207
 3e6:	97 e0       	ldi	r25, 0x07	; 7

000003e8 <.L1^B1>:
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <.L1^B1>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <L0^A>

000003ee <L0^A>:
	...

000003f0 <.LBE30>:
        DDRCapRechts &= ~(1<<pinCapRechts); //input
 3f0:	80 98       	cbi	0x10, 0	; 16

000003f2 <.Loc.81>:
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	90 e0       	ldi	r25, 0x00	; 0

000003f6 <.L12>:
            PORTPulseRechts |= (1<<pinPulseRechts); //pin hoog
 3f6:	89 9a       	sbi	0x11, 1	; 17

000003f8 <.LBB33>:
 3f8:	a3 e5       	ldi	r26, 0x53	; 83
 3fa:	b1 e0       	ldi	r27, 0x01	; 1

000003fc <.L1^B2>:
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <.L1^B2>
 400:	00 c0       	rjmp	.+0      	; 0x402 <L0^A>

00000402 <L0^A>:
	...

00000404 <.LBE33>:
            PORTPulseRechts &= ~(1<<pinPulseRechts); //pin low
 404:	89 98       	cbi	0x11, 1	; 17

00000406 <.LBB35>:
 406:	a3 e5       	ldi	r26, 0x53	; 83
 408:	b1 e0       	ldi	r27, 0x01	; 1

0000040a <.L1^B3>:
 40a:	11 97       	sbiw	r26, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <.L1^B3>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <L0^A>

00000410 <L0^A>:
	...

00000412 <.LBE35>:
        for (int j = 0; j < 8; j++) {//aantal pulsen per meting
 412:	01 97       	sbiw	r24, 0x01	; 1

00000414 <.Loc.109>:
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	79 f7       	brne	.-34     	; 0x3f6 <.L12>
 418:	cd cf       	rjmp	.-102    	; 0x3b4 <.L21>

0000041a <.L20>:
    }

    // Gemiddelde berekenen
    int avg = sum / nMeas;//rekenen sturen
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	28 e2       	ldi	r18, 0x28	; 40
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	50 e0       	ldi	r21, 0x00	; 0

00000426 <.Loc.113>:
 426:	0e 94 3d 04 	call	0x87a	; 0x87a <__udivmodsi4>
 42a:	da 01       	movw	r26, r20
 42c:	c9 01       	movw	r24, r18

0000042e <.Loc.114>:
 42e:	79 01       	movw	r14, r18

00000430 <.LBB40>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 430:	4a e0       	ldi	r20, 0x0A	; 10
 432:	be 01       	movw	r22, r28
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__itoa_ncheck>

0000043c <.LBE40>:
                    //voor serial debugging
                    char buffer[10];  // enough space for an int

                    itoa(avg, buffer, 10);  // convert int to decimal string

                    Serialprint("Average: ");
 43c:	83 e2       	ldi	r24, 0x23	; 35
 43e:	92 e0       	ldi	r25, 0x02	; 2
 440:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

00000444 <.LVL32>:
                    Serialprint(buffer);
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

0000044c <.LVL33>:
                    Serialprint("\r\n");     // newline
 44c:	83 e5       	ldi	r24, 0x53	; 83
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

00000454 <.LVL34>:

    // Metaaldetectie
    if (avg > thresholdRechts) {//rekenen sturen
 454:	b8 ee       	ldi	r27, 0xE8	; 232
 456:	eb 16       	cp	r14, r27
 458:	b3 e0       	ldi	r27, 0x03	; 3
 45a:	fb 06       	cpc	r15, r27
 45c:	9c f0       	brlt	.+38     	; 0x484 <.L15>

0000045e <.Loc.129>:
        Serialprint("geen metaal Links\r\n");
 45e:	8d e2       	ldi	r24, 0x2D	; 45
 460:	92 e0       	ldi	r25, 0x02	; 2
 462:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

00000466 <.LVL35>:
        return 0;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0

0000046a <.L11>:
    }
    else {
        Serialprint("metaal Links\r\n");
        return 1;
  }
}
 46a:	2a 96       	adiw	r28, 0x0a	; 10
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12

00000482 <.Loc.133>:
 482:	08 95       	ret

00000484 <.L15>:
        Serialprint("metaal Links\r\n");
 484:	82 e3       	ldi	r24, 0x32	; 50
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

0000048c <.LVL38>:
        return 1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	ec cf       	rjmp	.-40     	; 0x46a <.L11>

00000492 <initMetaalDetectorLinks>:

#define thresholdLinks 999

void initMetaalDetectorLinks(void) {
    //configure pins als output
    DDRPulseLinks |= (1<<pinPulseLinks);
 492:	85 9a       	sbi	0x10, 5	; 16

00000494 <.Loc.140>:
}
 494:	08 95       	ret

00000496 <initAdcLinks>:

void initAdcLinks(void){
    ADMUX = (0<<REFS1) | (1<<REFS0) | (0<<MUX3) | (1<<MUX2) | (0<<MUX1) | (0<<MUX0);
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

0000049c <.Loc.144>:
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<ADPS0);
 49c:	ea e7       	ldi	r30, 0x7A	; 122
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	80 83       	st	Z, r24

000004a4 <.Loc.146>:
    ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC enable, prescaler 128
 4a4:	87 e8       	ldi	r24, 0x87	; 135
 4a6:	80 83       	st	Z, r24

000004a8 <.Loc.148>:
}
 4a8:	08 95       	ret

000004aa <detectMetaalLinks>:

int detectMetaalLinks(void) {
 4aa:	cf 92       	push	r12
 4ac:	df 92       	push	r13
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <L0^A>

000004b8 <L0^A>:
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <L0^A>

000004ba <L0^A>:
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <L0^A>

000004bc <L0^A>:
 4bc:	0f 92       	push	r0
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62

000004c2 <.Loc.150>:
    initSerialCom(MYUBRR);
 4c2:	87 e6       	ldi	r24, 0x67	; 103
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 8d 01 	call	0x31a	; 0x31a <initSerialCom>

000004ca <.LVL39>:
    initMetaalDetectorLinks();
 4ca:	0e 94 49 02 	call	0x492	; 0x492 <initMetaalDetectorLinks>

000004ce <.LVL40>:
    initAdcLinks();
 4ce:	0e 94 4b 02 	call	0x496	; 0x496 <initAdcLinks>

000004d2 <.LVL41>:
 4d2:	28 e2       	ldi	r18, 0x28	; 40
 4d4:	30 e0       	ldi	r19, 0x00	; 0

000004d6 <.Loc.158>:
    long unsigned int sum = 0;
 4d6:	c1 2c       	mov	r12, r1
 4d8:	d1 2c       	mov	r13, r1
 4da:	76 01       	movw	r14, r12

000004dc <.Loc.159>:
            PORTPulseLinks &= ~(1<<pinPulseLinks); //pin low
            _delay_us(pulseWidth);
        }

    // Meet de spanning
    ADCSRA |= (1<<ADSC);    //start adc
 4dc:	ea e7       	ldi	r30, 0x7A	; 122
 4de:	f0 e0       	ldi	r31, 0x00	; 0

000004e0 <.Loc.160>:
    while (ADCSRA & (1<<ADSC)); // wait until done
    int val = ADC;  // Leest tussen 0 en 1023
 4e0:	48 e7       	ldi	r20, 0x78	; 120
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	16 c0       	rjmp	.+44     	; 0x512 <.L27>

000004e6 <.L34>:
    ADCSRA |= (1<<ADSC);    //start adc
 4e6:	80 81       	ld	r24, Z

000004e8 <.Loc.162>:
 4e8:	80 64       	ori	r24, 0x40	; 64
 4ea:	80 83       	st	Z, r24

000004ec <.L26>:
    while (ADCSRA & (1<<ADSC)); // wait until done
 4ec:	80 81       	ld	r24, Z
 4ee:	86 fd       	sbrc	r24, 6
 4f0:	fd cf       	rjmp	.-6      	; 0x4ec <.L26>

000004f2 <.Loc.165>:
    int val = ADC;  // Leest tussen 0 en 1023
 4f2:	da 01       	movw	r26, r20
 4f4:	8d 91       	ld	r24, X+
 4f6:	9c 91       	ld	r25, X

000004f8 <.Loc.167>:
    sum += val;
 4f8:	09 2e       	mov	r0, r25
 4fa:	00 0c       	add	r0, r0
 4fc:	aa 0b       	sbc	r26, r26
 4fe:	bb 0b       	sbc	r27, r27

00000500 <.Loc.169>:
 500:	c8 0e       	add	r12, r24
 502:	d9 1e       	adc	r13, r25
 504:	ea 1e       	adc	r14, r26
 506:	fb 1e       	adc	r15, r27

00000508 <.Loc.170>:
    for (int i=0; i< nMeas; i++) {
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	31 09       	sbc	r19, r1

0000050c <.Loc.173>:
 50c:	21 15       	cp	r18, r1
 50e:	31 05       	cpc	r19, r1
 510:	e9 f0       	breq	.+58     	; 0x54c <.L33>

00000512 <.L27>:
        DDRCapLinks |= (1<<pinCapLinks); //output
 512:	84 9a       	sbi	0x10, 4	; 16

00000514 <.Loc.176>:
        PORTCapLinks &= ~(1<<pinCapLinks); //pin low
 514:	8c 98       	cbi	0x11, 4	; 17

00000516 <.LBB44>:
 516:	8f ec       	ldi	r24, 0xCF	; 207
 518:	97 e0       	ldi	r25, 0x07	; 7

0000051a <.L1^B4>:
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <.L1^B4>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <L0^A>

00000520 <L0^A>:
	...

00000522 <.LBE44>:
        DDRCapLinks &= ~(1<<pinCapLinks); //input
 522:	84 98       	cbi	0x10, 4	; 16

00000524 <.Loc.189>:
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	90 e0       	ldi	r25, 0x00	; 0

00000528 <.L25>:
            PORTPulseLinks |= (1<<pinPulseLinks); //pin hoog
 528:	8d 9a       	sbi	0x11, 5	; 17

0000052a <.LBB47>:
 52a:	a3 e5       	ldi	r26, 0x53	; 83
 52c:	b1 e0       	ldi	r27, 0x01	; 1

0000052e <.L1^B5>:
 52e:	11 97       	sbiw	r26, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <.L1^B5>
 532:	00 c0       	rjmp	.+0      	; 0x534 <L0^A>

00000534 <L0^A>:
	...

00000536 <.LBE47>:
            PORTPulseLinks &= ~(1<<pinPulseLinks); //pin low
 536:	8d 98       	cbi	0x11, 5	; 17

00000538 <.LBB49>:
 538:	a3 e5       	ldi	r26, 0x53	; 83
 53a:	b1 e0       	ldi	r27, 0x01	; 1

0000053c <.L1^B6>:
 53c:	11 97       	sbiw	r26, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <.L1^B6>
 540:	00 c0       	rjmp	.+0      	; 0x542 <L0^A>

00000542 <L0^A>:
	...

00000544 <.LBE49>:
        for (int j = 0; j < 8; j++) {//aantal pulsen per meting
 544:	01 97       	sbiw	r24, 0x01	; 1

00000546 <.Loc.217>:
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	79 f7       	brne	.-34     	; 0x528 <.L25>
 54a:	cd cf       	rjmp	.-102    	; 0x4e6 <.L34>

0000054c <.L33>:
    }

    // Gemiddelde berekenen
    int avg = sum / nMeas;//rekenen sturen
 54c:	c7 01       	movw	r24, r14
 54e:	b6 01       	movw	r22, r12
 550:	28 e2       	ldi	r18, 0x28	; 40
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	50 e0       	ldi	r21, 0x00	; 0

00000558 <.Loc.221>:
 558:	0e 94 3d 04 	call	0x87a	; 0x87a <__udivmodsi4>
 55c:	da 01       	movw	r26, r20
 55e:	c9 01       	movw	r24, r18

00000560 <.Loc.222>:
 560:	79 01       	movw	r14, r18

00000562 <.LBB54>:
 562:	4a e0       	ldi	r20, 0x0A	; 10
 564:	be 01       	movw	r22, r28
 566:	6f 5f       	subi	r22, 0xFF	; 255
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__itoa_ncheck>

0000056e <.LBE54>:
                    //voor serial debugging
                    char buffer[10];  // enough space for an int

                    itoa(avg, buffer, 10);  // convert int to decimal string

                    Serialprint("Average: ");
 56e:	83 e2       	ldi	r24, 0x23	; 35
 570:	92 e0       	ldi	r25, 0x02	; 2
 572:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

00000576 <.LVL62>:
                    Serialprint(buffer);
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

0000057e <.LVL63>:
                    Serialprint("\r\n");     // newline
 57e:	83 e5       	ldi	r24, 0x53	; 83
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

00000586 <.LVL64>:

    // Metaaldetectie
    if (avg > thresholdLinks) {//rekenen sturen
 586:	b8 ee       	ldi	r27, 0xE8	; 232
 588:	eb 16       	cp	r14, r27
 58a:	b3 e0       	ldi	r27, 0x03	; 3
 58c:	fb 06       	cpc	r15, r27
 58e:	9c f0       	brlt	.+38     	; 0x5b6 <.L28>

00000590 <.Loc.237>:
        Serialprint("geen metaal RECHTS\r\n");
 590:	81 e4       	ldi	r24, 0x41	; 65
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

00000598 <.LVL65>:
        return 0;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0

0000059c <.L24>:
    }
    else {
        Serialprint("metaal RECHTS\r\n");
        return 1;
  }
}
 59c:	2a 96       	adiw	r28, 0x0a	; 10
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	df 90       	pop	r13
 5b2:	cf 90       	pop	r12

000005b4 <.Loc.241>:
 5b4:	08 95       	ret

000005b6 <.L28>:
        Serialprint("metaal RECHTS\r\n");
 5b6:	86 e4       	ldi	r24, 0x46	; 70
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	0e 94 a0 01 	call	0x340	; 0x340 <Serialprint>

000005be <.LVL68>:
        return 1;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	ec cf       	rjmp	.-40     	; 0x59c <.L24>

000005c4 <initNoodstop>:
#define DDRlAMP DDRA
#define PORTLAMP PORTA


void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 5c4:	50 98       	cbi	0x0a, 0	; 10

000005c6 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 5c6:	58 9a       	sbi	0x0b, 0	; 11

000005c8 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 5c8:	e8 9a       	sbi	0x1d, 0	; 29

000005ca <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 5ca:	e9 e6       	ldi	r30, 0x69	; 105
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z

000005d0 <.Loc.8>:
 5d0:	81 60       	ori	r24, 0x01	; 1
 5d2:	80 83       	st	Z, r24

000005d4 <.Loc.9>:
    sei();
 5d4:	78 94       	sei

000005d6 <.Loc.10>:

    DDRlAMP |= (1<<NOODLAMP);
 5d6:	0c 9a       	sbi	0x01, 4	; 1

000005d8 <.Loc.12>:
    PORTLAMP &= ~(1<<NOODLAMP);
 5d8:	14 98       	cbi	0x02, 4	; 2

000005da <.Loc.14>:
}
 5da:	08 95       	ret

000005dc <__vector_1>:

ISR(INT0_vect){
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	0b b6       	in	r0, 0x3b	; 59
 5e8:	0f 92       	push	r0
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31

00000602 <.L5>:
    while(1){
       while(!(PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 602:	48 99       	sbic	0x09, 0	; 9
 604:	03 c0       	rjmp	.+6      	; 0x60c <.L3>

00000606 <.L4>:
            PORTLAMP |= (1<<NOODLAMP);
 606:	14 9a       	sbi	0x02, 4	; 2

00000608 <.Loc.21>:
       while(!(PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 608:	48 9b       	sbis	0x09, 0	; 9
 60a:	fd cf       	rjmp	.-6      	; 0x606 <.L4>

0000060c <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 60c:	06 99       	sbic	0x00, 6	; 0
 60e:	f9 cf       	rjmp	.-14     	; 0x602 <.L5>

00000610 <.Loc.24>:
            //uitvoer();
            PORTLAMP &= ~(1<<NOODLAMP);
 610:	14 98       	cbi	0x02, 4	; 2

00000612 <.Loc.26>:
            sendByte(0xFF);
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 f7 03 	call	0x7ee	; 0x7ee <sendByte>

0000061a <.LVL0>:
            break;
        }
    }
}
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0b be       	out	0x3b, r0	; 59
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <initStartKnop>:


//cant be bothered to create an extra file just for this function
void initStartKnop(void){
    DDR_knop &= ~(1<<start);
 640:	0e 98       	cbi	0x01, 6	; 1

00000642 <.Loc.32>:
    PORT_knop |= (1<<start);
 642:	16 9a       	sbi	0x02, 6	; 2

00000644 <.Loc.34>:
}
 644:	08 95       	ret

00000646 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 646:	ea e0       	ldi	r30, 0x0A	; 10
 648:	f1 e0       	ldi	r31, 0x01	; 1
 64a:	80 81       	ld	r24, Z

0000064c <.Loc.2>:
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	80 83       	st	Z, r24

00000650 <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 650:	eb e0       	ldi	r30, 0x0B	; 11
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	80 81       	ld	r24, Z

00000656 <.Loc.4>:
 656:	80 68       	ori	r24, 0x80	; 128
 658:	80 83       	st	Z, r24

0000065a <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 65a:	80 81       	ld	r24, Z

0000065c <.Loc.6>:
 65c:	80 62       	ori	r24, 0x20	; 32
 65e:	80 83       	st	Z, r24

00000660 <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 660:	80 81       	ld	r24, Z
 662:	8f 77       	andi	r24, 0x7F	; 127
 664:	80 83       	st	Z, r24

00000666 <.Loc.9>:
}
 666:	08 95       	ret

00000668 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 668:	ea e0       	ldi	r30, 0x0A	; 10
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	80 81       	ld	r24, Z

0000066e <.Loc.12>:
 66e:	80 68       	ori	r24, 0x80	; 128
 670:	80 83       	st	Z, r24

00000672 <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 672:	eb e0       	ldi	r30, 0x0B	; 11
 674:	f1 e0       	ldi	r31, 0x01	; 1
 676:	80 81       	ld	r24, Z
 678:	8f 7d       	andi	r24, 0xDF	; 223
 67a:	80 83       	st	Z, r24

0000067c <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 67c:	80 81       	ld	r24, Z

0000067e <.Loc.16>:
 67e:	80 62       	ori	r24, 0x20	; 32
 680:	80 83       	st	Z, r24

00000682 <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 682:	80 81       	ld	r24, Z

00000684 <.Loc.18>:
 684:	80 68       	ori	r24, 0x80	; 128
 686:	80 83       	st	Z, r24

00000688 <.Loc.19>:
}
 688:	08 95       	ret

0000068a <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 68a:	ea e0       	ldi	r30, 0x0A	; 10
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	90 81       	ld	r25, Z

00000690 <.Loc.22>:
 690:	90 68       	ori	r25, 0x80	; 128
 692:	90 83       	st	Z, r25

00000694 <.Loc.23>:
 694:	28 e0       	ldi	r18, 0x08	; 8
 696:	30 e0       	ldi	r19, 0x00	; 0

00000698 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 698:	eb e0       	ldi	r30, 0x0B	; 11
 69a:	f1 e0       	ldi	r31, 0x01	; 1
 69c:	0c c0       	rjmp	.+24     	; 0x6b6 <.L6>

0000069e <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 69e:	90 81       	ld	r25, Z
 6a0:	9f 77       	andi	r25, 0x7F	; 127
 6a2:	90 83       	st	Z, r25

000006a4 <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 6a4:	90 81       	ld	r25, Z

000006a6 <.Loc.31>:
 6a6:	90 62       	ori	r25, 0x20	; 32
 6a8:	90 83       	st	Z, r25

000006aa <.Loc.32>:
        data >>= 1;
 6aa:	86 95       	lsr	r24

000006ac <.Loc.34>:
    for(int i = 0; i < 8; i++){
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	31 09       	sbc	r19, r1

000006b0 <.Loc.36>:
 6b0:	21 15       	cp	r18, r1
 6b2:	31 05       	cpc	r19, r1
 6b4:	49 f0       	breq	.+18     	; 0x6c8 <.L8>

000006b6 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 6b6:	90 81       	ld	r25, Z
 6b8:	9f 7d       	andi	r25, 0xDF	; 223
 6ba:	90 83       	st	Z, r25

000006bc <.Loc.39>:
        if(data & 0x01){
 6bc:	80 ff       	sbrs	r24, 0
 6be:	ef cf       	rjmp	.-34     	; 0x69e <.L4>

000006c0 <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 6c0:	90 81       	ld	r25, Z

000006c2 <.Loc.42>:
 6c2:	90 68       	ori	r25, 0x80	; 128
 6c4:	90 83       	st	Z, r25
 6c6:	ee cf       	rjmp	.-36     	; 0x6a4 <.L5>

000006c8 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 6c8:	eb e0       	ldi	r30, 0x0B	; 11
 6ca:	f1 e0       	ldi	r31, 0x01	; 1
 6cc:	80 81       	ld	r24, Z

000006ce <.Loc.46>:
 6ce:	8f 7d       	andi	r24, 0xDF	; 223
 6d0:	80 83       	st	Z, r24

000006d2 <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 6d2:	80 81       	ld	r24, Z

000006d4 <.Loc.48>:
 6d4:	80 62       	ori	r24, 0x20	; 32
 6d6:	80 83       	st	Z, r24

000006d8 <.Loc.49>:
}
 6d8:	08 95       	ret

000006da <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 6da:	cf 93       	push	r28
 6dc:	c8 2f       	mov	r28, r24

000006de <.Loc.52>:
    display_start();
 6de:	0e 94 23 03 	call	0x646	; 0x646 <display_start>

000006e2 <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 6e2:	8c 2f       	mov	r24, r28
 6e4:	87 70       	andi	r24, 0x07	; 7
 6e6:	88 68       	ori	r24, 0x88	; 136
 6e8:	0e 94 45 03 	call	0x68a	; 0x68a <display_sendbyte>

000006ec <.LVL9>:
    display_stop();
 6ec:	0e 94 34 03 	call	0x668	; 0x668 <display_stop>

000006f0 <.LVL10>:
}
 6f0:	cf 91       	pop	r28

000006f2 <.Loc.56>:
 6f2:	08 95       	ret

000006f4 <display_number>:

// Display 4 digit integer
void display_number(int number){
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	d8 2f       	mov	r29, r24
 700:	c9 2f       	mov	r28, r25

00000702 <.Loc.59>:
    display_start();
 702:	0e 94 23 03 	call	0x646	; 0x646 <display_start>

00000706 <.LVL13>:
    display_sendbyte(0x40);
 706:	80 e4       	ldi	r24, 0x40	; 64
 708:	0e 94 45 03 	call	0x68a	; 0x68a <display_sendbyte>

0000070c <.LVL14>:
    display_stop();
 70c:	0e 94 34 03 	call	0x668	; 0x668 <display_stop>

00000710 <.LVL15>:
 710:	13 ec       	ldi	r17, 0xC3	; 195

00000712 <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 712:	0f 2e       	mov	r0, r31
 714:	fa e0       	ldi	r31, 0x0A	; 10
 716:	ef 2e       	mov	r14, r31
 718:	f1 2c       	mov	r15, r1
 71a:	f0 2d       	mov	r31, r0

0000071c <.L11>:
        display_start();
 71c:	0e 94 23 03 	call	0x646	; 0x646 <display_start>

00000720 <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 720:	81 2f       	mov	r24, r17
 722:	0e 94 45 03 	call	0x68a	; 0x68a <display_sendbyte>

00000726 <.LVL18>:
        display_sendbyte(digits[number%10]);
 726:	8d 2f       	mov	r24, r29
 728:	9c 2f       	mov	r25, r28
 72a:	b7 01       	movw	r22, r14
 72c:	0e 94 29 04 	call	0x852	; 0x852 <__divmodhi4>
 730:	d6 2f       	mov	r29, r22

00000732 <.Loc.71>:
 732:	c7 2f       	mov	r28, r23

00000734 <.Loc.72>:
 734:	fc 01       	movw	r30, r24
 736:	ea 5e       	subi	r30, 0xEA	; 234
 738:	fd 4f       	sbci	r31, 0xFD	; 253

0000073a <.Loc.73>:
 73a:	80 81       	ld	r24, Z
 73c:	0e 94 45 03 	call	0x68a	; 0x68a <display_sendbyte>

00000740 <.LVL20>:
        number /= 10;
        display_stop();
 740:	0e 94 34 03 	call	0x668	; 0x668 <display_stop>

00000744 <.LVL21>:
    for (int i = 0; i < 4; i++) {
 744:	11 50       	subi	r17, 0x01	; 1
 746:	1f 3b       	cpi	r17, 0xBF	; 191
 748:	49 f7       	brne	.-46     	; 0x71c <.L11>

0000074a <.Loc.78>:
    }
}
 74a:	df 91       	pop	r29

0000074c <.Loc.79>:
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	ff 90       	pop	r15
 752:	ef 90       	pop	r14
 754:	08 95       	ret

00000756 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	c8 2f       	mov	r28, r24
 75e:	d9 2f       	mov	r29, r25
 760:	16 2f       	mov	r17, r22

00000762 <.Loc.82>:
    display_start();
 762:	0e 94 23 03 	call	0x646	; 0x646 <display_start>

00000766 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 766:	80 ec       	ldi	r24, 0xC0	; 192
 768:	81 0f       	add	r24, r17
 76a:	0e 94 45 03 	call	0x68a	; 0x68a <display_sendbyte>

0000076e <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 76e:	ce 5f       	subi	r28, 0xFE	; 254
 770:	dd 4f       	sbci	r29, 0xFD	; 253

00000772 <.Loc.86>:
 772:	88 81       	ld	r24, Y
 774:	0e 94 45 03 	call	0x68a	; 0x68a <display_sendbyte>

00000778 <.LVL26>:
    display_stop();
 778:	0e 94 34 03 	call	0x668	; 0x668 <display_stop>

0000077c <.LVL27>:
}
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17

00000782 <.Loc.89>:
 782:	08 95       	ret

00000784 <display_init>:

// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 784:	ea e0       	ldi	r30, 0x0A	; 10
 786:	f1 e0       	ldi	r31, 0x01	; 1
 788:	80 81       	ld	r24, Z

0000078a <.Loc.92>:
 78a:	80 68       	ori	r24, 0x80	; 128
 78c:	80 83       	st	Z, r24

0000078e <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 78e:	80 81       	ld	r24, Z

00000790 <.Loc.94>:
 790:	80 62       	ori	r24, 0x20	; 32
 792:	80 83       	st	Z, r24

00000794 <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 794:	eb e0       	ldi	r30, 0x0B	; 11
 796:	f1 e0       	ldi	r31, 0x01	; 1
 798:	80 81       	ld	r24, Z

0000079a <.Loc.96>:
 79a:	80 68       	ori	r24, 0x80	; 128
 79c:	80 83       	st	Z, r24

0000079e <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 79e:	80 81       	ld	r24, Z

000007a0 <.Loc.98>:
 7a0:	80 62       	ori	r24, 0x20	; 32
 7a2:	80 83       	st	Z, r24

000007a4 <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 7a4:	87 e0       	ldi	r24, 0x07	; 7
 7a6:	0e 94 6d 03 	call	0x6da	; 0x6da <display_brightness>

000007aa <.LVL29>:
}
 7aa:	08 95       	ret

000007ac <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	80 e1       	ldi	r24, 0x10	; 16
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 ab 03 	call	0x756	; 0x756 <display_letter>

000007b6 <.LVL30>:
    display_letter(17, 1);
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	81 e1       	ldi	r24, 0x11	; 17
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 ab 03 	call	0x756	; 0x756 <display_letter>

000007c0 <.LVL31>:
    display_letter(13, 2);
 7c0:	62 e0       	ldi	r22, 0x02	; 2
 7c2:	8d e0       	ldi	r24, 0x0D	; 13
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 ab 03 	call	0x756	; 0x756 <display_letter>

000007ca <.LVL32>:
    display_letter(14, 3);
 7ca:	63 e0       	ldi	r22, 0x03	; 3
 7cc:	8e e0       	ldi	r24, 0x0E	; 14
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 ab 03 	call	0x756	; 0x756 <display_letter>

000007d4 <.LVL33>:
}
 7d4:	08 95       	ret

000007d6 <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 7d6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

000007da <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 7da:	87 e6       	ldi	r24, 0x67	; 103
 7dc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

000007e0 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 7e0:	88 e9       	ldi	r24, 0x98	; 152
 7e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

000007e6 <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 7e6:	86 e0       	ldi	r24, 0x06	; 6
 7e8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

000007ec <.Loc.9>:
}
 7ec:	08 95       	ret

000007ee <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 7ee:	e8 ec       	ldi	r30, 0xC8	; 200
 7f0:	f0 e0       	ldi	r31, 0x00	; 0

000007f2 <.L3>:
 7f2:	90 81       	ld	r25, Z
 7f4:	95 ff       	sbrs	r25, 5
 7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <.L3>

000007f8 <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 7f8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

000007fc <.Loc.17>:
}
 7fc:	08 95       	ret

000007fe <flushUsart2Buffer>:


//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 7fe:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 802:	88 23       	and	r24, r24
 804:	44 f4       	brge	.+16     	; 0x816 <.L5>

00000806 <.Loc.22>:
        dummy = UDR1; // Read and discard
 806:	ae ec       	ldi	r26, 0xCE	; 206
 808:	b0 e0       	ldi	r27, 0x00	; 0

0000080a <.Loc.23>:
    while (UCSR1A & (1 << RXC1)) {
 80a:	e8 ec       	ldi	r30, 0xC8	; 200
 80c:	f0 e0       	ldi	r31, 0x00	; 0

0000080e <.L7>:
        dummy = UDR1; // Read and discard
 80e:	8c 91       	ld	r24, X

00000810 <.Loc.26>:
    while (UCSR1A & (1 << RXC1)) {
 810:	80 81       	ld	r24, Z
 812:	88 23       	and	r24, r24
 814:	e4 f3       	brlt	.-8      	; 0x80e <.L7>

00000816 <.L5>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 816:	08 95       	ret

00000818 <__vector_36>:

unsigned int serialData;
unsigned int stopRequest = 0;

ISR(USART1_RX_vect){
 818:	1f 92       	push	r1
 81a:	1f b6       	in	r1, 0x3f	; 63
 81c:	1f 92       	push	r1
 81e:	11 24       	eor	r1, r1
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25

00000824 <.Loc.29>:
    serialData =UDR1;
 824:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 828:	90 e0       	ldi	r25, 0x00	; 0

0000082a <.Loc.31>:
 82a:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <serialData+0x1>
 82e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <serialData>

00000832 <.Loc.32>:
    if(serialData==0x01){
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	91 05       	cpc	r25, r1
 836:	31 f0       	breq	.+12     	; 0x844 <.L11>

00000838 <.L9>:
        stopRequest = 1;
    }
}
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	1f 90       	pop	r1
 83e:	1f be       	out	0x3f, r1	; 63
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <.L11>:
        stopRequest = 1;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <stopRequest+0x1>
 84c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <stopRequest>

00000850 <.Loc.37>:
}
 850:	f3 cf       	rjmp	.-26     	; 0x838 <.L9>

00000852 <__divmodhi4>:
 852:	97 fb       	bst	r25, 7

00000854 <.Loc.1>:
 854:	07 2e       	mov	r0, r23

00000856 <.Loc.2>:
 856:	16 f4       	brtc	.+4      	; 0x85c <.L^B1>

00000858 <.Loc.3>:
 858:	00 94       	com	r0

0000085a <.Loc.4>:
 85a:	07 d0       	rcall	.+14     	; 0x86a <__divmodhi4_neg1>

0000085c <.L^B1>:
 85c:	77 fd       	sbrc	r23, 7

0000085e <.Loc.6>:
 85e:	09 d0       	rcall	.+18     	; 0x872 <__divmodhi4_neg2>

00000860 <.Loc.7>:
 860:	0e 94 5f 04 	call	0x8be	; 0x8be <__udivmodhi4>

00000864 <.Loc.8>:
 864:	07 fc       	sbrc	r0, 7

00000866 <.Loc.9>:
 866:	05 d0       	rcall	.+10     	; 0x872 <__divmodhi4_neg2>

00000868 <.Loc.10>:
 868:	3e f4       	brtc	.+14     	; 0x878 <__divmodhi4_exit>

0000086a <__divmodhi4_neg1>:
 86a:	90 95       	com	r25

0000086c <.Loc.12>:
 86c:	81 95       	neg	r24

0000086e <.Loc.13>:
 86e:	9f 4f       	sbci	r25, 0xFF	; 255

00000870 <.Loc.14>:
 870:	08 95       	ret

00000872 <__divmodhi4_neg2>:
 872:	70 95       	com	r23

00000874 <.Loc.16>:
 874:	61 95       	neg	r22

00000876 <.Loc.17>:
 876:	7f 4f       	sbci	r23, 0xFF	; 255

00000878 <__divmodhi4_exit>:
 878:	08 95       	ret

0000087a <__udivmodsi4>:
 87a:	a1 e2       	ldi	r26, 0x21	; 33

0000087c <.Loc.1>:
 87c:	1a 2e       	mov	r1, r26

0000087e <.Loc.2>:
 87e:	aa 1b       	sub	r26, r26

00000880 <.Loc.3>:
 880:	bb 1b       	sub	r27, r27

00000882 <.Loc.4>:
 882:	fd 01       	movw	r30, r26

00000884 <.Loc.5>:
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <__udivmodsi4_ep>

00000886 <__udivmodsi4_loop>:
 886:	aa 1f       	adc	r26, r26

00000888 <.Loc.7>:
 888:	bb 1f       	adc	r27, r27

0000088a <.Loc.8>:
 88a:	ee 1f       	adc	r30, r30

0000088c <.Loc.9>:
 88c:	ff 1f       	adc	r31, r31

0000088e <.Loc.10>:
 88e:	a2 17       	cp	r26, r18

00000890 <.Loc.11>:
 890:	b3 07       	cpc	r27, r19

00000892 <.Loc.12>:
 892:	e4 07       	cpc	r30, r20

00000894 <.Loc.13>:
 894:	f5 07       	cpc	r31, r21

00000896 <.Loc.14>:
 896:	20 f0       	brcs	.+8      	; 0x8a0 <__udivmodsi4_ep>

00000898 <.Loc.15>:
 898:	a2 1b       	sub	r26, r18

0000089a <.Loc.16>:
 89a:	b3 0b       	sbc	r27, r19

0000089c <.Loc.17>:
 89c:	e4 0b       	sbc	r30, r20

0000089e <.Loc.18>:
 89e:	f5 0b       	sbc	r31, r21

000008a0 <__udivmodsi4_ep>:
 8a0:	66 1f       	adc	r22, r22

000008a2 <.Loc.20>:
 8a2:	77 1f       	adc	r23, r23

000008a4 <.Loc.21>:
 8a4:	88 1f       	adc	r24, r24

000008a6 <.Loc.22>:
 8a6:	99 1f       	adc	r25, r25

000008a8 <.Loc.23>:
 8a8:	1a 94       	dec	r1

000008aa <.Loc.24>:
 8aa:	69 f7       	brne	.-38     	; 0x886 <__udivmodsi4_loop>

000008ac <.Loc.25>:
 8ac:	60 95       	com	r22

000008ae <.Loc.26>:
 8ae:	70 95       	com	r23

000008b0 <.Loc.27>:
 8b0:	80 95       	com	r24

000008b2 <.Loc.28>:
 8b2:	90 95       	com	r25

000008b4 <.Loc.29>:
 8b4:	9b 01       	movw	r18, r22

000008b6 <.Loc.30>:
 8b6:	ac 01       	movw	r20, r24

000008b8 <.Loc.31>:
 8b8:	bd 01       	movw	r22, r26

000008ba <.Loc.32>:
 8ba:	cf 01       	movw	r24, r30

000008bc <.Loc.33>:
 8bc:	08 95       	ret

000008be <__udivmodhi4>:
 8be:	aa 1b       	sub	r26, r26

000008c0 <.Loc.1>:
 8c0:	bb 1b       	sub	r27, r27

000008c2 <.Loc.2>:
 8c2:	51 e1       	ldi	r21, 0x11	; 17

000008c4 <.Loc.3>:
 8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <__udivmodhi4_ep>

000008c6 <__udivmodhi4_loop>:
 8c6:	aa 1f       	adc	r26, r26

000008c8 <.Loc.5>:
 8c8:	bb 1f       	adc	r27, r27

000008ca <.Loc.6>:
 8ca:	a6 17       	cp	r26, r22

000008cc <.Loc.7>:
 8cc:	b7 07       	cpc	r27, r23

000008ce <.Loc.8>:
 8ce:	10 f0       	brcs	.+4      	; 0x8d4 <__udivmodhi4_ep>

000008d0 <.Loc.9>:
 8d0:	a6 1b       	sub	r26, r22

000008d2 <.Loc.10>:
 8d2:	b7 0b       	sbc	r27, r23

000008d4 <__udivmodhi4_ep>:
 8d4:	88 1f       	adc	r24, r24

000008d6 <.Loc.12>:
 8d6:	99 1f       	adc	r25, r25

000008d8 <.Loc.13>:
 8d8:	5a 95       	dec	r21

000008da <.Loc.14>:
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__udivmodhi4_loop>

000008dc <.Loc.15>:
 8dc:	80 95       	com	r24

000008de <.Loc.16>:
 8de:	90 95       	com	r25

000008e0 <.Loc.17>:
 8e0:	bc 01       	movw	r22, r24

000008e2 <.Loc.18>:
 8e2:	cd 01       	movw	r24, r26

000008e4 <.Loc.19>:
 8e4:	08 95       	ret

000008e6 <__itoa_ncheck>:
 8e6:	bb 27       	eor	r27, r27
 8e8:	4a 30       	cpi	r20, 0x0A	; 10
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <.L1^B1>
 8ec:	99 23       	and	r25, r25
 8ee:	22 f4       	brpl	.+8      	; 0x8f8 <.L1^B1>
 8f0:	bd e2       	ldi	r27, 0x2D	; 45
 8f2:	90 95       	com	r25
 8f4:	81 95       	neg	r24
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255

000008f8 <.L1^B1>:
 8f8:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__utoa_common>

000008fc <__utoa_ncheck>:
 8fc:	bb 27       	eor	r27, r27

000008fe <__utoa_common>:
 8fe:	fb 01       	movw	r30, r22
 900:	55 27       	eor	r21, r21

00000902 <.L1^B1>:
 902:	aa 27       	eor	r26, r26

00000904 <.L2^B1>:
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	aa 1f       	adc	r26, r26
 90a:	a4 17       	cp	r26, r20
 90c:	10 f0       	brcs	.+4      	; 0x912 <.L3^B1>
 90e:	a4 1b       	sub	r26, r20
 910:	83 95       	inc	r24

00000912 <.L3^B1>:
 912:	50 51       	subi	r21, 0x10	; 16
 914:	b9 f7       	brne	.-18     	; 0x904 <.L2^B1>
 916:	a0 5d       	subi	r26, 0xD0	; 208
 918:	aa 33       	cpi	r26, 0x3A	; 58
 91a:	08 f0       	brcs	.+2      	; 0x91e <.L4^B1>
 91c:	a9 5d       	subi	r26, 0xD9	; 217

0000091e <.L4^B1>:
 91e:	a1 93       	st	Z+, r26
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	79 f7       	brne	.-34     	; 0x902 <.L1^B1>
 924:	b1 11       	cpse	r27, r1
 926:	b1 93       	st	Z+, r27
 928:	11 92       	st	Z+, r1
 92a:	cb 01       	movw	r24, r22
 92c:	0c 94 98 04 	jmp	0x930	; 0x930 <strrev>

00000930 <strrev>:
 930:	dc 01       	movw	r26, r24
 932:	fc 01       	movw	r30, r24

00000934 <.L1^B1>:
 934:	67 2f       	mov	r22, r23
 936:	71 91       	ld	r23, Z+
 938:	77 23       	and	r23, r23
 93a:	e1 f7       	brne	.-8      	; 0x934 <.L1^B1>
 93c:	32 97       	sbiw	r30, 0x02	; 2
 93e:	04 c0       	rjmp	.+8      	; 0x948 <.L3^B1>

00000940 <.L2^B1>:
 940:	7c 91       	ld	r23, X
 942:	6d 93       	st	X+, r22
 944:	70 83       	st	Z, r23
 946:	62 91       	ld	r22, -Z

00000948 <.L3^B1>:
 948:	ae 17       	cp	r26, r30
 94a:	bf 07       	cpc	r27, r31
 94c:	c8 f3       	brcs	.-14     	; 0x940 <.L2^B1>
 94e:	08 95       	ret

00000950 <_exit>:
 950:	f8 94       	cli

00000952 <__stop_program>:
 952:	ff cf       	rjmp	.-2      	; 0x952 <__stop_program>
