
bin\Debug\identificatieModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000846  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000846  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800222  00800222  0000091c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001b8  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001eeb  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000012c3  00000000  00000000  00002a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001504  00000000  00000000  00003cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000003b0  00000000  00000000  000051e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007cb  00000000  00000000  00005594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000212  00000000  00000000  00005d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000398  00000000  00000000  00005f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000059  00000000  00000000  00006309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e6 e4       	ldi	r30, 0x46	; 70

000000fc <.Loc.4>:
  fc:	f8 e0       	ldi	r31, 0x08	; 8

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	ac 32       	cpi	r26, 0x2C	; 44

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
 122:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initDonkInterrupt>:
#define PORT_IR PORTD
#define PIN_IR  PIND
#define IR      PD1 //pin 30

void initDonkInterrupt(void){
    DDR_IR &= ~(1<<IR);
 12a:	51 98       	cbi	0x0a, 1	; 10

0000012c <.Loc.3>:
    PORT_IR |= (1<<IR);
 12c:	59 9a       	sbi	0x0b, 1	; 11

0000012e <.Loc.5>:

    EIMSK |= (1<<INT1);       //ENABLE HARDWARE INTERRUPT ON PD1
 12e:	e9 9a       	sbi	0x1d, 1	; 29

00000130 <.Loc.7>:
    EICRA |= (0<<ISC11) | (1<<ISC10);    //FALLING edge of INTn generates asynchronously an interrupt request
 130:	e9 e6       	ldi	r30, 0x69	; 105
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z

00000136 <.Loc.8>:
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 83       	st	Z, r24

0000013a <.Loc.9>:
}
 13a:	08 95       	ret

0000013c <ISR>:

unsigned int aantalGedectecteerd = 0;

ISR(INT1_vect){
    aantalGedectecteerd++;
 13c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <aantalGedectecteerd>
 140:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <aantalGedectecteerd+0x1>

00000144 <.Loc.13>:
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <aantalGedectecteerd+0x1>
 14a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <aantalGedectecteerd>

0000014e <.Loc.14>:
}
 14e:	08 95       	ret

00000150 <volgendeOpdracht>:

void volgendeOpdracht(){
    unsigned int opdracht = 0;
    if(opdracht==0){
        opdracht ++;
        sendCommand();  //navigeer, detecteer, identificeer
 150:	0e 94 4b 03 	call	0x696	; 0x696 <sendCommand>

00000154 <.LBB3>:
    }
    if(opdracht==1){
        opdracht++;     //bocht ...om
        sendCommand();
 154:	0e 94 4b 03 	call	0x696	; 0x696 <sendCommand>

00000158 <.LBE3>:
    }
}
 158:	08 95       	ret

0000015a <main>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "main.h"

int main(void){
    sei();
 15a:	78 94       	sei

0000015c <.Loc.2>:
    initUsart();
 15c:	0e 94 37 03 	call	0x66e	; 0x66e <initUsart>

00000160 <.LVL0>:
    flushUsart2Buffer();
 160:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <flushUsart2Buffer>

00000164 <.LVL1>:
    initDonkInterrupt();
 164:	0e 94 95 00 	call	0x12a	; 0x12a <initDonkInterrupt>

00000168 <.LVL2>:
    display_init();
 168:	0e 94 17 02 	call	0x42e	; 0x42e <display_init>

0000016c <.LVL3>:


    int bitch = 0;
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0

00000170 <.L2>:
    while(1){
        display_number(bitch);
 170:	ce 01       	movw	r24, r28
 172:	0e 94 cf 01 	call	0x39e	; 0x39e <display_number>

00000176 <.LVL5>:
        bitch++;
 176:	21 96       	adiw	r28, 0x01	; 1

00000178 <.LBB4>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	89 e6       	ldi	r24, 0x69	; 105
 17c:	98 e1       	ldi	r25, 0x18	; 24

0000017e <.L1^B1>:
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <.L1^B1>
 186:	00 c0       	rjmp	.+0      	; 0x188 <L0^A>

00000188 <L0^A>:
 188:	00 00       	nop
 18a:	f2 cf       	rjmp	.-28     	; 0x170 <.L2>

0000018c <initAdc>:
#define pulseWidth 85
#define threshold 364   // Drempelwaarde om metaal te detecteren (zelf testen!)364 voor touw spoel met 100 micro seconde
#define nMeas 40

void initAdc(void){
    ADMUX = (0<<REFS1) | (1<<REFS0);
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

00000192 <.Loc.3>:
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<ADPS0);
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 83       	st	Z, r24

0000019a <.Loc.5>:
    ADCSRA |= (1<<ADEN);
 19a:	80 81       	ld	r24, Z

0000019c <.Loc.6>:
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	80 83       	st	Z, r24

000001a0 <.Loc.7>:
}
 1a0:	08 95       	ret

000001a2 <initMetaalDetector>:

void initMetaalDetector(void) {
    //configure pins als output
    DDR_pin_pulse |= (1<<pin_pulse);
 1a2:	81 9a       	sbi	0x10, 1	; 16

000001a4 <.Loc.11>:
    DDR_LED |= (1<<LED);
 1a4:	82 9a       	sbi	0x10, 2	; 16

000001a6 <.Loc.13>:
    initAdc();
 1a6:	0e 94 c6 00 	call	0x18c	; 0x18c <initAdc>

000001aa <.LVL0>:
}
 1aa:	08 95       	ret

000001ac <detectMetaal>:

int detectMetaal(void) {
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29

000001b8 <.Loc.16>:
    ADCSRA |= (1<<ADSC);    //ADC start conversion [ALS DE ADC NIET WERKT KNAL DEZE LINE VOOR DAT JE HET STORED IN DE VARIABELE]
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z

000001be <.Loc.17>:
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	80 83       	st	Z, r24

000001c2 <.Loc.18>:
 1c2:	a8 e2       	ldi	r26, 0x28	; 40
 1c4:	b0 e0       	ldi	r27, 0x00	; 0

000001c6 <.Loc.23>:
    long unsigned int sum = 0;
 1c6:	c1 2c       	mov	r12, r1
 1c8:	d1 2c       	mov	r13, r1
 1ca:	76 01       	movw	r14, r12

000001cc <.Loc.24>:

    //40 keer meten (meer = stabieler)
    for (int i=0; i< nMeas; i++) {
        // Condensator ontladen
        DDR_pin_cap |= (1<<DDR_pin_cap); //output
 1cc:	e1 e0       	ldi	r30, 0x01	; 1
 1ce:	f0 e0       	ldi	r31, 0x00	; 0

000001d0 <.Loc.25>:
            PORT_pin_pulse |= (1<<DDR_pin_cap); //pin hoog
            _delay_ms(pulseWidth);
        }

    // Meet de spanning
    int val = ADC;  // Leest tussen 0 en 1023
 1d0:	c8 e7       	ldi	r28, 0x78	; 120
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <.L5>

000001d6 <.L11>:
 1d6:	48 81       	ld	r20, Y
 1d8:	59 81       	ldd	r21, Y+1	; 0x01

000001da <.Loc.28>:
    sum += val;
 1da:	05 2e       	mov	r0, r21
 1dc:	00 0c       	add	r0, r0
 1de:	66 0b       	sbc	r22, r22
 1e0:	77 0b       	sbc	r23, r23

000001e2 <.Loc.30>:
 1e2:	c4 0e       	add	r12, r20
 1e4:	d5 1e       	adc	r13, r21
 1e6:	e6 1e       	adc	r14, r22
 1e8:	f7 1e       	adc	r15, r23

000001ea <.Loc.31>:
    for (int i=0; i< nMeas; i++) {
 1ea:	11 97       	sbiw	r26, 0x01	; 1

000001ec <.Loc.34>:
 1ec:	10 97       	sbiw	r26, 0x00	; 0
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <.L5>

000001f0 <L0^A>:
 1f0:	5b c0       	rjmp	.+182    	; 0x2a8 <.L10>

000001f2 <.L5>:
        DDR_pin_cap |= (1<<DDR_pin_cap); //output
 1f2:	20 b3       	in	r18, 0x10	; 16

000001f4 <.Loc.37>:
 1f4:	80 b3       	in	r24, 0x10	; 16

000001f6 <.Loc.38>:
 1f6:	af 01       	movw	r20, r30
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <.L2^B1>

000001fa <.L1^B1>:
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21

000001fe <.L2^B1>:
 1fe:	2a 95       	dec	r18
 200:	e2 f7       	brpl	.-8      	; 0x1fa <.L1^B1>

00000202 <.Loc.39>:
 202:	84 2b       	or	r24, r20
 204:	80 bb       	out	0x10, r24	; 16

00000206 <.Loc.40>:
        PORT_pin_cap |= (1<<DDR_pin_cap); //pin low
 206:	20 b3       	in	r18, 0x10	; 16

00000208 <.Loc.42>:
 208:	81 b3       	in	r24, 0x11	; 17

0000020a <.Loc.43>:
 20a:	bf 01       	movw	r22, r30
 20c:	02 c0       	rjmp	.+4      	; 0x212 <.L2^B2>

0000020e <.L1^B2>:
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23

00000212 <.L2^B2>:
 212:	2a 95       	dec	r18
 214:	e2 f7       	brpl	.-8      	; 0x20e <.L1^B2>

00000216 <.Loc.44>:
 216:	86 2b       	or	r24, r22
 218:	81 bb       	out	0x11, r24	; 17

0000021a <.LBB13>:
 21a:	7f ef       	ldi	r23, 0xFF	; 255
 21c:	89 ef       	ldi	r24, 0xF9	; 249
 21e:	90 e0       	ldi	r25, 0x00	; 0

00000220 <.L1^B3>:
 220:	71 50       	subi	r23, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <.L1^B3>
 228:	00 c0       	rjmp	.+0      	; 0x22a <L0^A>

0000022a <L0^A>:
	...

0000022c <.LBE13>:
        DDR_pin_cap &= ~(1<<DDR_pin_cap); //input
 22c:	80 b3       	in	r24, 0x10	; 16

0000022e <.Loc.56>:
 22e:	20 b3       	in	r18, 0x10	; 16

00000230 <.Loc.57>:
 230:	af 01       	movw	r20, r30
 232:	02 c0       	rjmp	.+4      	; 0x238 <.L2^B3>

00000234 <.L1^B4>:
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21

00000238 <.L2^B3>:
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <.L1^B4>
 23c:	ca 01       	movw	r24, r20

0000023e <.Loc.58>:
 23e:	80 95       	com	r24
 240:	90 95       	com	r25

00000242 <.Loc.59>:
 242:	82 23       	and	r24, r18
 244:	80 bb       	out	0x10, r24	; 16

00000246 <.Loc.60>:
 246:	48 e0       	ldi	r20, 0x08	; 8
 248:	50 e0       	ldi	r21, 0x00	; 0

0000024a <.L4>:
            PORT_pin_pulse &= ~(1<<DDR_pin_cap); //pin hoog
 24a:	80 b3       	in	r24, 0x10	; 16

0000024c <.Loc.66>:
 24c:	21 b3       	in	r18, 0x11	; 17

0000024e <.Loc.67>:
 24e:	bf 01       	movw	r22, r30
 250:	02 c0       	rjmp	.+4      	; 0x256 <.L2^B4>

00000252 <.L1^B5>:
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23

00000256 <.L2^B4>:
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <.L1^B5>
 25a:	cb 01       	movw	r24, r22

0000025c <.Loc.68>:
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25

00000260 <.Loc.69>:
 260:	82 23       	and	r24, r18
 262:	81 bb       	out	0x11, r24	; 17

00000264 <.LBB16>:
 264:	7f e7       	ldi	r23, 0x7F	; 127
 266:	86 e2       	ldi	r24, 0x26	; 38
 268:	94 e0       	ldi	r25, 0x04	; 4

0000026a <.L1^B6>:
 26a:	71 50       	subi	r23, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <.L1^B6>
 272:	00 c0       	rjmp	.+0      	; 0x274 <L0^A>

00000274 <L0^A>:
	...

00000276 <.LBE16>:
            PORT_pin_pulse |= (1<<DDR_pin_cap); //pin hoog
 276:	20 b3       	in	r18, 0x10	; 16

00000278 <.Loc.81>:
 278:	81 b3       	in	r24, 0x11	; 17

0000027a <.Loc.82>:
 27a:	bf 01       	movw	r22, r30
 27c:	02 c0       	rjmp	.+4      	; 0x282 <.L2^B5>

0000027e <.L1^B7>:
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23

00000282 <.L2^B5>:
 282:	2a 95       	dec	r18
 284:	e2 f7       	brpl	.-8      	; 0x27e <.L1^B7>

00000286 <.Loc.83>:
 286:	86 2b       	or	r24, r22
 288:	81 bb       	out	0x11, r24	; 17

0000028a <.LBB18>:
 28a:	7f e7       	ldi	r23, 0x7F	; 127
 28c:	86 e2       	ldi	r24, 0x26	; 38
 28e:	94 e0       	ldi	r25, 0x04	; 4

00000290 <.L1^B8>:
 290:	71 50       	subi	r23, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <.L1^B8>
 298:	00 c0       	rjmp	.+0      	; 0x29a <L0^A>

0000029a <L0^A>:
	...

0000029c <.LBE18>:
        for (int j = 0; j < 8; j++) {//aantal pulsen per meting
 29c:	41 50       	subi	r20, 0x01	; 1
 29e:	51 09       	sbc	r21, r1

000002a0 <.Loc.95>:
 2a0:	41 15       	cp	r20, r1
 2a2:	51 05       	cpc	r21, r1
 2a4:	91 f6       	brne	.-92     	; 0x24a <.L4>
 2a6:	97 cf       	rjmp	.-210    	; 0x1d6 <.L11>

000002a8 <.L10>:
    }

    // Gemiddelde berekenen
    int avg = sum / nMeas;//rekenen sturen
 2a8:	c7 01       	movw	r24, r14
 2aa:	b6 01       	movw	r22, r12
 2ac:	28 e2       	ldi	r18, 0x28	; 40
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__udivmodsi4>

000002b8 <.Loc.100>:
    //Serial.print("Gemiddelde waarde: ");
    //Serial.print(avg);

    // Metaaldetectie
    if (avg < threshold) {//rekenen sturen
 2b8:	2c 36       	cpi	r18, 0x6C	; 108
 2ba:	31 40       	sbci	r19, 0x01	; 1
 2bc:	54 f4       	brge	.+20     	; 0x2d2 <.L6>

000002be <.Loc.101>:
        //Serial.println(" --> METAAL GEDETECTEERD!");
        PORT_LED &= ~(1<<LED); //led aan
 2be:	8a 98       	cbi	0x11, 2	; 17

000002c0 <.Loc.103>:
    return 1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0

000002c4 <.L3>:
    else {
        //Serial.println(" --> Geen metaal.");
        PORT_LED |= (1<<LED); //led uit
    return 0;
  }
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12

000002d0 <.Loc.106>:
 2d0:	08 95       	ret

000002d2 <.L6>:
        PORT_LED |= (1<<LED); //led uit
 2d2:	8a 9a       	sbi	0x11, 2	; 17

000002d4 <.Loc.109>:
    return 0;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	f5 cf       	rjmp	.-22     	; 0x2c4 <.L3>

000002da <initNoodstop>:
#define PIN_knop PINA
#define PORT_knop PORTA


void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 2da:	50 98       	cbi	0x0a, 0	; 10

000002dc <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 2dc:	58 9a       	sbi	0x0b, 0	; 11

000002de <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 2de:	e8 9a       	sbi	0x1d, 0	; 29

000002e0 <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 2e0:	e9 e6       	ldi	r30, 0x69	; 105
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z

000002e6 <.Loc.8>:
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	80 83       	st	Z, r24

000002ea <.Loc.9>:
    sei();
 2ea:	78 94       	sei

000002ec <.Loc.10>:
}
 2ec:	08 95       	ret

000002ee <__vector_1>:
        if(!(PIN_knop&(1<<start))){
            //uitvoer();
            break;
        }
    }*/
}
 2ee:	18 95       	reti

000002f0 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 2f0:	ea e0       	ldi	r30, 0x0A	; 10
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	80 81       	ld	r24, Z

000002f6 <.Loc.2>:
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	80 83       	st	Z, r24

000002fa <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 2fa:	eb e0       	ldi	r30, 0x0B	; 11
 2fc:	f1 e0       	ldi	r31, 0x01	; 1
 2fe:	80 81       	ld	r24, Z

00000300 <.Loc.4>:
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24

00000304 <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 304:	80 81       	ld	r24, Z

00000306 <.Loc.6>:
 306:	80 62       	ori	r24, 0x20	; 32
 308:	80 83       	st	Z, r24

0000030a <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 30a:	80 81       	ld	r24, Z
 30c:	8f 77       	andi	r24, 0x7F	; 127
 30e:	80 83       	st	Z, r24

00000310 <.Loc.9>:
}
 310:	08 95       	ret

00000312 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 312:	ea e0       	ldi	r30, 0x0A	; 10
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	80 81       	ld	r24, Z

00000318 <.Loc.12>:
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	80 83       	st	Z, r24

0000031c <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 31c:	eb e0       	ldi	r30, 0x0B	; 11
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	80 81       	ld	r24, Z
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	80 83       	st	Z, r24

00000326 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 326:	80 81       	ld	r24, Z

00000328 <.Loc.16>:
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	80 83       	st	Z, r24

0000032c <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 32c:	80 81       	ld	r24, Z

0000032e <.Loc.18>:
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	80 83       	st	Z, r24

00000332 <.Loc.19>:
}
 332:	08 95       	ret

00000334 <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 334:	ea e0       	ldi	r30, 0x0A	; 10
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	90 81       	ld	r25, Z

0000033a <.Loc.22>:
 33a:	90 68       	ori	r25, 0x80	; 128
 33c:	90 83       	st	Z, r25

0000033e <.Loc.23>:
 33e:	28 e0       	ldi	r18, 0x08	; 8
 340:	30 e0       	ldi	r19, 0x00	; 0

00000342 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 342:	eb e0       	ldi	r30, 0x0B	; 11
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	0c c0       	rjmp	.+24     	; 0x360 <.L6>

00000348 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 348:	90 81       	ld	r25, Z
 34a:	9f 77       	andi	r25, 0x7F	; 127
 34c:	90 83       	st	Z, r25

0000034e <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 34e:	90 81       	ld	r25, Z

00000350 <.Loc.31>:
 350:	90 62       	ori	r25, 0x20	; 32
 352:	90 83       	st	Z, r25

00000354 <.Loc.32>:
        data >>= 1;
 354:	86 95       	lsr	r24

00000356 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 356:	21 50       	subi	r18, 0x01	; 1
 358:	31 09       	sbc	r19, r1

0000035a <.Loc.36>:
 35a:	21 15       	cp	r18, r1
 35c:	31 05       	cpc	r19, r1
 35e:	49 f0       	breq	.+18     	; 0x372 <.L8>

00000360 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 360:	90 81       	ld	r25, Z
 362:	9f 7d       	andi	r25, 0xDF	; 223
 364:	90 83       	st	Z, r25

00000366 <.Loc.39>:
        if(data & 0x01){
 366:	80 ff       	sbrs	r24, 0
 368:	ef cf       	rjmp	.-34     	; 0x348 <.L4>

0000036a <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 36a:	90 81       	ld	r25, Z

0000036c <.Loc.42>:
 36c:	90 68       	ori	r25, 0x80	; 128
 36e:	90 83       	st	Z, r25
 370:	ee cf       	rjmp	.-36     	; 0x34e <.L5>

00000372 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 372:	eb e0       	ldi	r30, 0x0B	; 11
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	80 81       	ld	r24, Z

00000378 <.Loc.46>:
 378:	8f 7d       	andi	r24, 0xDF	; 223
 37a:	80 83       	st	Z, r24

0000037c <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 37c:	80 81       	ld	r24, Z

0000037e <.Loc.48>:
 37e:	80 62       	ori	r24, 0x20	; 32
 380:	80 83       	st	Z, r24

00000382 <.Loc.49>:
}
 382:	08 95       	ret

00000384 <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24

00000388 <.Loc.52>:
    display_start();
 388:	0e 94 78 01 	call	0x2f0	; 0x2f0 <display_start>

0000038c <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 38c:	8c 2f       	mov	r24, r28
 38e:	87 70       	andi	r24, 0x07	; 7
 390:	88 68       	ori	r24, 0x88	; 136
 392:	0e 94 9a 01 	call	0x334	; 0x334 <display_sendbyte>

00000396 <.LVL9>:
    display_stop();
 396:	0e 94 89 01 	call	0x312	; 0x312 <display_stop>

0000039a <.LVL10>:
}
 39a:	cf 91       	pop	r28

0000039c <.Loc.56>:
 39c:	08 95       	ret

0000039e <display_number>:

// Display 4 digit integer
void display_number(int number){
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	d8 2f       	mov	r29, r24
 3aa:	c9 2f       	mov	r28, r25

000003ac <.Loc.59>:
    display_start();
 3ac:	0e 94 78 01 	call	0x2f0	; 0x2f0 <display_start>

000003b0 <.LVL13>:
    display_sendbyte(0x40);
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	0e 94 9a 01 	call	0x334	; 0x334 <display_sendbyte>

000003b6 <.LVL14>:
    display_stop();
 3b6:	0e 94 89 01 	call	0x312	; 0x312 <display_stop>

000003ba <.LVL15>:
 3ba:	13 ec       	ldi	r17, 0xC3	; 195

000003bc <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 3bc:	0f 2e       	mov	r0, r31
 3be:	fa e0       	ldi	r31, 0x0A	; 10
 3c0:	ef 2e       	mov	r14, r31
 3c2:	f1 2c       	mov	r15, r1
 3c4:	f0 2d       	mov	r31, r0

000003c6 <.L11>:
        display_start();
 3c6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <display_start>

000003ca <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 3ca:	81 2f       	mov	r24, r17
 3cc:	0e 94 9a 01 	call	0x334	; 0x334 <display_sendbyte>

000003d0 <.LVL18>:
        display_sendbyte(digits[number%10]);
 3d0:	8d 2f       	mov	r24, r29
 3d2:	9c 2f       	mov	r25, r28
 3d4:	b7 01       	movw	r22, r14
 3d6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__divmodhi4>
 3da:	d6 2f       	mov	r29, r22

000003dc <.Loc.71>:
 3dc:	c7 2f       	mov	r28, r23

000003de <.Loc.72>:
 3de:	fc 01       	movw	r30, r24
 3e0:	ec 5e       	subi	r30, 0xEC	; 236
 3e2:	fd 4f       	sbci	r31, 0xFD	; 253

000003e4 <.Loc.73>:
 3e4:	80 81       	ld	r24, Z
 3e6:	0e 94 9a 01 	call	0x334	; 0x334 <display_sendbyte>

000003ea <.LVL20>:
        number /= 10;
        display_stop();
 3ea:	0e 94 89 01 	call	0x312	; 0x312 <display_stop>

000003ee <.LVL21>:
    for (int i = 0; i < 4; i++) {
 3ee:	11 50       	subi	r17, 0x01	; 1
 3f0:	1f 3b       	cpi	r17, 0xBF	; 191
 3f2:	49 f7       	brne	.-46     	; 0x3c6 <.L11>

000003f4 <.Loc.78>:
    }
}
 3f4:	df 91       	pop	r29

000003f6 <.Loc.79>:
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	08 95       	ret

00000400 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	c8 2f       	mov	r28, r24
 408:	d9 2f       	mov	r29, r25
 40a:	16 2f       	mov	r17, r22

0000040c <.Loc.82>:
    display_start();
 40c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <display_start>

00000410 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 410:	80 ec       	ldi	r24, 0xC0	; 192
 412:	81 0f       	add	r24, r17
 414:	0e 94 9a 01 	call	0x334	; 0x334 <display_sendbyte>

00000418 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 418:	c0 50       	subi	r28, 0x00	; 0
 41a:	de 4f       	sbci	r29, 0xFE	; 254

0000041c <.Loc.86>:
 41c:	88 81       	ld	r24, Y
 41e:	0e 94 9a 01 	call	0x334	; 0x334 <display_sendbyte>

00000422 <.LVL26>:
    display_stop();
 422:	0e 94 89 01 	call	0x312	; 0x312 <display_stop>

00000426 <.LVL27>:
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17

0000042c <.Loc.89>:
 42c:	08 95       	ret

0000042e <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 42e:	ea e0       	ldi	r30, 0x0A	; 10
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	80 81       	ld	r24, Z

00000434 <.Loc.92>:
 434:	80 68       	ori	r24, 0x80	; 128
 436:	80 83       	st	Z, r24

00000438 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 438:	80 81       	ld	r24, Z

0000043a <.Loc.94>:
 43a:	80 62       	ori	r24, 0x20	; 32
 43c:	80 83       	st	Z, r24

0000043e <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 43e:	eb e0       	ldi	r30, 0x0B	; 11
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	80 81       	ld	r24, Z

00000444 <.Loc.96>:
 444:	80 68       	ori	r24, 0x80	; 128
 446:	80 83       	st	Z, r24

00000448 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 448:	80 81       	ld	r24, Z

0000044a <.Loc.98>:
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	80 83       	st	Z, r24

0000044e <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	0e 94 c2 01 	call	0x384	; 0x384 <display_brightness>

00000454 <.LVL29>:
}
 454:	08 95       	ret

00000456 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	83 e1       	ldi	r24, 0x13	; 19
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000460 <.LVL30>:
    display_letter(3, 1);
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000046a <.LVL31>:
    display_letter(6, 2);
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000474 <.LVL32>:
    display_letter(7, 3);
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	87 e0       	ldi	r24, 0x07	; 7
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000047e <.LVL33>:
}
 47e:	08 95       	ret

00000480 <display_fol>:

void display_fol(void){
    display_letter(19, 0);
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	83 e1       	ldi	r24, 0x13	; 19
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000048a <.LVL34>:
    display_letter(6, 1);
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000494 <.LVL35>:
    display_letter(13, 2);
 494:	62 e0       	ldi	r22, 0x02	; 2
 496:	8d e0       	ldi	r24, 0x0D	; 13
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000049e <.LVL36>:
    display_letter(11, 3);
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	8b e0       	ldi	r24, 0x0B	; 11
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004a8 <.LVL37>:
}
 4a8:	08 95       	ret

000004aa <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	83 e1       	ldi	r24, 0x13	; 19
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004b4 <.LVL38>:
    display_letter(3, 1);
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004be <.LVL39>:
    display_letter(12, 2);
 4be:	62 e0       	ldi	r22, 0x02	; 2
 4c0:	8c e0       	ldi	r24, 0x0C	; 12
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004c8 <.LVL40>:
    display_letter(17, 3);
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	81 e1       	ldi	r24, 0x11	; 17
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004d2 <.LVL41>:
}
 4d2:	08 95       	ret

000004d4 <display_turn>:

void display_turn(void){
    display_letter(17, 0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	81 e1       	ldi	r24, 0x11	; 17
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004de <.LVL42>:
    display_letter(18, 1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	82 e1       	ldi	r24, 0x12	; 18
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004e8 <.LVL43>:
    display_letter(15, 2);
 4e8:	62 e0       	ldi	r22, 0x02	; 2
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004f2 <.LVL44>:
    display_letter(12, 3);
 4f2:	63 e0       	ldi	r22, 0x03	; 3
 4f4:	8c e0       	ldi	r24, 0x0C	; 12
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000004fc <.LVL45>:
}
 4fc:	08 95       	ret

000004fe <display_dist>:

void display_dist(void){
    display_letter(4, 0);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000508 <.LVL46>:
    display_letter(9, 1);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	89 e0       	ldi	r24, 0x09	; 9
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000512 <.LVL47>:
    display_letter(16, 2);
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000051c <.LVL48>:
    display_letter(17, 3);
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	81 e1       	ldi	r24, 0x11	; 17
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000526 <.LVL49>:
}
 526:	08 95       	ret

00000528 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	83 e1       	ldi	r24, 0x13	; 19
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000532 <.LVL50>:
    display_letter(14, 1);
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	8e e0       	ldi	r24, 0x0E	; 14
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000053c <.LVL51>:
    display_letter(1, 2);
 53c:	62 e0       	ldi	r22, 0x02	; 2
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000546 <.LVL52>:
    display_letter(3, 3);
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000550 <.LVL53>:
}
 550:	08 95       	ret

00000552 <display_mode>:
    if(mode){
 552:	88 23       	and	r24, r24
 554:	19 f0       	breq	.+6      	; 0x55c <.L22>

00000556 <.Loc.140>:
        display_fol();
 556:	0e 94 40 02 	call	0x480	; 0x480 <display_fol>

0000055a <.LVL55>:
 55a:	08 95       	ret

0000055c <.L22>:
        display_pac();
 55c:	0e 94 94 02 	call	0x528	; 0x528 <display_pac>

00000560 <.LVL57>:
}
 560:	08 95       	ret

00000562 <display_left>:

void display_left(void){
    display_letter(11, 0);
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	8b e0       	ldi	r24, 0x0B	; 11
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000056c <.LVL58>:
    display_letter(5, 1);
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000576 <.LVL59>:
    display_letter(6, 2);
 576:	62 e0       	ldi	r22, 0x02	; 2
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000580 <.LVL60>:
    display_letter(17, 3);
 580:	63 e0       	ldi	r22, 0x03	; 3
 582:	81 e1       	ldi	r24, 0x11	; 17
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000058a <.LVL61>:
}
 58a:	08 95       	ret

0000058c <display_rght>:

void display_rght(void){
    display_letter(15, 0);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	8f e0       	ldi	r24, 0x0F	; 15
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000596 <.LVL62>:
    display_letter(7, 1);
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	87 e0       	ldi	r24, 0x07	; 7
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005a0 <.LVL63>:
    display_letter(8, 2);
 5a0:	62 e0       	ldi	r22, 0x02	; 2
 5a2:	88 e0       	ldi	r24, 0x08	; 8
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005aa <.LVL64>:
    display_letter(17, 3);
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	81 e1       	ldi	r24, 0x11	; 17
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005b4 <.LVL65>:
}
 5b4:	08 95       	ret

000005b6 <display_direction>:
    if(dir){
 5b6:	88 23       	and	r24, r24
 5b8:	19 f0       	breq	.+6      	; 0x5c0 <.L27>

000005ba <.Loc.159>:
        display_rght();
 5ba:	0e 94 c6 02 	call	0x58c	; 0x58c <display_rght>

000005be <.LVL67>:
 5be:	08 95       	ret

000005c0 <.L27>:
        display_left();
 5c0:	0e 94 b1 02 	call	0x562	; 0x562 <display_left>

000005c4 <.LVL69>:
}
 5c4:	08 95       	ret

000005c6 <display_go>:

void display_go(void){
    display_letter(19, 0);
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	83 e1       	ldi	r24, 0x13	; 19
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005d0 <.LVL70>:
    display_letter(19, 1);
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	83 e1       	ldi	r24, 0x13	; 19
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005da <.LVL71>:
    display_letter(7, 2);
 5da:	62 e0       	ldi	r22, 0x02	; 2
 5dc:	87 e0       	ldi	r24, 0x07	; 7
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005e4 <.LVL72>:
    display_letter(13, 3);
 5e4:	63 e0       	ldi	r22, 0x03	; 3
 5e6:	8d e0       	ldi	r24, 0x0D	; 13
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005ee <.LVL73>:
}
 5ee:	08 95       	ret

000005f0 <display_end>:

void display_end(void){
    display_letter(19, 0);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	83 e1       	ldi	r24, 0x13	; 19
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

000005fa <.LVL74>:
    display_letter(5, 1);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	85 e0       	ldi	r24, 0x05	; 5
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000604 <.LVL75>:
    display_letter(12, 2);
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	8c e0       	ldi	r24, 0x0C	; 12
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000060e <.LVL76>:
    display_letter(4, 3);
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	84 e0       	ldi	r24, 0x04	; 4
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000618 <.LVL77>:
}
 618:	08 95       	ret

0000061a <display_srch>:

void display_srch(void){
    display_letter(16, 0);
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	80 e1       	ldi	r24, 0x10	; 16
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000624 <.LVL78>:
    display_letter(15, 1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	8f e0       	ldi	r24, 0x0F	; 15
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000062e <.LVL79>:
    display_letter(3, 2);
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000638 <.LVL80>:
    display_letter(8, 3);
 638:	63 e0       	ldi	r22, 0x03	; 3
 63a:	88 e0       	ldi	r24, 0x08	; 8
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000642 <.LVL81>:
}
 642:	08 95       	ret

00000644 <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	80 e1       	ldi	r24, 0x10	; 16
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000064e <.LVL82>:
    display_letter(17, 1);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	81 e1       	ldi	r24, 0x11	; 17
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000658 <.LVL83>:
    display_letter(13, 2);
 658:	62 e0       	ldi	r22, 0x02	; 2
 65a:	8d e0       	ldi	r24, 0x0D	; 13
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

00000662 <.LVL84>:
    display_letter(14, 3);
 662:	63 e0       	ldi	r22, 0x03	; 3
 664:	8e e0       	ldi	r24, 0x0E	; 14
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 00 02 	call	0x400	; 0x400 <display_letter>

0000066c <.LVL85>:
}
 66c:	08 95       	ret

0000066e <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 66e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

00000672 <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 672:	87 e6       	ldi	r24, 0x67	; 103
 674:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

00000678 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 678:	88 e9       	ldi	r24, 0x98	; 152
 67a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

0000067e <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 67e:	86 e0       	ldi	r24, 0x06	; 6
 680:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

00000684 <.Loc.9>:
}
 684:	08 95       	ret

00000686 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 686:	e8 ec       	ldi	r30, 0xC8	; 200
 688:	f0 e0       	ldi	r31, 0x00	; 0

0000068a <.L3>:
 68a:	90 81       	ld	r25, Z
 68c:	95 ff       	sbrs	r25, 5
 68e:	fd cf       	rjmp	.-6      	; 0x68a <.L3>

00000690 <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 690:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000694 <.Loc.17>:
}
 694:	08 95       	ret

00000696 <sendCommand>:

void sendCommand(int command, int parameter, int snelheid, int acceleratie){
 696:	ef 92       	push	r14
 698:	ff 92       	push	r15
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <L0^A>

000006a4 <L0^A>:
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <L0^A>

000006a6 <L0^A>:
 6a6:	0f 92       	push	r0
 6a8:	0f 92       	push	r0
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62

000006ae <.Loc.20>:
    int serialschrijven[4] = {command, parameter, snelheid, acceleratie}; // array serieel schrijven 0,1,2,3 (4 hex totaal)
 6ae:	9a 83       	std	Y+2, r25	; 0x02
 6b0:	89 83       	std	Y+1, r24	; 0x01
 6b2:	7c 83       	std	Y+4, r23	; 0x04
 6b4:	6b 83       	std	Y+3, r22	; 0x03
 6b6:	5e 83       	std	Y+6, r21	; 0x06
 6b8:	4d 83       	std	Y+5, r20	; 0x05
 6ba:	38 87       	std	Y+8, r19	; 0x08
 6bc:	2f 83       	std	Y+7, r18	; 0x07

000006be <.LBB2>:
    for(int i = 0; i<4; i++){
 6be:	8e 01       	movw	r16, r28
 6c0:	0f 5f       	subi	r16, 0xFF	; 255
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	7e 01       	movw	r14, r28
 6c6:	89 e0       	ldi	r24, 0x09	; 9
 6c8:	e8 0e       	add	r14, r24
 6ca:	f1 1c       	adc	r15, r1

000006cc <.L6>:
        sendByte(serialschrijven[i]);
 6cc:	f8 01       	movw	r30, r16
 6ce:	81 91       	ld	r24, Z+
 6d0:	91 91       	ld	r25, Z+
 6d2:	8f 01       	movw	r16, r30
 6d4:	0e 94 43 03 	call	0x686	; 0x686 <sendByte>

000006d8 <.LVL4>:
    for(int i = 0; i<4; i++){
 6d8:	0e 15       	cp	r16, r14
 6da:	1f 05       	cpc	r17, r15
 6dc:	b9 f7       	brne	.-18     	; 0x6cc <.L6>

000006de <.LBE2>:
    }
}
 6de:	28 96       	adiw	r28, 0x08	; 8
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	f8 94       	cli
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	cd bf       	out	0x3d, r28	; 61
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	ff 90       	pop	r15
 6f4:	ef 90       	pop	r14
 6f6:	08 95       	ret

000006f8 <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 6f8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 6fc:	88 23       	and	r24, r24
 6fe:	44 f4       	brge	.+16     	; 0x710 <.L8>

00000700 <.Loc.33>:
        dummy = UDR1; // Read and discard
 700:	ae ec       	ldi	r26, 0xCE	; 206
 702:	b0 e0       	ldi	r27, 0x00	; 0

00000704 <.Loc.34>:
    while (UCSR1A & (1 << RXC1)) {
 704:	e8 ec       	ldi	r30, 0xC8	; 200
 706:	f0 e0       	ldi	r31, 0x00	; 0

00000708 <.L10>:
        dummy = UDR1; // Read and discard
 708:	8c 91       	ld	r24, X

0000070a <.Loc.37>:
    while (UCSR1A & (1 << RXC1)) {
 70a:	80 81       	ld	r24, Z
 70c:	88 23       	and	r24, r24
 70e:	e4 f3       	brlt	.-8      	; 0x708 <.L10>

00000710 <.L8>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 710:	08 95       	ret

00000712 <receiveByte>:

int receiveByte() { //ontvangen van 1 hex getal
    while ( !(UCSR1A & (1<<RXC1))); //Wait for data to be received
 712:	e8 ec       	ldi	r30, 0xC8	; 200
 714:	f0 e0       	ldi	r31, 0x00	; 0

00000716 <.L13>:
 716:	80 81       	ld	r24, Z

00000718 <.Loc.44>:
 718:	88 23       	and	r24, r24
 71a:	ec f7       	brge	.-6      	; 0x716 <.L13>

0000071c <.Loc.45>:
    return UDR1;
 71c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000720 <.Loc.47>:
}
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	08 95       	ret

00000724 <receiveCommand>:

unsigned int serialOntvangen[4];

void receiveCommand(){
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29

0000072c <.LBB3>:
    for(int i = 0; i<4; i++){
 72c:	c4 e2       	ldi	r28, 0x24	; 36
 72e:	d2 e0       	ldi	r29, 0x02	; 2
 730:	0c e2       	ldi	r16, 0x2C	; 44
 732:	12 e0       	ldi	r17, 0x02	; 2

00000734 <.L16>:
        serialOntvangen[i] = receiveByte();
 734:	0e 94 89 03 	call	0x712	; 0x712 <receiveByte>

00000738 <.LVL7>:
 738:	89 93       	st	Y+, r24
 73a:	99 93       	st	Y+, r25

0000073c <.Loc.55>:
    for(int i = 0; i<4; i++){
 73c:	c0 17       	cp	r28, r16
 73e:	d1 07       	cpc	r29, r17
 740:	c9 f7       	brne	.-14     	; 0x734 <.L16>

00000742 <.LBE3>:
    }
}
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	08 95       	ret

0000074c <__vector_36>:

ISR(USART1_RX_vect){
 74c:	1f 92       	push	r1
 74e:	0f 92       	push	r0
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	0b b6       	in	r0, 0x3b	; 59
 758:	0f 92       	push	r0
 75a:	2f 93       	push	r18
 75c:	3f 93       	push	r19
 75e:	4f 93       	push	r20
 760:	5f 93       	push	r21
 762:	6f 93       	push	r22
 764:	7f 93       	push	r23
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
 76a:	af 93       	push	r26
 76c:	bf 93       	push	r27
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31

00000772 <.Loc.59>:
    receiveCommand();
 772:	0e 94 92 03 	call	0x724	; 0x724 <receiveCommand>

00000776 <.LVL8>:
    if(serialOntvangen[0]==0x01){
 776:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <serialOntvangen>
 77a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <serialOntvangen+0x1>
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	99 f0       	breq	.+38     	; 0x7a8 <.L20>

00000782 <.L18>:
        volgendeOpdracht();
    }
}
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0b be       	out	0x3b, r0	; 59
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <.L20>:
        volgendeOpdracht();
 7a8:	0e 94 a8 00 	call	0x150	; 0x150 <volgendeOpdracht>

000007ac <.LVL9>:
}
 7ac:	ea cf       	rjmp	.-44     	; 0x782 <.L18>

000007ae <__divmodhi4>:
 7ae:	97 fb       	bst	r25, 7

000007b0 <.Loc.1>:
 7b0:	07 2e       	mov	r0, r23

000007b2 <.Loc.2>:
 7b2:	16 f4       	brtc	.+4      	; 0x7b8 <.L^B1>

000007b4 <.Loc.3>:
 7b4:	00 94       	com	r0

000007b6 <.Loc.4>:
 7b6:	07 d0       	rcall	.+14     	; 0x7c6 <__divmodhi4_neg1>

000007b8 <.L^B1>:
 7b8:	77 fd       	sbrc	r23, 7

000007ba <.Loc.6>:
 7ba:	09 d0       	rcall	.+18     	; 0x7ce <__divmodhi4_neg2>

000007bc <.Loc.7>:
 7bc:	0e 94 0d 04 	call	0x81a	; 0x81a <__udivmodhi4>

000007c0 <.Loc.8>:
 7c0:	07 fc       	sbrc	r0, 7

000007c2 <.Loc.9>:
 7c2:	05 d0       	rcall	.+10     	; 0x7ce <__divmodhi4_neg2>

000007c4 <.Loc.10>:
 7c4:	3e f4       	brtc	.+14     	; 0x7d4 <__divmodhi4_exit>

000007c6 <__divmodhi4_neg1>:
 7c6:	90 95       	com	r25

000007c8 <.Loc.12>:
 7c8:	81 95       	neg	r24

000007ca <.Loc.13>:
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255

000007cc <.Loc.14>:
 7cc:	08 95       	ret

000007ce <__divmodhi4_neg2>:
 7ce:	70 95       	com	r23

000007d0 <.Loc.16>:
 7d0:	61 95       	neg	r22

000007d2 <.Loc.17>:
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255

000007d4 <__divmodhi4_exit>:
 7d4:	08 95       	ret

000007d6 <__udivmodsi4>:
 7d6:	a1 e2       	ldi	r26, 0x21	; 33

000007d8 <.Loc.1>:
 7d8:	1a 2e       	mov	r1, r26

000007da <.Loc.2>:
 7da:	aa 1b       	sub	r26, r26

000007dc <.Loc.3>:
 7dc:	bb 1b       	sub	r27, r27

000007de <.Loc.4>:
 7de:	fd 01       	movw	r30, r26

000007e0 <.Loc.5>:
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <__udivmodsi4_ep>

000007e2 <__udivmodsi4_loop>:
 7e2:	aa 1f       	adc	r26, r26

000007e4 <.Loc.7>:
 7e4:	bb 1f       	adc	r27, r27

000007e6 <.Loc.8>:
 7e6:	ee 1f       	adc	r30, r30

000007e8 <.Loc.9>:
 7e8:	ff 1f       	adc	r31, r31

000007ea <.Loc.10>:
 7ea:	a2 17       	cp	r26, r18

000007ec <.Loc.11>:
 7ec:	b3 07       	cpc	r27, r19

000007ee <.Loc.12>:
 7ee:	e4 07       	cpc	r30, r20

000007f0 <.Loc.13>:
 7f0:	f5 07       	cpc	r31, r21

000007f2 <.Loc.14>:
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <__udivmodsi4_ep>

000007f4 <.Loc.15>:
 7f4:	a2 1b       	sub	r26, r18

000007f6 <.Loc.16>:
 7f6:	b3 0b       	sbc	r27, r19

000007f8 <.Loc.17>:
 7f8:	e4 0b       	sbc	r30, r20

000007fa <.Loc.18>:
 7fa:	f5 0b       	sbc	r31, r21

000007fc <__udivmodsi4_ep>:
 7fc:	66 1f       	adc	r22, r22

000007fe <.Loc.20>:
 7fe:	77 1f       	adc	r23, r23

00000800 <.Loc.21>:
 800:	88 1f       	adc	r24, r24

00000802 <.Loc.22>:
 802:	99 1f       	adc	r25, r25

00000804 <.Loc.23>:
 804:	1a 94       	dec	r1

00000806 <.Loc.24>:
 806:	69 f7       	brne	.-38     	; 0x7e2 <__udivmodsi4_loop>

00000808 <.Loc.25>:
 808:	60 95       	com	r22

0000080a <.Loc.26>:
 80a:	70 95       	com	r23

0000080c <.Loc.27>:
 80c:	80 95       	com	r24

0000080e <.Loc.28>:
 80e:	90 95       	com	r25

00000810 <.Loc.29>:
 810:	9b 01       	movw	r18, r22

00000812 <.Loc.30>:
 812:	ac 01       	movw	r20, r24

00000814 <.Loc.31>:
 814:	bd 01       	movw	r22, r26

00000816 <.Loc.32>:
 816:	cf 01       	movw	r24, r30

00000818 <.Loc.33>:
 818:	08 95       	ret

0000081a <__udivmodhi4>:
 81a:	aa 1b       	sub	r26, r26

0000081c <.Loc.1>:
 81c:	bb 1b       	sub	r27, r27

0000081e <.Loc.2>:
 81e:	51 e1       	ldi	r21, 0x11	; 17

00000820 <.Loc.3>:
 820:	07 c0       	rjmp	.+14     	; 0x830 <__udivmodhi4_ep>

00000822 <__udivmodhi4_loop>:
 822:	aa 1f       	adc	r26, r26

00000824 <.Loc.5>:
 824:	bb 1f       	adc	r27, r27

00000826 <.Loc.6>:
 826:	a6 17       	cp	r26, r22

00000828 <.Loc.7>:
 828:	b7 07       	cpc	r27, r23

0000082a <.Loc.8>:
 82a:	10 f0       	brcs	.+4      	; 0x830 <__udivmodhi4_ep>

0000082c <.Loc.9>:
 82c:	a6 1b       	sub	r26, r22

0000082e <.Loc.10>:
 82e:	b7 0b       	sbc	r27, r23

00000830 <__udivmodhi4_ep>:
 830:	88 1f       	adc	r24, r24

00000832 <.Loc.12>:
 832:	99 1f       	adc	r25, r25

00000834 <.Loc.13>:
 834:	5a 95       	dec	r21

00000836 <.Loc.14>:
 836:	a9 f7       	brne	.-22     	; 0x822 <__udivmodhi4_loop>

00000838 <.Loc.15>:
 838:	80 95       	com	r24

0000083a <.Loc.16>:
 83a:	90 95       	com	r25

0000083c <.Loc.17>:
 83c:	bc 01       	movw	r22, r24

0000083e <.Loc.18>:
 83e:	cd 01       	movw	r24, r26

00000840 <.Loc.19>:
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
