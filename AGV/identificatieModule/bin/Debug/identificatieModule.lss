
bin\Debug\identificatieModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  0000096e  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800256  00800256  00000a78  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001b8  00000000  00000000  00000ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000201b  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000153a  00000000  00000000  00002ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001afd  00000000  00000000  000041dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000324  00000000  00000000  00005cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007a0  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000237  00000000  00000000  000067a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000005f2  00000000  00000000  000069d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000006d  00000000  00000000  00006fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ee e6       	ldi	r30, 0x6E	; 110

000000fc <.Loc.4>:
  fc:	f9 e0       	ldi	r31, 0x09	; 9

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a6 35       	cpi	r26, 0x56	; 86

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a6 e5       	ldi	r26, 0x56	; 86

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a0 36       	cpi	r26, 0x60	; 96

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
 122:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initDonkInterrupt>:
#define PIN_IR  PINE
#define IR_R     PE4
#define IR_L     PE5

void initDonkInterrupt(void){
    DDR_IR &= ~(1<<IR_R);
 12a:	6c 98       	cbi	0x0d, 4	; 13

0000012c <.Loc.3>:
    PORT_IR |= (1<<IR_R);
 12c:	74 9a       	sbi	0x0e, 4	; 14

0000012e <.Loc.5>:

    DDR_IR &= ~(1<<IR_L);
 12e:	6d 98       	cbi	0x0d, 5	; 13

00000130 <.Loc.7>:
    PORT_IR |= (1<<IR_L);
 130:	75 9a       	sbi	0x0e, 5	; 14

00000132 <.Loc.9>:
}
 132:	08 95       	ret

00000134 <irDetect>:

 int aantalGedectecteerd = -2;

int irDetect(void){
    static int buttonstate1 = 0;
        if((PIN_IR & (1<<IR_R))){
 134:	64 9b       	sbis	0x0c, 4	; 12
 136:	36 c0       	rjmp	.+108    	; 0x1a4 <.L3>

00000138 <.Loc.14>:
            if(buttonstate1 ==0){
 138:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <buttonstate1.1>
 13c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <buttonstate1.1+0x1>
 140:	89 2b       	or	r24, r25
 142:	49 f0       	breq	.+18     	; 0x156 <.L10>

00000144 <.L4>:
            return 0;
            }
        }

        static int buttonstate2 = 0;
        if((PIN_IR & (1<<IR_L))){
 144:	65 9b       	sbis	0x0c, 5	; 12
 146:	68 c0       	rjmp	.+208    	; 0x218 <.L7>

00000148 <.Loc.19>:
            if(buttonstate2 ==0){
 148:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonstate2.0>
 14c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <buttonstate2.0+0x1>
 150:	89 2b       	or	r24, r25
 152:	d9 f1       	breq	.+118    	; 0x1ca <.L11>

00000154 <.L8>:
            buttonstate2 = 0;
            _delay_ms(10);
            return 0;
            }
        }
}
 154:	08 95       	ret

00000156 <.L10>:
                aantalGedectecteerd++;
 156:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 15a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 164:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>

00000168 <.Loc.24>:
                if(detectMetaalLinks()==1){
 168:	0e 94 62 02 	call	0x4c4	; 0x4c4 <detectMetaalLinks>

0000016c <.LVL0>:
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	79 f0       	breq	.+30     	; 0x18e <.L12>

00000170 <.L5>:
                buttonstate1 = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <buttonstate1.1+0x1>
 178:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <buttonstate1.1>

0000017c <.LBB10>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9c e9       	ldi	r25, 0x9C	; 156

00000180 <.L1^B1>:
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <.L1^B1>
 184:	00 c0       	rjmp	.+0      	; 0x186 <L0^A>

00000186 <L0^A>:
	...

00000188 <.LBE10>:
                return 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret

0000018e <.L12>:
                    aantalGedectecteerd+=100;
 18e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 192:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 196:	8c 59       	subi	r24, 0x9C	; 156
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 19e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>
 1a2:	e6 cf       	rjmp	.-52     	; 0x170 <.L5>

000001a4 <.L3>:
            if(buttonstate1 == 1){
 1a4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <buttonstate1.1>
 1a8:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <buttonstate1.1+0x1>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	51 f6       	brne	.-108    	; 0x144 <.L4>

000001b0 <.Loc.44>:
            buttonstate1 = 0;
 1b0:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <buttonstate1.1+0x1>
 1b4:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <buttonstate1.1>

000001b8 <.LBB12>:
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9c e9       	ldi	r25, 0x9C	; 156

000001bc <.L1^B2>:
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <.L1^B2>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <L0^A>

000001c2 <L0^A>:
	...

000001c4 <.LBE12>:
            return 0;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret

000001ca <.L11>:
                aantalGedectecteerd++;
 1ca:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 1ce:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 1d8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>

000001dc <.Loc.59>:
                if(detectMetaalRechts()==1){
 1dc:	0e 94 c9 01 	call	0x392	; 0x392 <detectMetaalRechts>

000001e0 <.LVL5>:
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	79 f0       	breq	.+30     	; 0x202 <.L13>

000001e4 <.L9>:
                buttonstate2 = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <buttonstate2.0+0x1>
 1ec:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <buttonstate2.0>

000001f0 <.LBB14>:
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156

000001f4 <.L1^B3>:
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <.L1^B3>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <L0^A>

000001fa <L0^A>:
	...

000001fc <.LBE14>:
                return 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret

00000202 <.L13>:
                    aantalGedectecteerd+=100;
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 206:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 20a:	8c 59       	subi	r24, 0x9C	; 156
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <aantalGedectecteerd+0x1>
 212:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <aantalGedectecteerd>
 216:	e6 cf       	rjmp	.-52     	; 0x1e4 <.L9>

00000218 <.L7>:
            if(buttonstate2 == 1){
 218:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonstate2.0>
 21c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <buttonstate2.0+0x1>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	09 f0       	breq	.+2      	; 0x226 <.Loc.79>

00000224 <L0^A>:
 224:	97 cf       	rjmp	.-210    	; 0x154 <.L8>

00000226 <.Loc.79>:
            buttonstate2 = 0;
 226:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <buttonstate2.0+0x1>
 22a:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <buttonstate2.0>

0000022e <.LBB16>:
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156

00000232 <.L1^B4>:
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <.L1^B4>
 236:	00 c0       	rjmp	.+0      	; 0x238 <L0^A>

00000238 <L0^A>:
	...

0000023a <.LBE16>:
            return 0;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	08 95       	ret

00000240 <volgendeOpdracht>:
#include <avr/io.h>
#include <util/delay.h>

void volgendeOpdracht(){
    static unsigned int opdracht = 0;
    if(opdracht==0){
 240:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <opdracht.0>
 244:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <opdracht.0+0x1>
 248:	89 2b       	or	r24, r25
 24a:	09 f0       	breq	.+2      	; 0x24e <.Loc.4>

0000024c <L0^A>:
 24c:	42 c0       	rjmp	.+132    	; 0x2d2 <.L2>

0000024e <.Loc.4>:
        opdracht ++;            //om te onthouden welke opdracht al geweest is
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <opdracht.0+0x1>
 256:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <opdracht.0>

0000025a <.Loc.6>:
        while(stopRequest!=1){
 25a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <stopRequest>
 25e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <stopRequest+0x1>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	b9 f4       	brne	.+46     	; 0x294 <.L5>

00000266 <.L3>:
            }
            display_number(aantalGedectecteerd);
        }
    }
    if(opdracht==1){
        opdracht++;     //bocht rechtsom
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <opdracht.0+0x1>
 26e:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <opdracht.0>

00000272 <.Loc.10>:
        sendByte(0xB1);
 272:	81 eb       	ldi	r24, 0xB1	; 177
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 04 04 	call	0x808	; 0x808 <sendByte>

0000027a <.LVL0>:
 27a:	31 c0       	rjmp	.+98     	; 0x2de <.L6>

0000027c <.L4>:
            display_number(aantalGedectecteerd);
 27c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <aantalGedectecteerd>
 280:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aantalGedectecteerd+0x1>
 284:	0e 94 87 03 	call	0x70e	; 0x70e <display_number>

00000288 <.LVL1>:
        while(stopRequest!=1){
 288:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <stopRequest>
 28c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <stopRequest+0x1>
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f9 f0       	breq	.+62     	; 0x2d2 <.L2>

00000294 <.L5>:
            sendByte(0x01);  //navigeer, detecteer, identificeer
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 04 04 	call	0x808	; 0x808 <sendByte>

0000029c <.LVL2>:
            if(irDetect()==0){  //als de agv iets detecteerd stop 1 seconde
 29c:	0e 94 9a 00 	call	0x134	; 0x134 <irDetect>

000002a0 <.LVL3>:
 2a0:	89 2b       	or	r24, r25
 2a2:	61 f7       	brne	.-40     	; 0x27c <.L4>

000002a4 <.LBB6>:
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	83 ed       	ldi	r24, 0xD3	; 211
 2a8:	90 e3       	ldi	r25, 0x30	; 48

000002aa <.L1^B1>:
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <.L1^B1>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <L0^A>

000002b4 <L0^A>:
	...

000002b6 <.LBE6>:
                    sendByte(0xFF);  //stop agv
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 04 04 	call	0x808	; 0x808 <sendByte>

000002be <.LBB8>:
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	83 ed       	ldi	r24, 0xD3	; 211
 2c2:	90 e3       	ldi	r25, 0x30	; 48

000002c4 <.L1^B2>:
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <.L1^B2>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <L0^A>

000002ce <L0^A>:
	...

000002d0 <.Loc.35>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 2d0:	d5 cf       	rjmp	.-86     	; 0x27c <.L4>

000002d2 <.L2>:
    if(opdracht==1){
 2d2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <opdracht.0>
 2d6:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <opdracht.0+0x1>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	21 f2       	breq	.-120    	; 0x266 <.L3>

000002de <.L6>:
    }
    if(opdracht==2){
 2de:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <opdracht.0>
 2e2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <opdracht.0+0x1>
 2e6:	02 97       	sbiw	r24, 0x02	; 2
 2e8:	09 f0       	breq	.+2      	; 0x2ec <.L9>

000002ea <.L1>:
        sendByte(0xFF);
    }
}
 2ea:	08 95       	ret

000002ec <.L9>:
        sendByte(0xFF);
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 04 04 	call	0x808	; 0x808 <sendByte>

000002f4 <.LVL8>:
}
 2f4:	fa cf       	rjmp	.-12     	; 0x2ea <.L1>

000002f6 <main>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "main.h"

int main(void){
    sei();
 2f6:	78 94       	sei

000002f8 <.Loc.2>:
    initNoodstop();
 2f8:	0e 94 ef 02 	call	0x5de	; 0x5de <initNoodstop>

000002fc <.LVL0>:
    initUsart();
 2fc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <initUsart>

00000300 <.LVL1>:
    flushUsart2Buffer();
 300:	0e 94 0c 04 	call	0x818	; 0x818 <flushUsart2Buffer>

00000304 <.LVL2>:
    initDonkInterrupt();
 304:	0e 94 95 00 	call	0x12a	; 0x12a <initDonkInterrupt>

00000308 <.LVL3>:
    display_init();
 308:	0e 94 cf 03 	call	0x79e	; 0x79e <display_init>

0000030c <.LVL4>:
    initStartKnop();
 30c:	0e 94 2d 03 	call	0x65a	; 0x65a <initStartKnop>

00000310 <.LVL5>:
 310:	0a c0       	rjmp	.+20     	; 0x326 <.L3>

00000312 <.L4>:
	__builtin_avr_delay_cycles(__ticks_dc);
 312:	8f e3       	ldi	r24, 0x3F	; 63
 314:	9c e9       	ldi	r25, 0x9C	; 156

00000316 <.L1^B1>:
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <.L1^B1>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <L0^A>

0000031c <L0^A>:
	...

0000031e <.LBE4>:

    while(1){
        display_number(0000);
        if(!(PINA&(1<<PA6))){          //START CONDITION (start knop is pressed
            _delay_ms(10);
            volgendeOpdracht();
 31e:	0e 94 20 01 	call	0x240	; 0x240 <volgendeOpdracht>

00000322 <.L2>:
        }
        irDetect();
 322:	0e 94 9a 00 	call	0x134	; 0x134 <irDetect>

00000326 <.L3>:
        display_number(0000);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 87 03 	call	0x70e	; 0x70e <display_number>

0000032e <.LVL10>:
        if(!(PINA&(1<<PA6))){          //START CONDITION (start knop is pressed
 32e:	06 9b       	sbis	0x00, 6	; 0
 330:	f0 cf       	rjmp	.-32     	; 0x312 <.L4>
 332:	f7 cf       	rjmp	.-18     	; 0x322 <.L2>

00000334 <initSerialCom>:
#include <util/delay.h>

///serial com for debugging
void initSerialCom(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr >> 8);
 334:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

00000338 <.Loc.3>:
    UBRR0L = (unsigned char)ubrr;
 338:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

0000033c <.Loc.5>:

    // Enable transmitter
    UCSR0B = (1 << TXEN0);
 33c:	88 e0       	ldi	r24, 0x08	; 8

0000033e <.Loc.7>:
 33e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

00000342 <.Loc.8>:

    // Set frame format: 8data, 1stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

00000348 <.Loc.10>:
}
 348:	08 95       	ret

0000034a <SerialComTransmit>:

void SerialComTransmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)));
 34a:	e0 ec       	ldi	r30, 0xC0	; 192
 34c:	f0 e0       	ldi	r31, 0x00	; 0

0000034e <.L3>:
 34e:	90 81       	ld	r25, Z

00000350 <.Loc.16>:
 350:	95 ff       	sbrs	r25, 5
 352:	fd cf       	rjmp	.-6      	; 0x34e <.L3>

00000354 <.Loc.17>:
    // Put data into buffer, sends the data
    UDR0 = data;
 354:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

00000358 <.Loc.19>:
}
 358:	08 95       	ret

0000035a <Serialprint>:

void Serialprint(const char *s) {
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	c8 2f       	mov	r28, r24
 360:	d9 2f       	mov	r29, r25

00000362 <.Loc.22>:
    while (*s) {
 362:	88 81       	ld	r24, Y
 364:	88 23       	and	r24, r24
 366:	31 f0       	breq	.+12     	; 0x374 <.L5>
 368:	21 96       	adiw	r28, 0x01	; 1

0000036a <.L7>:
        SerialComTransmit(*s++);
 36a:	0e 94 a5 01 	call	0x34a	; 0x34a <SerialComTransmit>

0000036e <.LVL6>:
    while (*s) {
 36e:	89 91       	ld	r24, Y+

00000370 <.Loc.27>:
 370:	81 11       	cpse	r24, r1
 372:	fb cf       	rjmp	.-10     	; 0x36a <.L7>

00000374 <.L5>:
    }
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <initMetaalDetectorRechts>:
#define nMeas 40

///metaal detector Rechts
void initMetaalDetectorRechts(void) {
    //configure pins als output
    DDRPulseRechts |= (1<<pinPulseRechts);
 37a:	81 9a       	sbi	0x10, 1	; 16

0000037c <.Loc.32>:
}
 37c:	08 95       	ret

0000037e <initAdcRechts>:

void initAdcRechts(void){
    ADMUX = (0<<REFS1) | (1<<REFS0) | (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

00000384 <.Loc.36>:
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<ADPS0);
 384:	ea e7       	ldi	r30, 0x7A	; 122
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	80 83       	st	Z, r24

0000038c <.Loc.38>:
    ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC enable, prescaler 128
 38c:	87 e8       	ldi	r24, 0x87	; 135
 38e:	80 83       	st	Z, r24

00000390 <.Loc.40>:
}
 390:	08 95       	ret

00000392 <detectMetaalRechts>:

int detectMetaalRechts(void) {
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <L0^A>

000003a0 <L0^A>:
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <L0^A>

000003a2 <L0^A>:
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <L0^A>

000003a4 <L0^A>:
 3a4:	0f 92       	push	r0
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62

000003aa <.Loc.42>:
    initSerialCom(MYUBRR);
 3aa:	87 e6       	ldi	r24, 0x67	; 103
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 9a 01 	call	0x334	; 0x334 <initSerialCom>

000003b2 <.LVL9>:
    initMetaalDetectorRechts();
 3b2:	0e 94 bd 01 	call	0x37a	; 0x37a <initMetaalDetectorRechts>

000003b6 <.LVL10>:
    initAdcRechts();
 3b6:	0e 94 bf 01 	call	0x37e	; 0x37e <initAdcRechts>

000003ba <.LVL11>:
 3ba:	28 e2       	ldi	r18, 0x28	; 40
 3bc:	30 e0       	ldi	r19, 0x00	; 0

000003be <.Loc.50>:
    long unsigned int sum = 0;
 3be:	c1 2c       	mov	r12, r1
 3c0:	d1 2c       	mov	r13, r1
 3c2:	76 01       	movw	r14, r12

000003c4 <.Loc.51>:
            PORTPulseRechts &= ~(1<<pinPulseRechts); //pin low
            _delay_us(pulseWidth);
        }

    // Meet de spanning
    ADCSRA |= (1<<ADSC);    //start adc
 3c4:	ea e7       	ldi	r30, 0x7A	; 122
 3c6:	f0 e0       	ldi	r31, 0x00	; 0

000003c8 <.Loc.52>:
    while (ADCSRA & (1<<ADSC)); // wait until done
    int val = ADC;  // Leest tussen 0 en 1023
 3c8:	48 e7       	ldi	r20, 0x78	; 120
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	16 c0       	rjmp	.+44     	; 0x3fa <.L14>

000003ce <.L21>:
    ADCSRA |= (1<<ADSC);    //start adc
 3ce:	80 81       	ld	r24, Z

000003d0 <.Loc.54>:
 3d0:	80 64       	ori	r24, 0x40	; 64
 3d2:	80 83       	st	Z, r24

000003d4 <.L13>:
    while (ADCSRA & (1<<ADSC)); // wait until done
 3d4:	80 81       	ld	r24, Z
 3d6:	86 fd       	sbrc	r24, 6
 3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <.L13>

000003da <.Loc.57>:
    int val = ADC;  // Leest tussen 0 en 1023
 3da:	da 01       	movw	r26, r20
 3dc:	8d 91       	ld	r24, X+
 3de:	9c 91       	ld	r25, X

000003e0 <.Loc.59>:
    sum += val;
 3e0:	09 2e       	mov	r0, r25
 3e2:	00 0c       	add	r0, r0
 3e4:	aa 0b       	sbc	r26, r26
 3e6:	bb 0b       	sbc	r27, r27

000003e8 <.Loc.61>:
 3e8:	c8 0e       	add	r12, r24
 3ea:	d9 1e       	adc	r13, r25
 3ec:	ea 1e       	adc	r14, r26
 3ee:	fb 1e       	adc	r15, r27

000003f0 <.Loc.62>:
    for (int i=0; i< nMeas; i++) {
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	31 09       	sbc	r19, r1

000003f4 <.Loc.65>:
 3f4:	21 15       	cp	r18, r1
 3f6:	31 05       	cpc	r19, r1
 3f8:	e9 f0       	breq	.+58     	; 0x434 <.L20>

000003fa <.L14>:
        DDRCapRechts |= (1<<pinCapRechts); //output
 3fa:	80 9a       	sbi	0x10, 0	; 16

000003fc <.Loc.68>:
        PORTCapRechts &= ~(1<<pinCapRechts); //pin low
 3fc:	88 98       	cbi	0x11, 0	; 17

000003fe <.LBB30>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	8f ec       	ldi	r24, 0xCF	; 207
 400:	97 e0       	ldi	r25, 0x07	; 7

00000402 <.L1^B1>:
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <.L1^B1>
 406:	00 c0       	rjmp	.+0      	; 0x408 <L0^A>

00000408 <L0^A>:
	...

0000040a <.LBE30>:
        DDRCapRechts &= ~(1<<pinCapRechts); //input
 40a:	80 98       	cbi	0x10, 0	; 16

0000040c <.Loc.81>:
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	90 e0       	ldi	r25, 0x00	; 0

00000410 <.L12>:
            PORTPulseRechts |= (1<<pinPulseRechts); //pin hoog
 410:	89 9a       	sbi	0x11, 1	; 17

00000412 <.LBB33>:
 412:	a3 e5       	ldi	r26, 0x53	; 83
 414:	b1 e0       	ldi	r27, 0x01	; 1

00000416 <.L1^B2>:
 416:	11 97       	sbiw	r26, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <.L1^B2>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <L0^A>

0000041c <L0^A>:
	...

0000041e <.LBE33>:
            PORTPulseRechts &= ~(1<<pinPulseRechts); //pin low
 41e:	89 98       	cbi	0x11, 1	; 17

00000420 <.LBB35>:
 420:	a3 e5       	ldi	r26, 0x53	; 83
 422:	b1 e0       	ldi	r27, 0x01	; 1

00000424 <.L1^B3>:
 424:	11 97       	sbiw	r26, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <.L1^B3>
 428:	00 c0       	rjmp	.+0      	; 0x42a <L0^A>

0000042a <L0^A>:
	...

0000042c <.LBE35>:
        for (int j = 0; j < 8; j++) {//aantal pulsen per meting
 42c:	01 97       	sbiw	r24, 0x01	; 1

0000042e <.Loc.109>:
 42e:	00 97       	sbiw	r24, 0x00	; 0
 430:	79 f7       	brne	.-34     	; 0x410 <.L12>
 432:	cd cf       	rjmp	.-102    	; 0x3ce <.L21>

00000434 <.L20>:
    }

    // Gemiddelde berekenen
    int avg = sum / nMeas;//rekenen sturen
 434:	c7 01       	movw	r24, r14
 436:	b6 01       	movw	r22, r12
 438:	28 e2       	ldi	r18, 0x28	; 40
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0

00000440 <.Loc.113>:
 440:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodsi4>
 444:	da 01       	movw	r26, r20
 446:	c9 01       	movw	r24, r18

00000448 <.Loc.114>:
 448:	79 01       	movw	r14, r18

0000044a <.LBB40>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 44a:	4a e0       	ldi	r20, 0x0A	; 10
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	0e 94 80 04 	call	0x900	; 0x900 <__itoa_ncheck>

00000456 <.LBE40>:
                    //voor serial debugging
                    char buffer[10];  // enough space for an int

                    itoa(avg, buffer, 10);  // convert int to decimal string

                    Serialprint("Average: ");
 456:	83 e2       	ldi	r24, 0x23	; 35
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

0000045e <.LVL32>:
                    Serialprint(buffer);
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

00000466 <.LVL33>:
                    Serialprint("\r\n");     // newline
 466:	83 e5       	ldi	r24, 0x53	; 83
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

0000046e <.LVL34>:

    // Metaaldetectie
    if (avg > thresholdRechts) {//rekenen sturen
 46e:	b8 ee       	ldi	r27, 0xE8	; 232
 470:	eb 16       	cp	r14, r27
 472:	b3 e0       	ldi	r27, 0x03	; 3
 474:	fb 06       	cpc	r15, r27
 476:	9c f0       	brlt	.+38     	; 0x49e <.L15>

00000478 <.Loc.129>:
        Serialprint("geen metaal Links\r\n");
 478:	8d e2       	ldi	r24, 0x2D	; 45
 47a:	92 e0       	ldi	r25, 0x02	; 2
 47c:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

00000480 <.LVL35>:
        return 0;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0

00000484 <.L11>:
    }
    else {
        Serialprint("metaal Links\r\n");
        return 1;
  }
}
 484:	2a 96       	adiw	r28, 0x0a	; 10
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12

0000049c <.Loc.133>:
 49c:	08 95       	ret

0000049e <.L15>:
        Serialprint("metaal Links\r\n");
 49e:	82 e3       	ldi	r24, 0x32	; 50
 4a0:	92 e0       	ldi	r25, 0x02	; 2
 4a2:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

000004a6 <.LVL38>:
        return 1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	ec cf       	rjmp	.-40     	; 0x484 <.L11>

000004ac <initMetaalDetectorLinks>:

#define thresholdLinks 999

void initMetaalDetectorLinks(void) {
    //configure pins als output
    DDRPulseLinks |= (1<<pinPulseLinks);
 4ac:	85 9a       	sbi	0x10, 5	; 16

000004ae <.Loc.140>:
}
 4ae:	08 95       	ret

000004b0 <initAdcLinks>:

void initAdcLinks(void){
    ADMUX = (0<<REFS1) | (1<<REFS0) | (0<<MUX3) | (1<<MUX2) | (0<<MUX1) | (0<<MUX0);
 4b0:	84 e4       	ldi	r24, 0x44	; 68
 4b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

000004b6 <.Loc.144>:
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<ADPS0);
 4b6:	ea e7       	ldi	r30, 0x7A	; 122
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	80 83       	st	Z, r24

000004be <.Loc.146>:
    ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC enable, prescaler 128
 4be:	87 e8       	ldi	r24, 0x87	; 135
 4c0:	80 83       	st	Z, r24

000004c2 <.Loc.148>:
}
 4c2:	08 95       	ret

000004c4 <detectMetaalLinks>:

int detectMetaalLinks(void) {
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	00 d0       	rcall	.+0      	; 0x4d2 <L0^A>

000004d2 <L0^A>:
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <L0^A>

000004d4 <L0^A>:
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <L0^A>

000004d6 <L0^A>:
 4d6:	0f 92       	push	r0
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62

000004dc <.Loc.150>:
    initSerialCom(MYUBRR);
 4dc:	87 e6       	ldi	r24, 0x67	; 103
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 9a 01 	call	0x334	; 0x334 <initSerialCom>

000004e4 <.LVL39>:
    initMetaalDetectorLinks();
 4e4:	0e 94 56 02 	call	0x4ac	; 0x4ac <initMetaalDetectorLinks>

000004e8 <.LVL40>:
    initAdcLinks();
 4e8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <initAdcLinks>

000004ec <.LVL41>:
 4ec:	28 e2       	ldi	r18, 0x28	; 40
 4ee:	30 e0       	ldi	r19, 0x00	; 0

000004f0 <.Loc.158>:
    long unsigned int sum = 0;
 4f0:	c1 2c       	mov	r12, r1
 4f2:	d1 2c       	mov	r13, r1
 4f4:	76 01       	movw	r14, r12

000004f6 <.Loc.159>:
            PORTPulseLinks &= ~(1<<pinPulseLinks); //pin low
            _delay_us(pulseWidth);
        }

    // Meet de spanning
    ADCSRA |= (1<<ADSC);    //start adc
 4f6:	ea e7       	ldi	r30, 0x7A	; 122
 4f8:	f0 e0       	ldi	r31, 0x00	; 0

000004fa <.Loc.160>:
    while (ADCSRA & (1<<ADSC)); // wait until done
    int val = ADC;  // Leest tussen 0 en 1023
 4fa:	48 e7       	ldi	r20, 0x78	; 120
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	16 c0       	rjmp	.+44     	; 0x52c <.L27>

00000500 <.L34>:
    ADCSRA |= (1<<ADSC);    //start adc
 500:	80 81       	ld	r24, Z

00000502 <.Loc.162>:
 502:	80 64       	ori	r24, 0x40	; 64
 504:	80 83       	st	Z, r24

00000506 <.L26>:
    while (ADCSRA & (1<<ADSC)); // wait until done
 506:	80 81       	ld	r24, Z
 508:	86 fd       	sbrc	r24, 6
 50a:	fd cf       	rjmp	.-6      	; 0x506 <.L26>

0000050c <.Loc.165>:
    int val = ADC;  // Leest tussen 0 en 1023
 50c:	da 01       	movw	r26, r20
 50e:	8d 91       	ld	r24, X+
 510:	9c 91       	ld	r25, X

00000512 <.Loc.167>:
    sum += val;
 512:	09 2e       	mov	r0, r25
 514:	00 0c       	add	r0, r0
 516:	aa 0b       	sbc	r26, r26
 518:	bb 0b       	sbc	r27, r27

0000051a <.Loc.169>:
 51a:	c8 0e       	add	r12, r24
 51c:	d9 1e       	adc	r13, r25
 51e:	ea 1e       	adc	r14, r26
 520:	fb 1e       	adc	r15, r27

00000522 <.Loc.170>:
    for (int i=0; i< nMeas; i++) {
 522:	21 50       	subi	r18, 0x01	; 1
 524:	31 09       	sbc	r19, r1

00000526 <.Loc.173>:
 526:	21 15       	cp	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	e9 f0       	breq	.+58     	; 0x566 <.L33>

0000052c <.L27>:
        DDRCapLinks |= (1<<pinCapLinks); //output
 52c:	84 9a       	sbi	0x10, 4	; 16

0000052e <.Loc.176>:
        PORTCapLinks &= ~(1<<pinCapLinks); //pin low
 52e:	8c 98       	cbi	0x11, 4	; 17

00000530 <.LBB44>:
 530:	8f ec       	ldi	r24, 0xCF	; 207
 532:	97 e0       	ldi	r25, 0x07	; 7

00000534 <.L1^B4>:
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <.L1^B4>
 538:	00 c0       	rjmp	.+0      	; 0x53a <L0^A>

0000053a <L0^A>:
	...

0000053c <.LBE44>:
        DDRCapLinks &= ~(1<<pinCapLinks); //input
 53c:	84 98       	cbi	0x10, 4	; 16

0000053e <.Loc.189>:
 53e:	80 e1       	ldi	r24, 0x10	; 16
 540:	90 e0       	ldi	r25, 0x00	; 0

00000542 <.L25>:
            PORTPulseLinks |= (1<<pinPulseLinks); //pin hoog
 542:	8d 9a       	sbi	0x11, 5	; 17

00000544 <.LBB47>:
 544:	a3 e5       	ldi	r26, 0x53	; 83
 546:	b1 e0       	ldi	r27, 0x01	; 1

00000548 <.L1^B5>:
 548:	11 97       	sbiw	r26, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <.L1^B5>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <L0^A>

0000054e <L0^A>:
	...

00000550 <.LBE47>:
            PORTPulseLinks &= ~(1<<pinPulseLinks); //pin low
 550:	8d 98       	cbi	0x11, 5	; 17

00000552 <.LBB49>:
 552:	a3 e5       	ldi	r26, 0x53	; 83
 554:	b1 e0       	ldi	r27, 0x01	; 1

00000556 <.L1^B6>:
 556:	11 97       	sbiw	r26, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <.L1^B6>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <L0^A>

0000055c <L0^A>:
	...

0000055e <.LBE49>:
        for (int j = 0; j < 16; j++) {//aantal pulsen per meting
 55e:	01 97       	sbiw	r24, 0x01	; 1

00000560 <.Loc.217>:
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	79 f7       	brne	.-34     	; 0x542 <.L25>
 564:	cd cf       	rjmp	.-102    	; 0x500 <.L34>

00000566 <.L33>:
    }

    // Gemiddelde berekenen
    int avg = sum / nMeas;//rekenen sturen
 566:	c7 01       	movw	r24, r14
 568:	b6 01       	movw	r22, r12
 56a:	28 e2       	ldi	r18, 0x28	; 40
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	50 e0       	ldi	r21, 0x00	; 0

00000572 <.Loc.221>:
 572:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodsi4>
 576:	da 01       	movw	r26, r20
 578:	c9 01       	movw	r24, r18

0000057a <.Loc.222>:
 57a:	79 01       	movw	r14, r18

0000057c <.LBB54>:
 57c:	4a e0       	ldi	r20, 0x0A	; 10
 57e:	be 01       	movw	r22, r28
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	0e 94 80 04 	call	0x900	; 0x900 <__itoa_ncheck>

00000588 <.LBE54>:
                    //voor serial debugging
                    char buffer[10];  // enough space for an int

                    itoa(avg, buffer, 10);  // convert int to decimal string

                    Serialprint("Average: ");
 588:	83 e2       	ldi	r24, 0x23	; 35
 58a:	92 e0       	ldi	r25, 0x02	; 2
 58c:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

00000590 <.LVL62>:
                    Serialprint(buffer);
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

00000598 <.LVL63>:
                    Serialprint("\r\n");     // newline
 598:	83 e5       	ldi	r24, 0x53	; 83
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

000005a0 <.LVL64>:

    // Metaaldetectie
    if (avg > thresholdLinks) {//rekenen sturen
 5a0:	b8 ee       	ldi	r27, 0xE8	; 232
 5a2:	eb 16       	cp	r14, r27
 5a4:	b3 e0       	ldi	r27, 0x03	; 3
 5a6:	fb 06       	cpc	r15, r27
 5a8:	9c f0       	brlt	.+38     	; 0x5d0 <.L28>

000005aa <.Loc.237>:
        Serialprint("geen metaal RECHTS\r\n");
 5aa:	81 e4       	ldi	r24, 0x41	; 65
 5ac:	92 e0       	ldi	r25, 0x02	; 2
 5ae:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

000005b2 <.LVL65>:
        return 0;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0

000005b6 <.L24>:
    }
    else {
        Serialprint("metaal RECHTS\r\n");
        return 1;
  }
}
 5b6:	2a 96       	adiw	r28, 0x0a	; 10
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	df 90       	pop	r13
 5cc:	cf 90       	pop	r12

000005ce <.Loc.241>:
 5ce:	08 95       	ret

000005d0 <.L28>:
        Serialprint("metaal RECHTS\r\n");
 5d0:	86 e4       	ldi	r24, 0x46	; 70
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	0e 94 ad 01 	call	0x35a	; 0x35a <Serialprint>

000005d8 <.LVL68>:
        return 1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	ec cf       	rjmp	.-40     	; 0x5b6 <.L24>

000005de <initNoodstop>:
#define DDRlAMP DDRA
#define PORTLAMP PORTA


void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 5de:	50 98       	cbi	0x0a, 0	; 10

000005e0 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 5e0:	58 9a       	sbi	0x0b, 0	; 11

000005e2 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 5e2:	e8 9a       	sbi	0x1d, 0	; 29

000005e4 <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 5e4:	e9 e6       	ldi	r30, 0x69	; 105
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z

000005ea <.Loc.8>:
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 83       	st	Z, r24

000005ee <.Loc.9>:
    sei();
 5ee:	78 94       	sei

000005f0 <.Loc.10>:

    DDRlAMP |= (1<<NOODLAMP);
 5f0:	0c 9a       	sbi	0x01, 4	; 1

000005f2 <.Loc.12>:
    PORTLAMP &= ~(1<<NOODLAMP);
 5f2:	14 98       	cbi	0x02, 4	; 2

000005f4 <.Loc.14>:
}
 5f4:	08 95       	ret

000005f6 <__vector_1>:

ISR(INT0_vect){
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	0b b6       	in	r0, 0x3b	; 59
 602:	0f 92       	push	r0
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	4f 93       	push	r20
 60a:	5f 93       	push	r21
 60c:	6f 93       	push	r22
 60e:	7f 93       	push	r23
 610:	8f 93       	push	r24
 612:	9f 93       	push	r25
 614:	af 93       	push	r26
 616:	bf 93       	push	r27
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31

0000061c <.L5>:
    while(1){
       while(!(PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 61c:	48 99       	sbic	0x09, 0	; 9
 61e:	03 c0       	rjmp	.+6      	; 0x626 <.L3>

00000620 <.L4>:
            PORTLAMP |= (1<<NOODLAMP);
 620:	14 9a       	sbi	0x02, 4	; 2

00000622 <.Loc.21>:
       while(!(PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 622:	48 9b       	sbis	0x09, 0	; 9
 624:	fd cf       	rjmp	.-6      	; 0x620 <.L4>

00000626 <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 626:	06 99       	sbic	0x00, 6	; 0
 628:	f9 cf       	rjmp	.-14     	; 0x61c <.L5>

0000062a <.Loc.24>:
            //uitvoer();
            PORTLAMP &= ~(1<<NOODLAMP);
 62a:	14 98       	cbi	0x02, 4	; 2

0000062c <.Loc.26>:
            sendByte(0xFF);
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 04 04 	call	0x808	; 0x808 <sendByte>

00000634 <.LVL0>:
            break;
        }
    }
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0b be       	out	0x3b, r0	; 59
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <initStartKnop>:


//cant be bothered to create an extra file just for this function
void initStartKnop(void){
    DDR_knop &= ~(1<<start);
 65a:	0e 98       	cbi	0x01, 6	; 1

0000065c <.Loc.32>:
    PORT_knop |= (1<<start);
 65c:	16 9a       	sbi	0x02, 6	; 2

0000065e <.Loc.34>:
}
 65e:	08 95       	ret

00000660 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 660:	ea e0       	ldi	r30, 0x0A	; 10
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	80 81       	ld	r24, Z

00000666 <.Loc.2>:
 666:	80 68       	ori	r24, 0x80	; 128
 668:	80 83       	st	Z, r24

0000066a <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 66a:	eb e0       	ldi	r30, 0x0B	; 11
 66c:	f1 e0       	ldi	r31, 0x01	; 1
 66e:	80 81       	ld	r24, Z

00000670 <.Loc.4>:
 670:	80 68       	ori	r24, 0x80	; 128
 672:	80 83       	st	Z, r24

00000674 <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 674:	80 81       	ld	r24, Z

00000676 <.Loc.6>:
 676:	80 62       	ori	r24, 0x20	; 32
 678:	80 83       	st	Z, r24

0000067a <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 67a:	80 81       	ld	r24, Z
 67c:	8f 77       	andi	r24, 0x7F	; 127
 67e:	80 83       	st	Z, r24

00000680 <.Loc.9>:
}
 680:	08 95       	ret

00000682 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 682:	ea e0       	ldi	r30, 0x0A	; 10
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	80 81       	ld	r24, Z

00000688 <.Loc.12>:
 688:	80 68       	ori	r24, 0x80	; 128
 68a:	80 83       	st	Z, r24

0000068c <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 68c:	eb e0       	ldi	r30, 0x0B	; 11
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	80 81       	ld	r24, Z
 692:	8f 7d       	andi	r24, 0xDF	; 223
 694:	80 83       	st	Z, r24

00000696 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 696:	80 81       	ld	r24, Z

00000698 <.Loc.16>:
 698:	80 62       	ori	r24, 0x20	; 32
 69a:	80 83       	st	Z, r24

0000069c <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 69c:	80 81       	ld	r24, Z

0000069e <.Loc.18>:
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	80 83       	st	Z, r24

000006a2 <.Loc.19>:
}
 6a2:	08 95       	ret

000006a4 <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 6a4:	ea e0       	ldi	r30, 0x0A	; 10
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
 6a8:	90 81       	ld	r25, Z

000006aa <.Loc.22>:
 6aa:	90 68       	ori	r25, 0x80	; 128
 6ac:	90 83       	st	Z, r25

000006ae <.Loc.23>:
 6ae:	28 e0       	ldi	r18, 0x08	; 8
 6b0:	30 e0       	ldi	r19, 0x00	; 0

000006b2 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 6b2:	eb e0       	ldi	r30, 0x0B	; 11
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <.L6>

000006b8 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 6b8:	90 81       	ld	r25, Z
 6ba:	9f 77       	andi	r25, 0x7F	; 127
 6bc:	90 83       	st	Z, r25

000006be <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 6be:	90 81       	ld	r25, Z

000006c0 <.Loc.31>:
 6c0:	90 62       	ori	r25, 0x20	; 32
 6c2:	90 83       	st	Z, r25

000006c4 <.Loc.32>:
        data >>= 1;
 6c4:	86 95       	lsr	r24

000006c6 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	31 09       	sbc	r19, r1

000006ca <.Loc.36>:
 6ca:	21 15       	cp	r18, r1
 6cc:	31 05       	cpc	r19, r1
 6ce:	49 f0       	breq	.+18     	; 0x6e2 <.L8>

000006d0 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 6d0:	90 81       	ld	r25, Z
 6d2:	9f 7d       	andi	r25, 0xDF	; 223
 6d4:	90 83       	st	Z, r25

000006d6 <.Loc.39>:
        if(data & 0x01){
 6d6:	80 ff       	sbrs	r24, 0
 6d8:	ef cf       	rjmp	.-34     	; 0x6b8 <.L4>

000006da <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 6da:	90 81       	ld	r25, Z

000006dc <.Loc.42>:
 6dc:	90 68       	ori	r25, 0x80	; 128
 6de:	90 83       	st	Z, r25
 6e0:	ee cf       	rjmp	.-36     	; 0x6be <.L5>

000006e2 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 6e2:	eb e0       	ldi	r30, 0x0B	; 11
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	80 81       	ld	r24, Z

000006e8 <.Loc.46>:
 6e8:	8f 7d       	andi	r24, 0xDF	; 223
 6ea:	80 83       	st	Z, r24

000006ec <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 6ec:	80 81       	ld	r24, Z

000006ee <.Loc.48>:
 6ee:	80 62       	ori	r24, 0x20	; 32
 6f0:	80 83       	st	Z, r24

000006f2 <.Loc.49>:
}
 6f2:	08 95       	ret

000006f4 <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 6f4:	cf 93       	push	r28
 6f6:	c8 2f       	mov	r28, r24

000006f8 <.Loc.52>:
    display_start();
 6f8:	0e 94 30 03 	call	0x660	; 0x660 <display_start>

000006fc <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 6fc:	8c 2f       	mov	r24, r28
 6fe:	87 70       	andi	r24, 0x07	; 7
 700:	88 68       	ori	r24, 0x88	; 136
 702:	0e 94 52 03 	call	0x6a4	; 0x6a4 <display_sendbyte>

00000706 <.LVL9>:
    display_stop();
 706:	0e 94 41 03 	call	0x682	; 0x682 <display_stop>

0000070a <.LVL10>:
}
 70a:	cf 91       	pop	r28

0000070c <.Loc.56>:
 70c:	08 95       	ret

0000070e <display_number>:

// Display 4 digit integer
void display_number(int number){
 70e:	ef 92       	push	r14
 710:	ff 92       	push	r15
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	d8 2f       	mov	r29, r24
 71a:	c9 2f       	mov	r28, r25

0000071c <.Loc.59>:
    display_start();
 71c:	0e 94 30 03 	call	0x660	; 0x660 <display_start>

00000720 <.LVL13>:
    display_sendbyte(0x40);
 720:	80 e4       	ldi	r24, 0x40	; 64
 722:	0e 94 52 03 	call	0x6a4	; 0x6a4 <display_sendbyte>

00000726 <.LVL14>:
    display_stop();
 726:	0e 94 41 03 	call	0x682	; 0x682 <display_stop>

0000072a <.LVL15>:
 72a:	13 ec       	ldi	r17, 0xC3	; 195

0000072c <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 72c:	0f 2e       	mov	r0, r31
 72e:	fa e0       	ldi	r31, 0x0A	; 10
 730:	ef 2e       	mov	r14, r31
 732:	f1 2c       	mov	r15, r1
 734:	f0 2d       	mov	r31, r0

00000736 <.L11>:
        display_start();
 736:	0e 94 30 03 	call	0x660	; 0x660 <display_start>

0000073a <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 73a:	81 2f       	mov	r24, r17
 73c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <display_sendbyte>

00000740 <.LVL18>:
        display_sendbyte(digits[number%10]);
 740:	8d 2f       	mov	r24, r29
 742:	9c 2f       	mov	r25, r28
 744:	b7 01       	movw	r22, r14
 746:	0e 94 36 04 	call	0x86c	; 0x86c <__divmodhi4>
 74a:	d6 2f       	mov	r29, r22

0000074c <.Loc.71>:
 74c:	c7 2f       	mov	r28, r23

0000074e <.Loc.72>:
 74e:	fc 01       	movw	r30, r24
 750:	ea 5e       	subi	r30, 0xEA	; 234
 752:	fd 4f       	sbci	r31, 0xFD	; 253

00000754 <.Loc.73>:
 754:	80 81       	ld	r24, Z
 756:	0e 94 52 03 	call	0x6a4	; 0x6a4 <display_sendbyte>

0000075a <.LVL20>:
        number /= 10;
        display_stop();
 75a:	0e 94 41 03 	call	0x682	; 0x682 <display_stop>

0000075e <.LVL21>:
    for (int i = 0; i < 4; i++) {
 75e:	11 50       	subi	r17, 0x01	; 1
 760:	1f 3b       	cpi	r17, 0xBF	; 191
 762:	49 f7       	brne	.-46     	; 0x736 <.L11>

00000764 <.Loc.78>:
    }
}
 764:	df 91       	pop	r29

00000766 <.Loc.79>:
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	08 95       	ret

00000770 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	c8 2f       	mov	r28, r24
 778:	d9 2f       	mov	r29, r25
 77a:	16 2f       	mov	r17, r22

0000077c <.Loc.82>:
    display_start();
 77c:	0e 94 30 03 	call	0x660	; 0x660 <display_start>

00000780 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 780:	80 ec       	ldi	r24, 0xC0	; 192
 782:	81 0f       	add	r24, r17
 784:	0e 94 52 03 	call	0x6a4	; 0x6a4 <display_sendbyte>

00000788 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 788:	ce 5f       	subi	r28, 0xFE	; 254
 78a:	dd 4f       	sbci	r29, 0xFD	; 253

0000078c <.Loc.86>:
 78c:	88 81       	ld	r24, Y
 78e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <display_sendbyte>

00000792 <.LVL26>:
    display_stop();
 792:	0e 94 41 03 	call	0x682	; 0x682 <display_stop>

00000796 <.LVL27>:
}
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17

0000079c <.Loc.89>:
 79c:	08 95       	ret

0000079e <display_init>:

// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 79e:	ea e0       	ldi	r30, 0x0A	; 10
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	80 81       	ld	r24, Z

000007a4 <.Loc.92>:
 7a4:	80 68       	ori	r24, 0x80	; 128
 7a6:	80 83       	st	Z, r24

000007a8 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 7a8:	80 81       	ld	r24, Z

000007aa <.Loc.94>:
 7aa:	80 62       	ori	r24, 0x20	; 32
 7ac:	80 83       	st	Z, r24

000007ae <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 7ae:	eb e0       	ldi	r30, 0x0B	; 11
 7b0:	f1 e0       	ldi	r31, 0x01	; 1
 7b2:	80 81       	ld	r24, Z

000007b4 <.Loc.96>:
 7b4:	80 68       	ori	r24, 0x80	; 128
 7b6:	80 83       	st	Z, r24

000007b8 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 7b8:	80 81       	ld	r24, Z

000007ba <.Loc.98>:
 7ba:	80 62       	ori	r24, 0x20	; 32
 7bc:	80 83       	st	Z, r24

000007be <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 7be:	87 e0       	ldi	r24, 0x07	; 7
 7c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <display_brightness>

000007c4 <.LVL29>:
}
 7c4:	08 95       	ret

000007c6 <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	80 e1       	ldi	r24, 0x10	; 16
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 b8 03 	call	0x770	; 0x770 <display_letter>

000007d0 <.LVL30>:
    display_letter(17, 1);
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	81 e1       	ldi	r24, 0x11	; 17
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 b8 03 	call	0x770	; 0x770 <display_letter>

000007da <.LVL31>:
    display_letter(13, 2);
 7da:	62 e0       	ldi	r22, 0x02	; 2
 7dc:	8d e0       	ldi	r24, 0x0D	; 13
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 b8 03 	call	0x770	; 0x770 <display_letter>

000007e4 <.LVL32>:
    display_letter(14, 3);
 7e4:	63 e0       	ldi	r22, 0x03	; 3
 7e6:	8e e0       	ldi	r24, 0x0E	; 14
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 b8 03 	call	0x770	; 0x770 <display_letter>

000007ee <.LVL33>:
}
 7ee:	08 95       	ret

000007f0 <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 7f0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

000007f4 <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 7f4:	87 e6       	ldi	r24, 0x67	; 103
 7f6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

000007fa <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 7fa:	88 e9       	ldi	r24, 0x98	; 152
 7fc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

00000800 <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 800:	86 e0       	ldi	r24, 0x06	; 6
 802:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

00000806 <.Loc.9>:
}
 806:	08 95       	ret

00000808 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 808:	e8 ec       	ldi	r30, 0xC8	; 200
 80a:	f0 e0       	ldi	r31, 0x00	; 0

0000080c <.L3>:
 80c:	90 81       	ld	r25, Z
 80e:	95 ff       	sbrs	r25, 5
 810:	fd cf       	rjmp	.-6      	; 0x80c <.L3>

00000812 <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 812:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000816 <.Loc.17>:
}
 816:	08 95       	ret

00000818 <flushUsart2Buffer>:


//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 818:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 81c:	88 23       	and	r24, r24
 81e:	44 f4       	brge	.+16     	; 0x830 <.L5>

00000820 <.Loc.22>:
        dummy = UDR1; // Read and discard
 820:	ae ec       	ldi	r26, 0xCE	; 206
 822:	b0 e0       	ldi	r27, 0x00	; 0

00000824 <.Loc.23>:
    while (UCSR1A & (1 << RXC1)) {
 824:	e8 ec       	ldi	r30, 0xC8	; 200
 826:	f0 e0       	ldi	r31, 0x00	; 0

00000828 <.L7>:
        dummy = UDR1; // Read and discard
 828:	8c 91       	ld	r24, X

0000082a <.Loc.26>:
    while (UCSR1A & (1 << RXC1)) {
 82a:	80 81       	ld	r24, Z
 82c:	88 23       	and	r24, r24
 82e:	e4 f3       	brlt	.-8      	; 0x828 <.L7>

00000830 <.L5>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 830:	08 95       	ret

00000832 <__vector_36>:

unsigned int serialData;
unsigned int stopRequest = 0;

ISR(USART1_RX_vect){
 832:	1f 92       	push	r1
 834:	1f b6       	in	r1, 0x3f	; 63
 836:	1f 92       	push	r1
 838:	11 24       	eor	r1, r1
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25

0000083e <.Loc.29>:
    serialData =UDR1;
 83e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 842:	90 e0       	ldi	r25, 0x00	; 0

00000844 <.Loc.31>:
 844:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <serialData+0x1>
 848:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <serialData>

0000084c <.Loc.32>:
    if(serialData==0x01){
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	91 05       	cpc	r25, r1
 850:	31 f0       	breq	.+12     	; 0x85e <.L11>

00000852 <.L9>:
        stopRequest = 1;
    }
}
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	1f 90       	pop	r1
 858:	1f be       	out	0x3f, r1	; 63
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <.L11>:
        stopRequest = 1;
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <stopRequest+0x1>
 866:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <stopRequest>

0000086a <.Loc.37>:
}
 86a:	f3 cf       	rjmp	.-26     	; 0x852 <.L9>

0000086c <__divmodhi4>:
 86c:	97 fb       	bst	r25, 7

0000086e <.Loc.1>:
 86e:	07 2e       	mov	r0, r23

00000870 <.Loc.2>:
 870:	16 f4       	brtc	.+4      	; 0x876 <.L^B1>

00000872 <.Loc.3>:
 872:	00 94       	com	r0

00000874 <.Loc.4>:
 874:	07 d0       	rcall	.+14     	; 0x884 <__divmodhi4_neg1>

00000876 <.L^B1>:
 876:	77 fd       	sbrc	r23, 7

00000878 <.Loc.6>:
 878:	09 d0       	rcall	.+18     	; 0x88c <__divmodhi4_neg2>

0000087a <.Loc.7>:
 87a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__udivmodhi4>

0000087e <.Loc.8>:
 87e:	07 fc       	sbrc	r0, 7

00000880 <.Loc.9>:
 880:	05 d0       	rcall	.+10     	; 0x88c <__divmodhi4_neg2>

00000882 <.Loc.10>:
 882:	3e f4       	brtc	.+14     	; 0x892 <__divmodhi4_exit>

00000884 <__divmodhi4_neg1>:
 884:	90 95       	com	r25

00000886 <.Loc.12>:
 886:	81 95       	neg	r24

00000888 <.Loc.13>:
 888:	9f 4f       	sbci	r25, 0xFF	; 255

0000088a <.Loc.14>:
 88a:	08 95       	ret

0000088c <__divmodhi4_neg2>:
 88c:	70 95       	com	r23

0000088e <.Loc.16>:
 88e:	61 95       	neg	r22

00000890 <.Loc.17>:
 890:	7f 4f       	sbci	r23, 0xFF	; 255

00000892 <__divmodhi4_exit>:
 892:	08 95       	ret

00000894 <__udivmodsi4>:
 894:	a1 e2       	ldi	r26, 0x21	; 33

00000896 <.Loc.1>:
 896:	1a 2e       	mov	r1, r26

00000898 <.Loc.2>:
 898:	aa 1b       	sub	r26, r26

0000089a <.Loc.3>:
 89a:	bb 1b       	sub	r27, r27

0000089c <.Loc.4>:
 89c:	fd 01       	movw	r30, r26

0000089e <.Loc.5>:
 89e:	0d c0       	rjmp	.+26     	; 0x8ba <__udivmodsi4_ep>

000008a0 <__udivmodsi4_loop>:
 8a0:	aa 1f       	adc	r26, r26

000008a2 <.Loc.7>:
 8a2:	bb 1f       	adc	r27, r27

000008a4 <.Loc.8>:
 8a4:	ee 1f       	adc	r30, r30

000008a6 <.Loc.9>:
 8a6:	ff 1f       	adc	r31, r31

000008a8 <.Loc.10>:
 8a8:	a2 17       	cp	r26, r18

000008aa <.Loc.11>:
 8aa:	b3 07       	cpc	r27, r19

000008ac <.Loc.12>:
 8ac:	e4 07       	cpc	r30, r20

000008ae <.Loc.13>:
 8ae:	f5 07       	cpc	r31, r21

000008b0 <.Loc.14>:
 8b0:	20 f0       	brcs	.+8      	; 0x8ba <__udivmodsi4_ep>

000008b2 <.Loc.15>:
 8b2:	a2 1b       	sub	r26, r18

000008b4 <.Loc.16>:
 8b4:	b3 0b       	sbc	r27, r19

000008b6 <.Loc.17>:
 8b6:	e4 0b       	sbc	r30, r20

000008b8 <.Loc.18>:
 8b8:	f5 0b       	sbc	r31, r21

000008ba <__udivmodsi4_ep>:
 8ba:	66 1f       	adc	r22, r22

000008bc <.Loc.20>:
 8bc:	77 1f       	adc	r23, r23

000008be <.Loc.21>:
 8be:	88 1f       	adc	r24, r24

000008c0 <.Loc.22>:
 8c0:	99 1f       	adc	r25, r25

000008c2 <.Loc.23>:
 8c2:	1a 94       	dec	r1

000008c4 <.Loc.24>:
 8c4:	69 f7       	brne	.-38     	; 0x8a0 <__udivmodsi4_loop>

000008c6 <.Loc.25>:
 8c6:	60 95       	com	r22

000008c8 <.Loc.26>:
 8c8:	70 95       	com	r23

000008ca <.Loc.27>:
 8ca:	80 95       	com	r24

000008cc <.Loc.28>:
 8cc:	90 95       	com	r25

000008ce <.Loc.29>:
 8ce:	9b 01       	movw	r18, r22

000008d0 <.Loc.30>:
 8d0:	ac 01       	movw	r20, r24

000008d2 <.Loc.31>:
 8d2:	bd 01       	movw	r22, r26

000008d4 <.Loc.32>:
 8d4:	cf 01       	movw	r24, r30

000008d6 <.Loc.33>:
 8d6:	08 95       	ret

000008d8 <__udivmodhi4>:
 8d8:	aa 1b       	sub	r26, r26

000008da <.Loc.1>:
 8da:	bb 1b       	sub	r27, r27

000008dc <.Loc.2>:
 8dc:	51 e1       	ldi	r21, 0x11	; 17

000008de <.Loc.3>:
 8de:	07 c0       	rjmp	.+14     	; 0x8ee <__udivmodhi4_ep>

000008e0 <__udivmodhi4_loop>:
 8e0:	aa 1f       	adc	r26, r26

000008e2 <.Loc.5>:
 8e2:	bb 1f       	adc	r27, r27

000008e4 <.Loc.6>:
 8e4:	a6 17       	cp	r26, r22

000008e6 <.Loc.7>:
 8e6:	b7 07       	cpc	r27, r23

000008e8 <.Loc.8>:
 8e8:	10 f0       	brcs	.+4      	; 0x8ee <__udivmodhi4_ep>

000008ea <.Loc.9>:
 8ea:	a6 1b       	sub	r26, r22

000008ec <.Loc.10>:
 8ec:	b7 0b       	sbc	r27, r23

000008ee <__udivmodhi4_ep>:
 8ee:	88 1f       	adc	r24, r24

000008f0 <.Loc.12>:
 8f0:	99 1f       	adc	r25, r25

000008f2 <.Loc.13>:
 8f2:	5a 95       	dec	r21

000008f4 <.Loc.14>:
 8f4:	a9 f7       	brne	.-22     	; 0x8e0 <__udivmodhi4_loop>

000008f6 <.Loc.15>:
 8f6:	80 95       	com	r24

000008f8 <.Loc.16>:
 8f8:	90 95       	com	r25

000008fa <.Loc.17>:
 8fa:	bc 01       	movw	r22, r24

000008fc <.Loc.18>:
 8fc:	cd 01       	movw	r24, r26

000008fe <.Loc.19>:
 8fe:	08 95       	ret

00000900 <__itoa_ncheck>:
 900:	bb 27       	eor	r27, r27
 902:	4a 30       	cpi	r20, 0x0A	; 10
 904:	31 f4       	brne	.+12     	; 0x912 <.L1^B1>
 906:	99 23       	and	r25, r25
 908:	22 f4       	brpl	.+8      	; 0x912 <.L1^B1>
 90a:	bd e2       	ldi	r27, 0x2D	; 45
 90c:	90 95       	com	r25
 90e:	81 95       	neg	r24
 910:	9f 4f       	sbci	r25, 0xFF	; 255

00000912 <.L1^B1>:
 912:	0c 94 8c 04 	jmp	0x918	; 0x918 <__utoa_common>

00000916 <__utoa_ncheck>:
 916:	bb 27       	eor	r27, r27

00000918 <__utoa_common>:
 918:	fb 01       	movw	r30, r22
 91a:	55 27       	eor	r21, r21

0000091c <.L1^B1>:
 91c:	aa 27       	eor	r26, r26

0000091e <.L2^B1>:
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	aa 1f       	adc	r26, r26
 924:	a4 17       	cp	r26, r20
 926:	10 f0       	brcs	.+4      	; 0x92c <.L3^B1>
 928:	a4 1b       	sub	r26, r20
 92a:	83 95       	inc	r24

0000092c <.L3^B1>:
 92c:	50 51       	subi	r21, 0x10	; 16
 92e:	b9 f7       	brne	.-18     	; 0x91e <.L2^B1>
 930:	a0 5d       	subi	r26, 0xD0	; 208
 932:	aa 33       	cpi	r26, 0x3A	; 58
 934:	08 f0       	brcs	.+2      	; 0x938 <.L4^B1>
 936:	a9 5d       	subi	r26, 0xD9	; 217

00000938 <.L4^B1>:
 938:	a1 93       	st	Z+, r26
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	79 f7       	brne	.-34     	; 0x91c <.L1^B1>
 93e:	b1 11       	cpse	r27, r1
 940:	b1 93       	st	Z+, r27
 942:	11 92       	st	Z+, r1
 944:	cb 01       	movw	r24, r22
 946:	0c 94 a5 04 	jmp	0x94a	; 0x94a <strrev>

0000094a <strrev>:
 94a:	dc 01       	movw	r26, r24
 94c:	fc 01       	movw	r30, r24

0000094e <.L1^B1>:
 94e:	67 2f       	mov	r22, r23
 950:	71 91       	ld	r23, Z+
 952:	77 23       	and	r23, r23
 954:	e1 f7       	brne	.-8      	; 0x94e <.L1^B1>
 956:	32 97       	sbiw	r30, 0x02	; 2
 958:	04 c0       	rjmp	.+8      	; 0x962 <.L3^B1>

0000095a <.L2^B1>:
 95a:	7c 91       	ld	r23, X
 95c:	6d 93       	st	X+, r22
 95e:	70 83       	st	Z, r23
 960:	62 91       	ld	r22, -Z

00000962 <.L3^B1>:
 962:	ae 17       	cp	r26, r30
 964:	bf 07       	cpc	r27, r31
 966:	c8 f3       	brcs	.-14     	; 0x95a <.L2^B1>
 968:	08 95       	ret

0000096a <_exit>:
 96a:	f8 94       	cli

0000096c <__stop_program>:
 96c:	ff cf       	rjmp	.-2      	; 0x96c <__stop_program>
