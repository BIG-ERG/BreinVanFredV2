
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000e5a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800222  00800222  00000f30  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000f33  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001d8  00000000  00000000  00000f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00002460  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001303  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001c9e  00000000  00000000  000048c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000594  00000000  00000000  00006564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000952  00000000  00000000  00006af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001df  00000000  00000000  0000744a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000242  00000000  00000000  00007629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001f  00000000  00000000  0000786b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_35>
  90:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_45>
  b8:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ea e5       	ldi	r30, 0x5A	; 90

000000fc <.Loc.4>:
  fc:	fe e0       	ldi	r31, 0x0E	; 14

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a3 34       	cpi	r26, 0x43	; 67

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 91 02 	call	0x522	; 0x522 <main>
 122:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 12a:	ea e0       	ldi	r30, 0x0A	; 10
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
 130:	80 68       	ori	r24, 0x80	; 128
 132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 134:	eb e0       	ldi	r30, 0x0B	; 11
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z

0000013a <.Loc.4>:
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24

0000013e <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 13e:	80 81       	ld	r24, Z

00000140 <.Loc.6>:
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24

00000144 <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 144:	80 81       	ld	r24, Z
 146:	8f 77       	andi	r24, 0x7F	; 127
 148:	80 83       	st	Z, r24

0000014a <.Loc.9>:
}
 14a:	08 95       	ret

0000014c <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 14c:	ea e0       	ldi	r30, 0x0A	; 10
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	80 81       	ld	r24, Z

00000152 <.Loc.12>:
 152:	80 68       	ori	r24, 0x80	; 128
 154:	80 83       	st	Z, r24

00000156 <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 156:	eb e0       	ldi	r30, 0x0B	; 11
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	80 81       	ld	r24, Z
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	80 83       	st	Z, r24

00000160 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 160:	80 81       	ld	r24, Z

00000162 <.Loc.16>:
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24

00000166 <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 166:	80 81       	ld	r24, Z

00000168 <.Loc.18>:
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24

0000016c <.Loc.19>:
}
 16c:	08 95       	ret

0000016e <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 16e:	ea e0       	ldi	r30, 0x0A	; 10
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	90 81       	ld	r25, Z

00000174 <.Loc.22>:
 174:	90 68       	ori	r25, 0x80	; 128
 176:	90 83       	st	Z, r25

00000178 <.Loc.23>:
 178:	28 e0       	ldi	r18, 0x08	; 8
 17a:	30 e0       	ldi	r19, 0x00	; 0

0000017c <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 17c:	eb e0       	ldi	r30, 0x0B	; 11
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	0c c0       	rjmp	.+24     	; 0x19a <.L6>

00000182 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 182:	90 81       	ld	r25, Z
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	90 83       	st	Z, r25

00000188 <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 188:	90 81       	ld	r25, Z

0000018a <.Loc.31>:
 18a:	90 64       	ori	r25, 0x40	; 64
 18c:	90 83       	st	Z, r25

0000018e <.Loc.32>:
        data >>= 1;
 18e:	86 95       	lsr	r24

00000190 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 190:	21 50       	subi	r18, 0x01	; 1
 192:	31 09       	sbc	r19, r1

00000194 <.Loc.36>:
 194:	21 15       	cp	r18, r1
 196:	31 05       	cpc	r19, r1
 198:	49 f0       	breq	.+18     	; 0x1ac <.L8>

0000019a <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 19a:	90 81       	ld	r25, Z
 19c:	9f 7b       	andi	r25, 0xBF	; 191
 19e:	90 83       	st	Z, r25

000001a0 <.Loc.39>:
        if(data & 0x01){
 1a0:	80 ff       	sbrs	r24, 0
 1a2:	ef cf       	rjmp	.-34     	; 0x182 <.L4>

000001a4 <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 1a4:	90 81       	ld	r25, Z

000001a6 <.Loc.42>:
 1a6:	90 68       	ori	r25, 0x80	; 128
 1a8:	90 83       	st	Z, r25
 1aa:	ee cf       	rjmp	.-36     	; 0x188 <.L5>

000001ac <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 1ac:	eb e0       	ldi	r30, 0x0B	; 11
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	80 81       	ld	r24, Z

000001b2 <.Loc.46>:
 1b2:	8f 7b       	andi	r24, 0xBF	; 191
 1b4:	80 83       	st	Z, r24

000001b6 <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 1b6:	80 81       	ld	r24, Z

000001b8 <.Loc.48>:
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24

000001bc <.Loc.49>:
}
 1bc:	08 95       	ret

000001be <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24

000001c2 <.Loc.52>:
    display_start();
 1c2:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

000001c6 <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 1c6:	8c 2f       	mov	r24, r28
 1c8:	87 70       	andi	r24, 0x07	; 7
 1ca:	88 68       	ori	r24, 0x88	; 136
 1cc:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

000001d0 <.LVL9>:
    display_stop();
 1d0:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

000001d4 <.LVL10>:
}
 1d4:	cf 91       	pop	r28

000001d6 <.Loc.56>:
 1d6:	08 95       	ret

000001d8 <display_number>:

// Display 4 digit integer
void display_number(int number){
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	d8 2f       	mov	r29, r24
 1e4:	c9 2f       	mov	r28, r25

000001e6 <.Loc.59>:
    display_start();
 1e6:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

000001ea <.LVL13>:
    display_sendbyte(0x40);
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

000001f0 <.LVL14>:
    display_stop();
 1f0:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

000001f4 <.LVL15>:
 1f4:	13 ec       	ldi	r17, 0xC3	; 195

000001f6 <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 1f6:	0f 2e       	mov	r0, r31
 1f8:	fa e0       	ldi	r31, 0x0A	; 10
 1fa:	ef 2e       	mov	r14, r31
 1fc:	f1 2c       	mov	r15, r1
 1fe:	f0 2d       	mov	r31, r0

00000200 <.L11>:
        display_start();
 200:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

00000204 <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 204:	81 2f       	mov	r24, r17
 206:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

0000020a <.LVL18>:
        display_sendbyte(digits[number%10]);
 20a:	8d 2f       	mov	r24, r29
 20c:	9c 2f       	mov	r25, r28
 20e:	b7 01       	movw	r22, r14
 210:	0e 94 f4 06 	call	0xde8	; 0xde8 <__divmodhi4>
 214:	d6 2f       	mov	r29, r22

00000216 <.Loc.71>:
 216:	c7 2f       	mov	r28, r23

00000218 <.Loc.72>:
 218:	fc 01       	movw	r30, r24
 21a:	ec 5e       	subi	r30, 0xEC	; 236
 21c:	fd 4f       	sbci	r31, 0xFD	; 253

0000021e <.Loc.73>:
 21e:	80 81       	ld	r24, Z
 220:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

00000224 <.LVL20>:
        number /= 10;
        display_stop();
 224:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

00000228 <.LVL21>:
    for (int i = 0; i < 4; i++) {
 228:	11 50       	subi	r17, 0x01	; 1
 22a:	1f 3b       	cpi	r17, 0xBF	; 191
 22c:	49 f7       	brne	.-46     	; 0x200 <.L11>

0000022e <.Loc.78>:
    }
}
 22e:	df 91       	pop	r29

00000230 <.Loc.79>:
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	c8 2f       	mov	r28, r24
 242:	d9 2f       	mov	r29, r25
 244:	16 2f       	mov	r17, r22

00000246 <.Loc.82>:
    display_start();
 246:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

0000024a <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	81 0f       	add	r24, r17
 24e:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

00000252 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 252:	c0 50       	subi	r28, 0x00	; 0
 254:	de 4f       	sbci	r29, 0xFE	; 254

00000256 <.Loc.86>:
 256:	88 81       	ld	r24, Y
 258:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

0000025c <.LVL26>:
    display_stop();
 25c:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

00000260 <.LVL27>:
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17

00000266 <.Loc.89>:
 266:	08 95       	ret

00000268 <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 268:	ea e0       	ldi	r30, 0x0A	; 10
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	80 81       	ld	r24, Z

0000026e <.Loc.92>:
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	80 83       	st	Z, r24

00000272 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 272:	80 81       	ld	r24, Z

00000274 <.Loc.94>:
 274:	80 64       	ori	r24, 0x40	; 64
 276:	80 83       	st	Z, r24

00000278 <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 278:	eb e0       	ldi	r30, 0x0B	; 11
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	80 81       	ld	r24, Z

0000027e <.Loc.96>:
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	80 83       	st	Z, r24

00000282 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 282:	80 81       	ld	r24, Z

00000284 <.Loc.98>:
 284:	80 64       	ori	r24, 0x40	; 64
 286:	80 83       	st	Z, r24

00000288 <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 288:	87 e0       	ldi	r24, 0x07	; 7
 28a:	0e 94 df 00 	call	0x1be	; 0x1be <display_brightness>

0000028e <.LVL29>:
}
 28e:	08 95       	ret

00000290 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	83 e1       	ldi	r24, 0x13	; 19
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000029a <.LVL30>:
    display_letter(3, 1);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002a4 <.LVL31>:
    display_letter(6, 2);
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002ae <.LVL32>:
    display_letter(7, 3);
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002b8 <.LVL33>:
}
 2b8:	08 95       	ret

000002ba <display_fol>:

void display_fol(void){
    display_letter(19, 0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	83 e1       	ldi	r24, 0x13	; 19
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002c4 <.LVL34>:
    display_letter(6, 1);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002ce <.LVL35>:
    display_letter(13, 2);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002d8 <.LVL36>:
    display_letter(11, 3);
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	8b e0       	ldi	r24, 0x0B	; 11
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002e2 <.LVL37>:
}
 2e2:	08 95       	ret

000002e4 <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	83 e1       	ldi	r24, 0x13	; 19
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002ee <.LVL38>:
    display_letter(3, 1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002f8 <.LVL39>:
    display_letter(12, 2);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000302 <.LVL40>:
    display_letter(17, 3);
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	81 e1       	ldi	r24, 0x11	; 17
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000030c <.LVL41>:
}
 30c:	08 95       	ret

0000030e <display_turn>:

void display_turn(void){
    display_letter(17, 0);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	81 e1       	ldi	r24, 0x11	; 17
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000318 <.LVL42>:
    display_letter(18, 1);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	82 e1       	ldi	r24, 0x12	; 18
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000322 <.LVL43>:
    display_letter(15, 2);
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000032c <.LVL44>:
    display_letter(12, 3);
 32c:	63 e0       	ldi	r22, 0x03	; 3
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000336 <.LVL45>:
}
 336:	08 95       	ret

00000338 <display_dist>:

void display_dist(void){
    display_letter(4, 0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000342 <.LVL46>:
    display_letter(9, 1);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	89 e0       	ldi	r24, 0x09	; 9
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000034c <.LVL47>:
    display_letter(16, 2);
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000356 <.LVL48>:
    display_letter(17, 3);
 356:	63 e0       	ldi	r22, 0x03	; 3
 358:	81 e1       	ldi	r24, 0x11	; 17
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000360 <.LVL49>:
}
 360:	08 95       	ret

00000362 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	83 e1       	ldi	r24, 0x13	; 19
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000036c <.LVL50>:
    display_letter(14, 1);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	8e e0       	ldi	r24, 0x0E	; 14
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000376 <.LVL51>:
    display_letter(1, 2);
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000380 <.LVL52>:
    display_letter(3, 3);
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000038a <.LVL53>:
}
 38a:	08 95       	ret

0000038c <display_mode>:
    if(mode){
 38c:	88 23       	and	r24, r24
 38e:	19 f0       	breq	.+6      	; 0x396 <.L22>

00000390 <.Loc.140>:
        display_fol();
 390:	0e 94 5d 01 	call	0x2ba	; 0x2ba <display_fol>

00000394 <.LVL55>:
 394:	08 95       	ret

00000396 <.L22>:
        display_pac();
 396:	0e 94 b1 01 	call	0x362	; 0x362 <display_pac>

0000039a <.LVL57>:
}
 39a:	08 95       	ret

0000039c <display_left>:

void display_left(void){
    display_letter(11, 0);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8b e0       	ldi	r24, 0x0B	; 11
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003a6 <.LVL58>:
    display_letter(5, 1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003b0 <.LVL59>:
    display_letter(6, 2);
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003ba <.LVL60>:
    display_letter(17, 3);
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e1       	ldi	r24, 0x11	; 17
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003c4 <.LVL61>:
}
 3c4:	08 95       	ret

000003c6 <display_rght>:

void display_rght(void){
    display_letter(15, 0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003d0 <.LVL62>:
    display_letter(7, 1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	87 e0       	ldi	r24, 0x07	; 7
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003da <.LVL63>:
    display_letter(8, 2);
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	88 e0       	ldi	r24, 0x08	; 8
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003e4 <.LVL64>:
    display_letter(17, 3);
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e1       	ldi	r24, 0x11	; 17
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003ee <.LVL65>:
}
 3ee:	08 95       	ret

000003f0 <display_direction>:
    if(dir){
 3f0:	88 23       	and	r24, r24
 3f2:	19 f0       	breq	.+6      	; 0x3fa <.L27>

000003f4 <.Loc.159>:
        display_rght();
 3f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <display_rght>

000003f8 <.LVL67>:
 3f8:	08 95       	ret

000003fa <.L27>:
        display_left();
 3fa:	0e 94 ce 01 	call	0x39c	; 0x39c <display_left>

000003fe <.LVL69>:
}
 3fe:	08 95       	ret

00000400 <display_go>:

void display_go(void){
    display_letter(19, 0);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	83 e1       	ldi	r24, 0x13	; 19
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000040a <.LVL70>:
    display_letter(19, 1);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	83 e1       	ldi	r24, 0x13	; 19
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000414 <.LVL71>:
    display_letter(7, 2);
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	87 e0       	ldi	r24, 0x07	; 7
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000041e <.LVL72>:
    display_letter(13, 3);
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000428 <.LVL73>:
}
 428:	08 95       	ret

0000042a <display_end>:

void display_end(void){
    display_letter(19, 0);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	83 e1       	ldi	r24, 0x13	; 19
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000434 <.LVL74>:
    display_letter(5, 1);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	85 e0       	ldi	r24, 0x05	; 5
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000043e <.LVL75>:
    display_letter(12, 2);
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000448 <.LVL76>:
    display_letter(4, 3);
 448:	63 e0       	ldi	r22, 0x03	; 3
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000452 <.LVL77>:
}
 452:	08 95       	ret

00000454 <display_srch>:

void display_srch(void){
    display_letter(16, 0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 e1       	ldi	r24, 0x10	; 16
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000045e <.LVL78>:
    display_letter(15, 1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	8f e0       	ldi	r24, 0x0F	; 15
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000468 <.LVL79>:
    display_letter(3, 2);
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000472 <.LVL80>:
    display_letter(8, 3);
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000047c <.LVL81>:
}
 47c:	08 95       	ret

0000047e <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	80 e1       	ldi	r24, 0x10	; 16
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000488 <.LVL82>:
    display_letter(17, 1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	81 e1       	ldi	r24, 0x11	; 17
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000492 <.LVL83>:
    display_letter(13, 2);
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	8d e0       	ldi	r24, 0x0D	; 13
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000049c <.LVL84>:
    display_letter(14, 3);
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000004a6 <.LVL85>:
}
 4a6:	08 95       	ret

000004a8 <interpreter>:
Signaal omhoog (vanuit AGV naar Module)
0x01: Klaar met opdracht, einde pad of einde bocht geen parameters nodig.
*/

void interpreter(){
    if(serialOntvangen[0]==0x01){    //commmando bewegen
 4a8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <serialOntvangen>
 4ac:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <serialOntvangen+0x1>
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <.L7>

000004b4 <.L2>:
            if(serialOntvangen[1]<0x7F)
                achteruit();
            if(serialOntvangen[1]==0x7F)
                stop();
    }
    if(serialOntvangen[0]==0x02){
 4b4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <serialOntvangen>
 4b8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <serialOntvangen+0x1>
 4bc:	02 97       	sbiw	r24, 0x02	; 2
 4be:	f9 f0       	breq	.+62     	; 0x4fe <.L8>

000004c0 <.L1>:
        if(serialOntvangen[1]==0x01)
            linksom();
        if(serialOntvangen[1]==0x02)
            rechtsom();
    }
}
 4c0:	08 95       	ret

000004c2 <.L7>:
            if(serialOntvangen[1]>0x7F)
 4c2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <serialOntvangen+0x2>
 4c6:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <serialOntvangen+0x3>
 4ca:	80 38       	cpi	r24, 0x80	; 128
 4cc:	91 05       	cpc	r25, r1
 4ce:	88 f4       	brcc	.+34     	; 0x4f2 <.L9>

000004d0 <.L3>:
            if(serialOntvangen[1]<0x7F)
 4d0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <serialOntvangen+0x2>
 4d4:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <serialOntvangen+0x3>
 4d8:	8f 37       	cpi	r24, 0x7F	; 127
 4da:	91 05       	cpc	r25, r1
 4dc:	68 f0       	brcs	.+26     	; 0x4f8 <.L10>

000004de <.L4>:
            if(serialOntvangen[1]==0x7F)
 4de:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <serialOntvangen+0x2>
 4e2:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <serialOntvangen+0x3>
 4e6:	8f 37       	cpi	r24, 0x7F	; 127
 4e8:	91 05       	cpc	r25, r1
 4ea:	21 f7       	brne	.-56     	; 0x4b4 <.L2>

000004ec <.Loc.12>:
                stop();
 4ec:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000004f0 <.LVL0>:
 4f0:	e1 cf       	rjmp	.-62     	; 0x4b4 <.L2>

000004f2 <.L9>:
                rechtdoor();
 4f2:	0e 94 c8 02 	call	0x590	; 0x590 <rechtdoor>

000004f6 <.LVL1>:
 4f6:	ec cf       	rjmp	.-40     	; 0x4d0 <.L3>

000004f8 <.L10>:
                achteruit();
 4f8:	0e 94 2a 03 	call	0x654	; 0x654 <achteruit>

000004fc <.LVL2>:
 4fc:	f0 cf       	rjmp	.-32     	; 0x4de <.L4>

000004fe <.L8>:
        if(serialOntvangen[1]==0x01)
 4fe:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <serialOntvangen+0x2>
 502:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <serialOntvangen+0x3>
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	49 f0       	breq	.+18     	; 0x51c <.L11>

0000050a <.L6>:
        if(serialOntvangen[1]==0x02)
 50a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <serialOntvangen+0x2>
 50e:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <serialOntvangen+0x3>
 512:	02 97       	sbiw	r24, 0x02	; 2
 514:	a9 f6       	brne	.-86     	; 0x4c0 <.L1>

00000516 <.Loc.19>:
            rechtsom();
 516:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rechtsom>

0000051a <.LVL3>:
}
 51a:	d2 cf       	rjmp	.-92     	; 0x4c0 <.L1>

0000051c <.L11>:
            linksom();
 51c:	0e 94 8c 03 	call	0x718	; 0x718 <linksom>

00000520 <.LVL4>:
 520:	f4 cf       	rjmp	.-24     	; 0x50a <.L6>

00000522 <main>:
#include "main.h"

int main(void)
{
    //initNoodstop();
    initStepper();
 522:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <initStepper>

00000526 <.LVL0>:
    init_ultrasoon();
 526:	0e 94 60 06 	call	0xcc0	; 0xcc0 <init_ultrasoon>

0000052a <.LVL1>:
    initUsart();
 52a:	0e 94 75 05 	call	0xaea	; 0xaea <initUsart>

0000052e <.LVL2>:
    flushUsart2Buffer();
 52e:	0e 94 ba 05 	call	0xb74	; 0xb74 <flushUsart2Buffer>

00000532 <.LVL3>:
    sei();
 532:	78 94       	sei

00000534 <.L2>:


    while(1);    //everything is automated using interrupts so no need for a main loop
 534:	ff cf       	rjmp	.-2      	; 0x534 <.L2>

00000536 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 536:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 53a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>
 53e:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <distance_right>
 542:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <distance_right+0x1>
 546:	82 0f       	add	r24, r18
 548:	93 1f       	adc	r25, r19

0000054a <.Loc.3>:
 54a:	0d 96       	adiw	r24, 0x0d	; 13

0000054c <.Loc.4>:
 54c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <padbreedte+0x1>
 550:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <padbreedte>

00000554 <.Loc.5>:
}
 554:	08 95       	ret

00000556 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(1150);
 556:	8e e7       	ldi	r24, 0x7E	; 126
 558:	94 e0       	ldi	r25, 0x04	; 4
 55a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

0000055e <.LVL0>:
    speedStepperRight(1150);
 55e:	8e e7       	ldi	r24, 0x7E	; 126
 560:	94 e0       	ldi	r25, 0x04	; 4
 562:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

00000566 <.LVL1>:
}
 566:	08 95       	ret

00000568 <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

00000570 <.LVL2>:
    speedStepperRight(0);
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

00000578 <.LVL3>:
}
 578:	08 95       	ret

0000057a <ramping>:

int ramping(int originalValue , int value){
 57a:	26 2f       	mov	r18, r22
 57c:	37 2f       	mov	r19, r23

0000057e <.Loc.16>:
    if(originalValue > value){
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	0c f4       	brge	.+2      	; 0x586 <.L5>

00000584 <.Loc.18>:
            originalValue --;
 584:	01 97       	sbiw	r24, 0x01	; 1

00000586 <.L5>:
    }
    if(originalValue < value){
 586:	82 17       	cp	r24, r18
 588:	93 07       	cpc	r25, r19
 58a:	0c f4       	brge	.+2      	; 0x58e <.L6>

0000058c <.Loc.22>:
            originalValue ++;
 58c:	01 96       	adiw	r24, 0x01	; 1

0000058e <.L6>:
    }
    return originalValue;
}
 58e:	08 95       	ret

00000590 <rechtdoor>:

void rechtdoor(void){
    stepperForward();
 590:	0e 94 6e 05 	call	0xadc	; 0xadc <stepperForward>

00000594 <.LVL7>:
    while(((distance_right<30)||(distance_left<30))&&(stopRequest==0)){ //while agv binnen pad
 594:	42 c0       	rjmp	.+132    	; 0x61a <.L8>

00000596 <.L15>:
        if (distance_right==distance_left) {
            speedStepperLeft(1150);
 596:	8e e7       	ldi	r24, 0x7E	; 126
 598:	94 e0       	ldi	r25, 0x04	; 4
 59a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

0000059e <.LVL8>:
            speedStepperRight(1150);
 59e:	8e e7       	ldi	r24, 0x7E	; 126
 5a0:	94 e0       	ldi	r25, 0x04	; 4
 5a2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

000005a6 <.LVL9>:
 5a6:	39 c0       	rjmp	.+114    	; 0x61a <.L8>

000005a8 <.L16>:
        }
        else{
            if (distance_right > distance_left){
                speedStepperLeft(ramping(1650, 1150));
 5a8:	81 e7       	ldi	r24, 0x71	; 113
 5aa:	96 e0       	ldi	r25, 0x06	; 6
 5ac:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

000005b0 <.LVL10>:
                speedStepperRight(ramping(1150, 1650));
 5b0:	8f e7       	ldi	r24, 0x7F	; 127
 5b2:	94 e0       	ldi	r25, 0x04	; 4
 5b4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

000005b8 <.LVL11>:
 5b8:	25 c0       	rjmp	.+74     	; 0x604 <.L11>

000005ba <.L17>:
            }
            if(distance_left > distance_right){
                speedStepperRight(ramping(1650, 1150));
 5ba:	81 e7       	ldi	r24, 0x71	; 113
 5bc:	96 e0       	ldi	r25, 0x06	; 6
 5be:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

000005c2 <.LVL12>:
                speedStepperLeft(ramping(1150, 1650));
 5c2:	8f e7       	ldi	r24, 0x7F	; 127
 5c4:	94 e0       	ldi	r25, 0x04	; 4
 5c6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

000005ca <.LVL13>:
 5ca:	27 c0       	rjmp	.+78     	; 0x61a <.L8>

000005cc <.L12>:
    while(((distance_right<30)||(distance_left<30))&&(stopRequest==0)){ //while agv binnen pad
 5cc:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stopRequest>
 5d0:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stopRequest+0x1>

000005d4 <.Loc.37>:
 5d4:	89 2b       	or	r24, r25
 5d6:	69 f5       	brne	.+90     	; 0x632 <.L13>

000005d8 <.Loc.38>:
        if (distance_right==distance_left) {
 5d8:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <distance_right>
 5dc:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <distance_right+0x1>
 5e0:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 5e4:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>

000005e8 <.Loc.40>:
 5e8:	28 17       	cp	r18, r24
 5ea:	39 07       	cpc	r19, r25
 5ec:	a1 f2       	breq	.-88     	; 0x596 <.L15>

000005ee <.Loc.41>:
            if (distance_right > distance_left){
 5ee:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <distance_right>
 5f2:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <distance_right+0x1>
 5f6:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 5fa:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>

000005fe <.Loc.43>:
 5fe:	82 17       	cp	r24, r18
 600:	93 07       	cpc	r25, r19
 602:	94 f2       	brlt	.-92     	; 0x5a8 <.L16>

00000604 <.L11>:
            if(distance_left > distance_right){
 604:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <distance_left>
 608:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <distance_left+0x1>
 60c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <distance_right>
 610:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <distance_right+0x1>

00000614 <.Loc.46>:
 614:	82 17       	cp	r24, r18
 616:	93 07       	cpc	r25, r19
 618:	84 f2       	brlt	.-96     	; 0x5ba <.L17>

0000061a <.L8>:
    while(((distance_right<30)||(distance_left<30))&&(stopRequest==0)){ //while agv binnen pad
 61a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <distance_right>
 61e:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <distance_right+0x1>

00000622 <.Loc.49>:
 622:	4e 97       	sbiw	r24, 0x1e	; 30
 624:	9c f2       	brlt	.-90     	; 0x5cc <.L12>

00000626 <.Loc.50>:
 626:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 62a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>

0000062e <.Loc.51>:
 62e:	4e 97       	sbiw	r24, 0x1e	; 30
 630:	6c f2       	brlt	.-102    	; 0x5cc <.L12>

00000632 <.L13>:
            }
        }
    }
    stop();
 632:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

00000636 <.LVL14>:
    stopRequest=0;
 636:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <stopRequest+0x1>
 63a:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <stopRequest>

0000063e <.Loc.55>:
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 89 05 	call	0xb12	; 0xb12 <sendCommand>

00000652 <.LVL15>:
}
 652:	08 95       	ret

00000654 <achteruit>:

void achteruit(void){
    stepperBackward();
 654:	0e 94 67 05 	call	0xace	; 0xace <stepperBackward>

00000658 <.LVL16>:
    while(((distance_right<30)||(distance_left<30))&&(stopRequest==0)){ //while agv binnen pad
 658:	42 c0       	rjmp	.+132    	; 0x6de <.L19>

0000065a <.L26>:
        if (distance_right==distance_left) {
            speedStepperLeft(1150);
 65a:	8e e7       	ldi	r24, 0x7E	; 126
 65c:	94 e0       	ldi	r25, 0x04	; 4
 65e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

00000662 <.LVL17>:
            speedStepperRight(1150);
 662:	8e e7       	ldi	r24, 0x7E	; 126
 664:	94 e0       	ldi	r25, 0x04	; 4
 666:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

0000066a <.LVL18>:
 66a:	39 c0       	rjmp	.+114    	; 0x6de <.L19>

0000066c <.L27>:
        }
        else{
            if (distance_right < distance_left){
                speedStepperLeft(ramping(1650, 1150));
 66c:	81 e7       	ldi	r24, 0x71	; 113
 66e:	96 e0       	ldi	r25, 0x06	; 6
 670:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

00000674 <.LVL19>:
                speedStepperRight(ramping(1150, 1650));
 674:	8f e7       	ldi	r24, 0x7F	; 127
 676:	94 e0       	ldi	r25, 0x04	; 4
 678:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

0000067c <.LVL20>:
 67c:	25 c0       	rjmp	.+74     	; 0x6c8 <.L22>

0000067e <.L28>:
            }
            if(distance_left < distance_right){
                speedStepperRight(ramping(1650, 1150));
 67e:	81 e7       	ldi	r24, 0x71	; 113
 680:	96 e0       	ldi	r25, 0x06	; 6
 682:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <speedStepperRight>

00000686 <.LVL21>:
                speedStepperLeft(ramping(1150, 1650));
 686:	8f e7       	ldi	r24, 0x7F	; 127
 688:	94 e0       	ldi	r25, 0x04	; 4
 68a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <speedStepperLeft>

0000068e <.LVL22>:
 68e:	27 c0       	rjmp	.+78     	; 0x6de <.L19>

00000690 <.L23>:
    while(((distance_right<30)||(distance_left<30))&&(stopRequest==0)){ //while agv binnen pad
 690:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stopRequest>
 694:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stopRequest+0x1>

00000698 <.Loc.68>:
 698:	89 2b       	or	r24, r25
 69a:	69 f5       	brne	.+90     	; 0x6f6 <.L24>

0000069c <.Loc.69>:
        if (distance_right==distance_left) {
 69c:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <distance_right>
 6a0:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <distance_right+0x1>
 6a4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 6a8:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>

000006ac <.Loc.71>:
 6ac:	28 17       	cp	r18, r24
 6ae:	39 07       	cpc	r19, r25
 6b0:	a1 f2       	breq	.-88     	; 0x65a <.L26>

000006b2 <.Loc.72>:
            if (distance_right < distance_left){
 6b2:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <distance_right>
 6b6:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <distance_right+0x1>
 6ba:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 6be:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>

000006c2 <.Loc.74>:
 6c2:	28 17       	cp	r18, r24
 6c4:	39 07       	cpc	r19, r25
 6c6:	94 f2       	brlt	.-92     	; 0x66c <.L27>

000006c8 <.L22>:
            if(distance_left < distance_right){
 6c8:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <distance_left>
 6cc:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <distance_left+0x1>
 6d0:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <distance_right>
 6d4:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <distance_right+0x1>

000006d8 <.Loc.77>:
 6d8:	28 17       	cp	r18, r24
 6da:	39 07       	cpc	r19, r25
 6dc:	84 f2       	brlt	.-96     	; 0x67e <.L28>

000006de <.L19>:
    while(((distance_right<30)||(distance_left<30))&&(stopRequest==0)){ //while agv binnen pad
 6de:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <distance_right>
 6e2:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <distance_right+0x1>

000006e6 <.Loc.80>:
 6e6:	4e 97       	sbiw	r24, 0x1e	; 30
 6e8:	9c f2       	brlt	.-90     	; 0x690 <.L23>

000006ea <.Loc.81>:
 6ea:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 6ee:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>

000006f2 <.Loc.82>:
 6f2:	4e 97       	sbiw	r24, 0x1e	; 30
 6f4:	6c f2       	brlt	.-102    	; 0x690 <.L23>

000006f6 <.L24>:
            }
        }
    }
    stop();
 6f6:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000006fa <.LVL23>:
    stopRequest=0;
 6fa:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <stopRequest+0x1>
 6fe:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <stopRequest>

00000702 <.Loc.86>:
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 89 05 	call	0xb12	; 0xb12 <sendCommand>

00000716 <.LVL24>:
}
 716:	08 95       	ret

00000718 <linksom>:

void linksom(void){
    enableStepCnt();
 718:	0e 94 51 05 	call	0xaa2	; 0xaa2 <enableStepCnt>

0000071c <.LVL25>:
    clearStepCnt();
 71c:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

00000720 <.LVL26>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 720:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 724:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 728:	84 3d       	cpi	r24, 0xD4	; 212
 72a:	97 41       	sbci	r25, 0x17	; 23
 72c:	48 f4       	brcc	.+18     	; 0x740 <.L30>

0000072e <.L31>:
        vooruit();
 72e:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000732 <.LVL27>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 732:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 736:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 73a:	84 3d       	cpi	r24, 0xD4	; 212
 73c:	97 41       	sbci	r25, 0x17	; 23
 73e:	b8 f3       	brcs	.-18     	; 0x72e <.L31>

00000740 <.L30>:
    }
    clearStepCnt();
 740:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

00000744 <.LVL28>:
    toggleStepperDirectionRight();
 744:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <toggleStepperDirectionRight>

00000748 <.LVL29>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 748:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 74c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 750:	8e 32       	cpi	r24, 0x2E	; 46
 752:	99 40       	sbci	r25, 0x09	; 9
 754:	48 f4       	brcc	.+18     	; 0x768 <.L32>

00000756 <.L33>:
        vooruit();
 756:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

0000075a <.LVL30>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 75a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 75e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 762:	8e 32       	cpi	r24, 0x2E	; 46
 764:	99 40       	sbci	r25, 0x09	; 9
 766:	b8 f3       	brcs	.-18     	; 0x756 <.L33>

00000768 <.L32>:
    }
    toggleStepperDirectionRight();
 768:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <toggleStepperDirectionRight>

0000076c <.LVL31>:
    clearStepCnt();
 76c:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

00000770 <.LVL32>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 770:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 774:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 778:	8c 37       	cpi	r24, 0x7C	; 124
 77a:	95 41       	sbci	r25, 0x15	; 21
 77c:	48 f4       	brcc	.+18     	; 0x790 <.L34>

0000077e <.L35>:
        vooruit();
 77e:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000782 <.LVL33>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 782:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 786:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 78a:	8c 37       	cpi	r24, 0x7C	; 124
 78c:	95 41       	sbci	r25, 0x15	; 21
 78e:	b8 f3       	brcs	.-18     	; 0x77e <.L35>

00000790 <.L34>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 790:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <toggleStepperDirectionRight>

00000794 <.LVL34>:
    clearStepCnt();
 794:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

00000798 <.LVL35>:
    while(stepCounterLeft<(2350)){
 798:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 79c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 7a0:	8e 32       	cpi	r24, 0x2E	; 46
 7a2:	99 40       	sbci	r25, 0x09	; 9
 7a4:	48 f4       	brcc	.+18     	; 0x7b8 <.L36>

000007a6 <.L37>:
        vooruit();
 7a6:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000007aa <.LVL36>:
    while(stepCounterLeft<(2350)){
 7aa:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 7ae:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 7b2:	8e 32       	cpi	r24, 0x2E	; 46
 7b4:	99 40       	sbci	r25, 0x09	; 9
 7b6:	b8 f3       	brcs	.-18     	; 0x7a6 <.L37>

000007b8 <.L36>:
    }
    toggleStepperDirectionRight();
 7b8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <toggleStepperDirectionRight>

000007bc <.LVL37>:
    clearStepCnt();
 7bc:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

000007c0 <.LVL38>:
    vooruit();
 7c0:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000007c4 <.LVL39>:
    while(distance_left>15){           //agv is in het volgende pad
 7c4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 7c8:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>
 7cc:	40 97       	sbiw	r24, 0x10	; 16
 7ce:	44 f0       	brlt	.+16     	; 0x7e0 <.L38>

000007d0 <.L39>:
        vooruit();
 7d0:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000007d4 <.LVL40>:
    while(distance_left>15){           //agv is in het volgende pad
 7d4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 7d8:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>
 7dc:	40 97       	sbiw	r24, 0x10	; 16
 7de:	c4 f7       	brge	.-16     	; 0x7d0 <.L39>

000007e0 <.L38>:
    }
    stop();
 7e0:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000007e4 <.LVL41>:
    disableStepCnt();
 7e4:	0e 94 5c 05 	call	0xab8	; 0xab8 <disableStepCnt>

000007e8 <.LVL42>:
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	50 e0       	ldi	r21, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 89 05 	call	0xb12	; 0xb12 <sendCommand>

000007fc <.LVL43>:
}
 7fc:	08 95       	ret

000007fe <rechtsom>:

void rechtsom(void){
    enableStepCnt();
 7fe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <enableStepCnt>

00000802 <.LVL44>:
    clearStepCnt();
 802:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

00000806 <.LVL45>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 806:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 80a:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 80e:	84 3d       	cpi	r24, 0xD4	; 212
 810:	97 41       	sbci	r25, 0x17	; 23
 812:	48 f4       	brcc	.+18     	; 0x826 <.L46>

00000814 <.L47>:
        vooruit();
 814:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000818 <.LVL46>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 818:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 81c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 820:	84 3d       	cpi	r24, 0xD4	; 212
 822:	97 41       	sbci	r25, 0x17	; 23
 824:	b8 f3       	brcs	.-18     	; 0x814 <.L47>

00000826 <.L46>:
    }
    clearStepCnt();
 826:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

0000082a <.LVL47>:
    toggleStepperDirectionLeft();
 82a:	0e 94 0a 05 	call	0xa14	; 0xa14 <toggleStepperDirectionLeft>

0000082e <.LVL48>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 82e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 832:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 836:	8e 32       	cpi	r24, 0x2E	; 46
 838:	99 40       	sbci	r25, 0x09	; 9
 83a:	48 f4       	brcc	.+18     	; 0x84e <.L48>

0000083c <.L49>:
        vooruit();
 83c:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000840 <.LVL49>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 840:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 844:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 848:	8e 32       	cpi	r24, 0x2E	; 46
 84a:	99 40       	sbci	r25, 0x09	; 9
 84c:	b8 f3       	brcs	.-18     	; 0x83c <.L49>

0000084e <.L48>:
    }
    toggleStepperDirectionLeft();
 84e:	0e 94 0a 05 	call	0xa14	; 0xa14 <toggleStepperDirectionLeft>

00000852 <.LVL50>:
    clearStepCnt();
 852:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

00000856 <.LVL51>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 856:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 85a:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 85e:	8c 37       	cpi	r24, 0x7C	; 124
 860:	95 41       	sbci	r25, 0x15	; 21
 862:	48 f4       	brcc	.+18     	; 0x876 <.L50>

00000864 <.L51>:
        vooruit();
 864:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000868 <.LVL52>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 868:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 86c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 870:	8c 37       	cpi	r24, 0x7C	; 124
 872:	95 41       	sbci	r25, 0x15	; 21
 874:	b8 f3       	brcs	.-18     	; 0x864 <.L51>

00000876 <.L50>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 876:	0e 94 0a 05 	call	0xa14	; 0xa14 <toggleStepperDirectionLeft>

0000087a <.LVL53>:
    clearStepCnt();
 87a:	0e 94 48 05 	call	0xa90	; 0xa90 <clearStepCnt>

0000087e <.LVL54>:
    while(stepCounterLeft<(2350)){
 87e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 882:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 886:	8e 32       	cpi	r24, 0x2E	; 46
 888:	99 40       	sbci	r25, 0x09	; 9
 88a:	48 f4       	brcc	.+18     	; 0x89e <.L52>

0000088c <.L53>:
        vooruit();
 88c:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000890 <.LVL55>:
    while(stepCounterLeft<(2350)){
 890:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 894:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 898:	8e 32       	cpi	r24, 0x2E	; 46
 89a:	99 40       	sbci	r25, 0x09	; 9
 89c:	b8 f3       	brcs	.-18     	; 0x88c <.L53>

0000089e <.L52>:
    }
    toggleStepperDirectionLeft();
 89e:	0e 94 0a 05 	call	0xa14	; 0xa14 <toggleStepperDirectionLeft>

000008a2 <.LVL56>:
    disableStepCnt();
 8a2:	0e 94 5c 05 	call	0xab8	; 0xab8 <disableStepCnt>

000008a6 <.LVL57>:
    vooruit();
 8a6:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000008aa <.LVL58>:
    while(distance_left>15){           //agv is in het volgende pad
 8aa:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 8ae:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>
 8b2:	40 97       	sbiw	r24, 0x10	; 16
 8b4:	44 f0       	brlt	.+16     	; 0x8c6 <.L54>

000008b6 <.L55>:
        vooruit();
 8b6:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000008ba <.LVL59>:
    while(distance_left>15){           //agv is in het volgende pad
 8ba:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance_left>
 8be:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <distance_left+0x1>
 8c2:	40 97       	sbiw	r24, 0x10	; 16
 8c4:	c4 f7       	brge	.-16     	; 0x8b6 <.L55>

000008c6 <.L54>:
    }
    stop();
 8c6:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000008ca <.LVL60>:
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 89 05 	call	0xb12	; 0xb12 <sendCommand>

000008de <.LVL61>:
}
 8de:	08 95       	ret

000008e0 <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 8e0:	50 98       	cbi	0x0a, 0	; 10

000008e2 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 8e2:	58 9a       	sbi	0x0b, 0	; 11

000008e4 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 8e4:	e8 9a       	sbi	0x1d, 0	; 29

000008e6 <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 8e6:	e9 e6       	ldi	r30, 0x69	; 105
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z

000008ec <.Loc.8>:
 8ec:	81 60       	ori	r24, 0x01	; 1
 8ee:	80 83       	st	Z, r24

000008f0 <.Loc.9>:
    sei();
 8f0:	78 94       	sei

000008f2 <.Loc.10>:
}
 8f2:	08 95       	ret

000008f4 <__vector_1>:

ISR(INT0_vect){
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	0b b6       	in	r0, 0x3b	; 59
 900:	0f 92       	push	r0
 902:	2f 93       	push	r18
 904:	3f 93       	push	r19
 906:	4f 93       	push	r20
 908:	5f 93       	push	r21
 90a:	6f 93       	push	r22
 90c:	7f 93       	push	r23
 90e:	8f 93       	push	r24
 910:	9f 93       	push	r25
 912:	af 93       	push	r26
 914:	bf 93       	push	r27
 916:	ef 93       	push	r30
 918:	ff 93       	push	r31

0000091a <.L5>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 91a:	48 9b       	sbis	0x09, 0	; 9
 91c:	04 c0       	rjmp	.+8      	; 0x926 <.L3>

0000091e <.L4>:
            stop();
 91e:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

00000922 <.LVL0>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 922:	48 99       	sbic	0x09, 0	; 9
 924:	fc cf       	rjmp	.-8      	; 0x91e <.L4>

00000926 <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 926:	06 99       	sbic	0x00, 6	; 0
 928:	f8 cf       	rjmp	.-16     	; 0x91a <.L5>

0000092a <.Loc.19>:
            //uitvoer();
            break;
        }
    }
}
 92a:	ff 91       	pop	r31
 92c:	ef 91       	pop	r30
 92e:	bf 91       	pop	r27
 930:	af 91       	pop	r26
 932:	9f 91       	pop	r25
 934:	8f 91       	pop	r24
 936:	7f 91       	pop	r23
 938:	6f 91       	pop	r22
 93a:	5f 91       	pop	r21
 93c:	4f 91       	pop	r20
 93e:	3f 91       	pop	r19
 940:	2f 91       	pop	r18
 942:	0f 90       	pop	r0
 944:	0b be       	out	0x3b, r0	; 59
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 950:	6b 9a       	sbi	0x0d, 3	; 13

00000952 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 952:	e1 e0       	ldi	r30, 0x01	; 1
 954:	f1 e0       	ldi	r31, 0x01	; 1
 956:	80 81       	ld	r24, Z

00000958 <.Loc.4>:
 958:	88 60       	ori	r24, 0x08	; 8
 95a:	80 83       	st	Z, r24

0000095c <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 95c:	9d 9a       	sbi	0x13, 5	; 19

0000095e <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 95e:	80 81       	ld	r24, Z

00000960 <.Loc.8>:
 960:	80 61       	ori	r24, 0x10	; 16
 962:	80 83       	st	Z, r24

00000964 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 964:	73 98       	cbi	0x0e, 3	; 14

00000966 <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 966:	e2 e0       	ldi	r30, 0x02	; 2
 968:	f1 e0       	ldi	r31, 0x01	; 1
 96a:	80 81       	ld	r24, Z
 96c:	87 7f       	andi	r24, 0xF7	; 247
 96e:	80 83       	st	Z, r24

00000970 <.Loc.13>:
	PORT_DIR_R |= (1<<DIRECTION_R);
 970:	a5 9a       	sbi	0x14, 5	; 20

00000972 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 972:	80 81       	ld	r24, Z
 974:	8f 7e       	andi	r24, 0xEF	; 239
 976:	80 83       	st	Z, r24

00000978 <.Loc.17>:
}
 978:	08 95       	ret

0000097a <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
 97a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

0000097e <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000984 <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
 984:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000988 <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 988:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000098c <.Loc.27>:
}
 98c:	08 95       	ret

0000098e <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
 98e:	82 e8       	ldi	r24, 0x82	; 130
 990:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000994 <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 994:	8a e1       	ldi	r24, 0x1A	; 26
 996:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

0000099a <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 9a2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

000009a6 <.Loc.35>:
    sei();
 9a6:	78 94       	sei

000009a8 <.Loc.36>:
}
 9a8:	08 95       	ret

000009aa <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
 9aa:	82 e8       	ldi	r24, 0x82	; 130
 9ac:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

000009b0 <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 9b0:	8a e1       	ldi	r24, 0x1A	; 26
 9b2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

000009b6 <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 9be:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

000009c2 <.Loc.44>:
    sei();
 9c2:	78 94       	sei

000009c4 <.Loc.45>:
}
 9c4:	08 95       	ret

000009c6 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 9c6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <initTimer4Stepper>

000009ca <.LVL0>:
    initTimer3Stepper();
 9ca:	0e 94 c7 04 	call	0x98e	; 0x98e <initTimer3Stepper>

000009ce <.LVL1>:
    initPinsStepper();
 9ce:	0e 94 a8 04 	call	0x950	; 0x950 <initPinsStepper>

000009d2 <.LVL2>:
}
 9d2:	08 95       	ret

000009d4 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 9d4:	28 2f       	mov	r18, r24
 9d6:	39 2f       	mov	r19, r25

000009d8 <.Loc.53>:
    ICR3 = PWMRight;
 9d8:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 9dc:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

000009e0 <.Loc.55>:
}
 9e0:	08 95       	ret

000009e2 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 9e2:	28 2f       	mov	r18, r24
 9e4:	39 2f       	mov	r19, r25

000009e6 <.Loc.58>:
    ICR4 = PWMLeft;
 9e6:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 9ea:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

000009ee <.Loc.60>:
}
 9ee:	08 95       	ret

000009f0 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 9f0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <state.1>
 9f4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <state.1+0x1>
 9f8:	89 2b       	or	r24, r25
 9fa:	41 f4       	brne	.+16     	; 0xa0c <.L9>

000009fc <.Loc.65>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 9fc:	a5 98       	cbi	0x14, 5	; 20

000009fe <.Loc.67>:
        state = 1;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0

00000a02 <.L10>:
 a02:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <state.1+0x1>
 a06:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <state.1>

00000a0a <.Loc.69>:
    }
    else{
        PORT_DIR_R |= (1<<DIRECTION_R);
        state = 0;
    }
}
 a0a:	08 95       	ret

00000a0c <.L9>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 a0c:	a5 9a       	sbi	0x14, 5	; 20

00000a0e <.Loc.72>:
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	f7 cf       	rjmp	.-18     	; 0xa02 <.L10>

00000a14 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 a14:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <state.0>
 a18:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <state.0+0x1>
 a1c:	89 2b       	or	r24, r25
 a1e:	61 f4       	brne	.+24     	; 0xa38 <.L12>

00000a20 <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 a20:	e2 e0       	ldi	r30, 0x02	; 2
 a22:	f1 e0       	ldi	r31, 0x01	; 1
 a24:	80 81       	ld	r24, Z

00000a26 <.Loc.79>:
 a26:	80 61       	ori	r24, 0x10	; 16
 a28:	80 83       	st	Z, r24

00000a2a <.Loc.80>:
        state = 1;
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	90 e0       	ldi	r25, 0x00	; 0

00000a2e <.L13>:
 a2e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <state.0+0x1>
 a32:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <state.0>

00000a36 <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 a36:	08 95       	ret

00000a38 <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 a38:	e2 e0       	ldi	r30, 0x02	; 2
 a3a:	f1 e0       	ldi	r31, 0x01	; 1
 a3c:	80 81       	ld	r24, Z
 a3e:	8f 7e       	andi	r24, 0xEF	; 239
 a40:	80 83       	st	Z, r24

00000a42 <.Loc.85>:
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	f3 cf       	rjmp	.-26     	; 0xa2e <.L13>

00000a48 <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 a48:	8f 93       	push	r24
 a4a:	8f b7       	in	r24, 0x3f	; 63
 a4c:	8f 93       	push	r24
 a4e:	9f 93       	push	r25

00000a50 <.Loc.88>:
    stepCounterLeft++;
 a50:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 a54:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <stepCounterLeft+0x1>
 a5e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <stepCounterLeft>

00000a62 <.Loc.90>:
}
 a62:	9f 91       	pop	r25
 a64:	8f 91       	pop	r24
 a66:	8f bf       	out	0x3f, r24	; 63
 a68:	8f 91       	pop	r24
 a6a:	18 95       	reti

00000a6c <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 a6c:	8f 93       	push	r24
 a6e:	8f b7       	in	r24, 0x3f	; 63
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25

00000a74 <.Loc.92>:
    stepCounterRight++;
 a74:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <stepCounterRight>
 a78:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <stepCounterRight+0x1>
 a7c:	01 96       	adiw	r24, 0x01	; 1
 a7e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <stepCounterRight+0x1>
 a82:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <stepCounterRight>

00000a86 <.Loc.94>:
}
 a86:	9f 91       	pop	r25
 a88:	8f 91       	pop	r24
 a8a:	8f bf       	out	0x3f, r24	; 63
 a8c:	8f 91       	pop	r24
 a8e:	18 95       	reti

00000a90 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 a90:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <stepCounterLeft+0x1>
 a94:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <stepCounterLeft>

00000a98 <.Loc.98>:
    stepCounterRight = 0;
 a98:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <stepCounterRight+0x1>
 a9c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <stepCounterRight>

00000aa0 <.Loc.100>:
}
 aa0:	08 95       	ret

00000aa2 <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
 aa2:	e2 e7       	ldi	r30, 0x72	; 114
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	80 81       	ld	r24, Z

00000aa8 <.Loc.103>:
 aa8:	81 60       	ori	r24, 0x01	; 1
 aaa:	80 83       	st	Z, r24

00000aac <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
 aac:	e1 e7       	ldi	r30, 0x71	; 113
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	80 81       	ld	r24, Z

00000ab2 <.Loc.105>:
 ab2:	81 60       	ori	r24, 0x01	; 1
 ab4:	80 83       	st	Z, r24

00000ab6 <.Loc.106>:
}
 ab6:	08 95       	ret

00000ab8 <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
 ab8:	e2 e7       	ldi	r30, 0x72	; 114
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	8e 7f       	andi	r24, 0xFE	; 254
 ac0:	80 83       	st	Z, r24

00000ac2 <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
 ac2:	e1 e7       	ldi	r30, 0x71	; 113
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	8e 7f       	andi	r24, 0xFE	; 254
 aca:	80 83       	st	Z, r24

00000acc <.Loc.112>:
}
 acc:	08 95       	ret

00000ace <stepperBackward>:

void stepperBackward(void){
    PORT_DIR_R &= ~(1<<DIRECTION_R);
 ace:	a5 98       	cbi	0x14, 5	; 20

00000ad0 <.Loc.116>:
	PORT_DIR_L |= (1<<DIRECTION_L);
 ad0:	e2 e0       	ldi	r30, 0x02	; 2
 ad2:	f1 e0       	ldi	r31, 0x01	; 1
 ad4:	80 81       	ld	r24, Z

00000ad6 <.Loc.117>:
 ad6:	80 61       	ori	r24, 0x10	; 16
 ad8:	80 83       	st	Z, r24

00000ada <.Loc.118>:
}
 ada:	08 95       	ret

00000adc <stepperForward>:

void stepperForward(void){
    PORT_DIR_R |= (1<<DIRECTION_R);
 adc:	a5 9a       	sbi	0x14, 5	; 20

00000ade <.Loc.122>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 ade:	e2 e0       	ldi	r30, 0x02	; 2
 ae0:	f1 e0       	ldi	r31, 0x01	; 1
 ae2:	80 81       	ld	r24, Z
 ae4:	8f 7e       	andi	r24, 0xEF	; 239
 ae6:	80 83       	st	Z, r24

00000ae8 <.Loc.124>:
}
 ae8:	08 95       	ret

00000aea <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 aea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

00000aee <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 aee:	87 e6       	ldi	r24, 0x67	; 103
 af0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

00000af4 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 af4:	88 e9       	ldi	r24, 0x98	; 152
 af6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

00000afa <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 afa:	86 e0       	ldi	r24, 0x06	; 6
 afc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

00000b00 <.Loc.9>:
}
 b00:	08 95       	ret

00000b02 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 b02:	e8 ec       	ldi	r30, 0xC8	; 200
 b04:	f0 e0       	ldi	r31, 0x00	; 0

00000b06 <.L3>:
 b06:	90 81       	ld	r25, Z
 b08:	95 ff       	sbrs	r25, 5
 b0a:	fd cf       	rjmp	.-6      	; 0xb06 <.L3>

00000b0c <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 b0c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000b10 <.Loc.17>:
}
 b10:	08 95       	ret

00000b12 <sendCommand>:

void sendCommand(int command, int parameter, int snelheid, int acceleratie){
 b12:	ef 92       	push	r14
 b14:	ff 92       	push	r15
 b16:	0f 93       	push	r16
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	00 d0       	rcall	.+0      	; 0xb20 <L0^A>

00000b20 <L0^A>:
 b20:	00 d0       	rcall	.+0      	; 0xb22 <L0^A>

00000b22 <L0^A>:
 b22:	0f 92       	push	r0
 b24:	0f 92       	push	r0
 b26:	cd b7       	in	r28, 0x3d	; 61
 b28:	de b7       	in	r29, 0x3e	; 62

00000b2a <.Loc.20>:
    int serialschrijven[4] = {command, parameter, snelheid, acceleratie}; // array serieel schrijven 0,1,2,3 (4 hex totaal)
 b2a:	9a 83       	std	Y+2, r25	; 0x02
 b2c:	89 83       	std	Y+1, r24	; 0x01
 b2e:	7c 83       	std	Y+4, r23	; 0x04
 b30:	6b 83       	std	Y+3, r22	; 0x03
 b32:	5e 83       	std	Y+6, r21	; 0x06
 b34:	4d 83       	std	Y+5, r20	; 0x05
 b36:	38 87       	std	Y+8, r19	; 0x08
 b38:	2f 83       	std	Y+7, r18	; 0x07

00000b3a <.LBB2>:
    for(int i = 0; i<4; i++){
 b3a:	8e 01       	movw	r16, r28
 b3c:	0f 5f       	subi	r16, 0xFF	; 255
 b3e:	1f 4f       	sbci	r17, 0xFF	; 255
 b40:	7e 01       	movw	r14, r28
 b42:	89 e0       	ldi	r24, 0x09	; 9
 b44:	e8 0e       	add	r14, r24
 b46:	f1 1c       	adc	r15, r1

00000b48 <.L6>:
        sendByte(serialschrijven[i]);
 b48:	f8 01       	movw	r30, r16
 b4a:	81 91       	ld	r24, Z+
 b4c:	91 91       	ld	r25, Z+
 b4e:	8f 01       	movw	r16, r30
 b50:	0e 94 81 05 	call	0xb02	; 0xb02 <sendByte>

00000b54 <.LVL4>:
    for(int i = 0; i<4; i++){
 b54:	0e 15       	cp	r16, r14
 b56:	1f 05       	cpc	r17, r15
 b58:	b9 f7       	brne	.-18     	; 0xb48 <.L6>

00000b5a <.LBE2>:
    }
}
 b5a:	28 96       	adiw	r28, 0x08	; 8
 b5c:	0f b6       	in	r0, 0x3f	; 63
 b5e:	f8 94       	cli
 b60:	de bf       	out	0x3e, r29	; 62
 b62:	0f be       	out	0x3f, r0	; 63
 b64:	cd bf       	out	0x3d, r28	; 61
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	1f 91       	pop	r17
 b6c:	0f 91       	pop	r16
 b6e:	ff 90       	pop	r15
 b70:	ef 90       	pop	r14
 b72:	08 95       	ret

00000b74 <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 b74:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 b78:	88 23       	and	r24, r24
 b7a:	44 f4       	brge	.+16     	; 0xb8c <.L8>

00000b7c <.Loc.33>:
        dummy = UDR1; // Read and discard
 b7c:	ae ec       	ldi	r26, 0xCE	; 206
 b7e:	b0 e0       	ldi	r27, 0x00	; 0

00000b80 <.Loc.34>:
    while (UCSR1A & (1 << RXC1)) {
 b80:	e8 ec       	ldi	r30, 0xC8	; 200
 b82:	f0 e0       	ldi	r31, 0x00	; 0

00000b84 <.L10>:
        dummy = UDR1; // Read and discard
 b84:	8c 91       	ld	r24, X

00000b86 <.Loc.37>:
    while (UCSR1A & (1 << RXC1)) {
 b86:	80 81       	ld	r24, Z
 b88:	88 23       	and	r24, r24
 b8a:	e4 f3       	brlt	.-8      	; 0xb84 <.L10>

00000b8c <.L8>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 b8c:	08 95       	ret

00000b8e <receiveByte>:

int receiveByte() { //ontvangen van 1 hex getal
    while ( !(UCSR1A & (1<<RXC1))); //Wait for data to be received
 b8e:	e8 ec       	ldi	r30, 0xC8	; 200
 b90:	f0 e0       	ldi	r31, 0x00	; 0

00000b92 <.L13>:
 b92:	80 81       	ld	r24, Z

00000b94 <.Loc.44>:
 b94:	88 23       	and	r24, r24
 b96:	ec f7       	brge	.-6      	; 0xb92 <.L13>

00000b98 <.Loc.45>:
    return UDR1;
 b98:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000b9c <.Loc.47>:
}
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	08 95       	ret

00000ba0 <__vector_36>:
unsigned int serialOntvangen[4];
volatile uint8_t serialBuffer[4];
volatile uint8_t serialIndex = 0;
volatile int stopRequest = 0;

ISR(USART1_RX_vect) {
 ba0:	1f 92       	push	r1
 ba2:	0f 92       	push	r0
 ba4:	0f b6       	in	r0, 0x3f	; 63
 ba6:	0f 92       	push	r0
 ba8:	11 24       	eor	r1, r1
 baa:	0b b6       	in	r0, 0x3b	; 59
 bac:	0f 92       	push	r0
 bae:	2f 93       	push	r18
 bb0:	3f 93       	push	r19
 bb2:	4f 93       	push	r20
 bb4:	5f 93       	push	r21
 bb6:	6f 93       	push	r22
 bb8:	7f 93       	push	r23
 bba:	8f 93       	push	r24
 bbc:	9f 93       	push	r25
 bbe:	af 93       	push	r26
 bc0:	bf 93       	push	r27
 bc2:	ef 93       	push	r30
 bc4:	ff 93       	push	r31

00000bc6 <.Loc.49>:
    uint8_t data = UDR1;
 bc6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000bca <.Loc.51>:

    serialBuffer[serialIndex++] = data;
 bca:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <serialIndex>
 bce:	91 e0       	ldi	r25, 0x01	; 1
 bd0:	9e 0f       	add	r25, r30
 bd2:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <serialIndex>
 bd6:	f0 e0       	ldi	r31, 0x00	; 0

00000bd8 <.Loc.53>:
 bd8:	e1 5d       	subi	r30, 0xD1	; 209
 bda:	fd 4f       	sbci	r31, 0xFD	; 253
 bdc:	80 83       	st	Z, r24

00000bde <.Loc.54>:

    if (serialIndex >= 4) {
 bde:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <serialIndex>

00000be2 <.Loc.56>:
 be2:	84 30       	cpi	r24, 0x04	; 4
 be4:	e8 f0       	brcs	.+58     	; 0xc20 <.L16>

00000be6 <.Loc.57>:
        serialIndex = 0;
 be6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <serialIndex>

00000bea <.LBB3>:
        for (int i = 0; i < 4; i++) {
            serialOntvangen[i] = serialBuffer[i];
 bea:	af e2       	ldi	r26, 0x2F	; 47
 bec:	b2 e0       	ldi	r27, 0x02	; 2
 bee:	8c 91       	ld	r24, X

00000bf0 <.Loc.64>:
 bf0:	e3 e3       	ldi	r30, 0x33	; 51
 bf2:	f2 e0       	ldi	r31, 0x02	; 2

00000bf4 <.Loc.65>:
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	91 83       	std	Z+1, r25	; 0x01
 bf8:	80 83       	st	Z, r24

00000bfa <.Loc.66>:
 bfa:	11 96       	adiw	r26, 0x01	; 1
 bfc:	8c 91       	ld	r24, X
 bfe:	11 97       	sbiw	r26, 0x01	; 1
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	93 83       	std	Z+3, r25	; 0x03
 c04:	82 83       	std	Z+2, r24	; 0x02

00000c06 <.Loc.70>:
 c06:	12 96       	adiw	r26, 0x02	; 2
 c08:	8c 91       	ld	r24, X
 c0a:	12 97       	sbiw	r26, 0x02	; 2
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	95 83       	std	Z+5, r25	; 0x05
 c10:	84 83       	std	Z+4, r24	; 0x04

00000c12 <.Loc.74>:
 c12:	13 96       	adiw	r26, 0x03	; 3
 c14:	8c 91       	ld	r24, X
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	97 83       	std	Z+7, r25	; 0x07
 c1a:	86 83       	std	Z+6, r24	; 0x06

00000c1c <.LBE3>:
        }
        interpreter();  // Process once full command is received
 c1c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <interpreter>

00000c20 <.L16>:
    }
    if(serialOntvangen[0]==0xFF){
 c20:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <serialOntvangen>
 c24:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <serialOntvangen+0x1>
 c28:	8f 3f       	cpi	r24, 0xFF	; 255
 c2a:	91 05       	cpc	r25, r1
 c2c:	99 f0       	breq	.+38     	; 0xc54 <.L18>

00000c2e <.L15>:
        stopRequest = 1;
    }
}
 c2e:	ff 91       	pop	r31
 c30:	ef 91       	pop	r30
 c32:	bf 91       	pop	r27
 c34:	af 91       	pop	r26
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	7f 91       	pop	r23
 c3c:	6f 91       	pop	r22
 c3e:	5f 91       	pop	r21
 c40:	4f 91       	pop	r20
 c42:	3f 91       	pop	r19
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0b be       	out	0x3b, r0	; 59
 c4a:	0f 90       	pop	r0
 c4c:	0f be       	out	0x3f, r0	; 63
 c4e:	0f 90       	pop	r0
 c50:	1f 90       	pop	r1
 c52:	18 95       	reti

00000c54 <.L18>:
        stopRequest = 1;
 c54:	81 e0       	ldi	r24, 0x01	; 1
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <stopRequest+0x1>
 c5c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <stopRequest>

00000c60 <.Loc.86>:
}
 c60:	e6 cf       	rjmp	.-52     	; 0xc2e <.L15>

00000c62 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 c62:	8b e2       	ldi	r24, 0x2B	; 43
 c64:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000c68 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 c68:	8a e5       	ldi	r24, 0x5A	; 90
 c6a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000c6e <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 c6e:	81 e2       	ldi	r24, 0x21	; 33
 c70:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000c74 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 c74:	8f ef       	ldi	r24, 0xFF	; 255
 c76:	9f ef       	ldi	r25, 0xFF	; 255
 c78:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 c7c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

00000c80 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 c80:	84 e1       	ldi	r24, 0x14	; 20
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 c88:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000c8c <.Loc.11>:
    OCR5C = 20;
 c8c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 c90:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000c94 <.Loc.13>:
    //set enable interrupt
    sei();
 c94:	78 94       	sei

00000c96 <.Loc.14>:
}
 c96:	08 95       	ret

00000c98 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 c98:	ea e0       	ldi	r30, 0x0A	; 10
 c9a:	f1 e0       	ldi	r31, 0x01	; 1
 c9c:	80 81       	ld	r24, Z

00000c9e <.Loc.17>:
 c9e:	80 61       	ori	r24, 0x10	; 16
 ca0:	80 83       	st	Z, r24

00000ca2 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 ca2:	80 81       	ld	r24, Z

00000ca4 <.Loc.19>:
 ca4:	80 62       	ori	r24, 0x20	; 32
 ca6:	80 83       	st	Z, r24

00000ca8 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 ca8:	ab e0       	ldi	r26, 0x0B	; 11
 caa:	b1 e0       	ldi	r27, 0x01	; 1
 cac:	8c 91       	ld	r24, X
 cae:	8f 7e       	andi	r24, 0xEF	; 239
 cb0:	8c 93       	st	X, r24

00000cb2 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 cb2:	8c 91       	ld	r24, X
 cb4:	8f 7d       	andi	r24, 0xDF	; 223
 cb6:	8c 93       	st	X, r24

00000cb8 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 cb8:	80 81       	ld	r24, Z
 cba:	8d 7f       	andi	r24, 0xFD	; 253
 cbc:	80 83       	st	Z, r24

00000cbe <.Loc.26>:
}
 cbe:	08 95       	ret

00000cc0 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 cc0:	0e 94 4c 06 	call	0xc98	; 0xc98 <init_pins_ultrasoon>

00000cc4 <.LVL0>:
    init_timer5();
 cc4:	0e 94 31 06 	call	0xc62	; 0xc62 <init_timer5>

00000cc8 <.LVL1>:
}
 cc8:	08 95       	ret

00000cca <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 cca:	8f 93       	push	r24
 ccc:	8f b7       	in	r24, 0x3f	; 63
 cce:	8f 93       	push	r24
 cd0:	8b b7       	in	r24, 0x3b	; 59
 cd2:	8f 93       	push	r24
 cd4:	ef 93       	push	r30
 cd6:	ff 93       	push	r31

00000cd8 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 cd8:	e1 e2       	ldi	r30, 0x21	; 33
 cda:	f1 e0       	ldi	r31, 0x01	; 1
 cdc:	80 81       	ld	r24, Z

00000cde <.Loc.33>:
 cde:	80 64       	ori	r24, 0x40	; 64
 ce0:	80 83       	st	Z, r24

00000ce2 <.Loc.34>:
}
 ce2:	ff 91       	pop	r31
 ce4:	ef 91       	pop	r30
 ce6:	8f 91       	pop	r24
 ce8:	8b bf       	out	0x3b, r24	; 59
 cea:	8f 91       	pop	r24
 cec:	8f bf       	out	0x3f, r24	; 63
 cee:	8f 91       	pop	r24
 cf0:	18 95       	reti

00000cf2 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 cf2:	0f 92       	push	r0
 cf4:	0f b6       	in	r0, 0x3f	; 63
 cf6:	0f 92       	push	r0
 cf8:	1f 92       	push	r1
 cfa:	11 24       	eor	r1, r1
 cfc:	2f 93       	push	r18
 cfe:	2b b7       	in	r18, 0x3b	; 59
 d00:	2f 93       	push	r18
 d02:	3f 93       	push	r19
 d04:	6f 93       	push	r22
 d06:	7f 93       	push	r23
 d08:	8f 93       	push	r24
 d0a:	9f 93       	push	r25
 d0c:	af 93       	push	r26
 d0e:	bf 93       	push	r27
 d10:	ef 93       	push	r30
 d12:	ff 93       	push	r31

00000d14 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 d14:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000d18 <.Loc.39>:
 d18:	86 ff       	sbrs	r24, 6
 d1a:	1e c0       	rjmp	.+60     	; 0xd58 <.L6>

00000d1c <.Loc.40>:
        start_time = ICR5;
 d1c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 d20:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000d24 <.Loc.42>:
 d24:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <start_time.0+0x1>
 d28:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <start_time.0>

00000d2c <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 d2c:	e1 e2       	ldi	r30, 0x21	; 33
 d2e:	f1 e0       	ldi	r31, 0x01	; 1
 d30:	80 81       	ld	r24, Z
 d32:	8f 7b       	andi	r24, 0xBF	; 191
 d34:	80 83       	st	Z, r24

00000d36 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 d36:	ff 91       	pop	r31
 d38:	ef 91       	pop	r30
 d3a:	bf 91       	pop	r27
 d3c:	af 91       	pop	r26
 d3e:	9f 91       	pop	r25
 d40:	8f 91       	pop	r24
 d42:	7f 91       	pop	r23
 d44:	6f 91       	pop	r22
 d46:	3f 91       	pop	r19
 d48:	2f 91       	pop	r18
 d4a:	2b bf       	out	0x3b, r18	; 59
 d4c:	2f 91       	pop	r18
 d4e:	1f 90       	pop	r1
 d50:	0f 90       	pop	r0
 d52:	0f be       	out	0x3f, r0	; 63
 d54:	0f 90       	pop	r0
 d56:	18 95       	reti

00000d58 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 d58:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 d5c:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000d60 <.Loc.48>:
 d60:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <start_time.0>
 d64:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <start_time.0+0x1>
 d68:	28 1b       	sub	r18, r24
 d6a:	39 0b       	sbc	r19, r25

00000d6c <.Loc.49>:
 d6c:	a9 e0       	ldi	r26, 0x09	; 9
 d6e:	bc e8       	ldi	r27, 0x8C	; 140
 d70:	0e 94 08 07 	call	0xe10	; 0xe10 <__umulhisi3>
 d74:	00 24       	eor	r0, r0
 d76:	88 0f       	add	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	00 1c       	adc	r0, r0
 d7c:	88 0f       	add	r24, r24
 d7e:	99 1f       	adc	r25, r25
 d80:	00 1c       	adc	r0, r0
 d82:	89 2f       	mov	r24, r25
 d84:	90 2d       	mov	r25, r0

00000d86 <.Loc.50>:
        if (current_sensor == 0) {
 d86:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <current_sensor>
 d8a:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <current_sensor+0x1>

00000d8e <.Loc.52>:
 d8e:	23 2b       	or	r18, r19
 d90:	c9 f4       	brne	.+50     	; 0xdc4 <.L8>

00000d92 <.Loc.53>:
            distance_right = distance;  // Store distance for Sensor A
 d92:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <distance_right+0x1>
 d96:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <distance_right>

00000d9a <.L9>:
        if (current_sensor == 0) {
 d9a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <current_sensor>
 d9e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <current_sensor+0x1>

00000da2 <.Loc.57>:
 da2:	89 2b       	or	r24, r25
 da4:	a1 f4       	brne	.+40     	; 0xdce <.L10>

00000da6 <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <current_sensor+0x1>
 dae:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <current_sensor>

00000db2 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 db2:	e0 e2       	ldi	r30, 0x20	; 32
 db4:	f1 e0       	ldi	r31, 0x01	; 1
 db6:	80 81       	ld	r24, Z
 db8:	87 7f       	andi	r24, 0xF7	; 247
 dba:	80 83       	st	Z, r24

00000dbc <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 dbc:	80 81       	ld	r24, Z

00000dbe <.Loc.63>:
 dbe:	80 62       	ori	r24, 0x20	; 32
 dc0:	80 83       	st	Z, r24
 dc2:	b9 cf       	rjmp	.-142    	; 0xd36 <.L5>

00000dc4 <.L8>:
            distance_left = distance;  // Store distance for Sensor B
 dc4:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <distance_left+0x1>
 dc8:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <distance_left>
 dcc:	e6 cf       	rjmp	.-52     	; 0xd9a <.L9>

00000dce <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 dce:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <current_sensor+0x1>
 dd2:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <current_sensor>

00000dd6 <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 dd6:	e0 e2       	ldi	r30, 0x20	; 32
 dd8:	f1 e0       	ldi	r31, 0x01	; 1
 dda:	80 81       	ld	r24, Z
 ddc:	8f 7d       	andi	r24, 0xDF	; 223
 dde:	80 83       	st	Z, r24

00000de0 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 de0:	80 81       	ld	r24, Z

00000de2 <.Loc.71>:
 de2:	88 60       	ori	r24, 0x08	; 8
 de4:	80 83       	st	Z, r24

00000de6 <.LBE2>:
}
 de6:	a7 cf       	rjmp	.-178    	; 0xd36 <.L5>

00000de8 <__divmodhi4>:
 de8:	97 fb       	bst	r25, 7

00000dea <.Loc.1>:
 dea:	07 2e       	mov	r0, r23

00000dec <.Loc.2>:
 dec:	16 f4       	brtc	.+4      	; 0xdf2 <.L^B1>

00000dee <.Loc.3>:
 dee:	00 94       	com	r0

00000df0 <.Loc.4>:
 df0:	07 d0       	rcall	.+14     	; 0xe00 <__divmodhi4_neg1>

00000df2 <.L^B1>:
 df2:	77 fd       	sbrc	r23, 7

00000df4 <.Loc.6>:
 df4:	09 d0       	rcall	.+18     	; 0xe08 <__divmodhi4_neg2>

00000df6 <.Loc.7>:
 df6:	0e 94 17 07 	call	0xe2e	; 0xe2e <__udivmodhi4>

00000dfa <.Loc.8>:
 dfa:	07 fc       	sbrc	r0, 7

00000dfc <.Loc.9>:
 dfc:	05 d0       	rcall	.+10     	; 0xe08 <__divmodhi4_neg2>

00000dfe <.Loc.10>:
 dfe:	3e f4       	brtc	.+14     	; 0xe0e <__divmodhi4_exit>

00000e00 <__divmodhi4_neg1>:
 e00:	90 95       	com	r25

00000e02 <.Loc.12>:
 e02:	81 95       	neg	r24

00000e04 <.Loc.13>:
 e04:	9f 4f       	sbci	r25, 0xFF	; 255

00000e06 <.Loc.14>:
 e06:	08 95       	ret

00000e08 <__divmodhi4_neg2>:
 e08:	70 95       	com	r23

00000e0a <.Loc.16>:
 e0a:	61 95       	neg	r22

00000e0c <.Loc.17>:
 e0c:	7f 4f       	sbci	r23, 0xFF	; 255

00000e0e <__divmodhi4_exit>:
 e0e:	08 95       	ret

00000e10 <__umulhisi3>:
 e10:	a2 9f       	mul	r26, r18

00000e12 <.Loc.1>:
 e12:	b0 01       	movw	r22, r0

00000e14 <.Loc.2>:
 e14:	b3 9f       	mul	r27, r19

00000e16 <.Loc.3>:
 e16:	c0 01       	movw	r24, r0

00000e18 <.Loc.4>:
 e18:	a3 9f       	mul	r26, r19

00000e1a <.Loc.5>:
 e1a:	70 0d       	add	r23, r0

00000e1c <.Loc.6>:
 e1c:	81 1d       	adc	r24, r1

00000e1e <.Loc.7>:
 e1e:	11 24       	eor	r1, r1

00000e20 <.Loc.8>:
 e20:	91 1d       	adc	r25, r1

00000e22 <.Loc.9>:
 e22:	b2 9f       	mul	r27, r18

00000e24 <.Loc.10>:
 e24:	70 0d       	add	r23, r0

00000e26 <.Loc.11>:
 e26:	81 1d       	adc	r24, r1

00000e28 <.Loc.12>:
 e28:	11 24       	eor	r1, r1

00000e2a <.Loc.13>:
 e2a:	91 1d       	adc	r25, r1

00000e2c <.Loc.14>:
 e2c:	08 95       	ret

00000e2e <__udivmodhi4>:
 e2e:	aa 1b       	sub	r26, r26

00000e30 <.Loc.1>:
 e30:	bb 1b       	sub	r27, r27

00000e32 <.Loc.2>:
 e32:	51 e1       	ldi	r21, 0x11	; 17

00000e34 <.Loc.3>:
 e34:	07 c0       	rjmp	.+14     	; 0xe44 <__udivmodhi4_ep>

00000e36 <__udivmodhi4_loop>:
 e36:	aa 1f       	adc	r26, r26

00000e38 <.Loc.5>:
 e38:	bb 1f       	adc	r27, r27

00000e3a <.Loc.6>:
 e3a:	a6 17       	cp	r26, r22

00000e3c <.Loc.7>:
 e3c:	b7 07       	cpc	r27, r23

00000e3e <.Loc.8>:
 e3e:	10 f0       	brcs	.+4      	; 0xe44 <__udivmodhi4_ep>

00000e40 <.Loc.9>:
 e40:	a6 1b       	sub	r26, r22

00000e42 <.Loc.10>:
 e42:	b7 0b       	sbc	r27, r23

00000e44 <__udivmodhi4_ep>:
 e44:	88 1f       	adc	r24, r24

00000e46 <.Loc.12>:
 e46:	99 1f       	adc	r25, r25

00000e48 <.Loc.13>:
 e48:	5a 95       	dec	r21

00000e4a <.Loc.14>:
 e4a:	a9 f7       	brne	.-22     	; 0xe36 <__udivmodhi4_loop>

00000e4c <.Loc.15>:
 e4c:	80 95       	com	r24

00000e4e <.Loc.16>:
 e4e:	90 95       	com	r25

00000e50 <.Loc.17>:
 e50:	bc 01       	movw	r22, r24

00000e52 <.Loc.18>:
 e52:	cd 01       	movw	r24, r26

00000e54 <.Loc.19>:
 e54:	08 95       	ret

00000e56 <_exit>:
 e56:	f8 94       	cli

00000e58 <__stop_program>:
 e58:	ff cf       	rjmp	.-2      	; 0xe58 <__stop_program>
