
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00001438  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001438  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800222  00800222  0000150e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000218  00000000  00000000  00001568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00002c5c  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000013a1  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00002798  00000000  00000000  0000577d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000648  00000000  00000000  00007f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000a50  00000000  00000000  00008560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000214  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000001e0  00000000  00000000  000091c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001f  00000000  00000000  000093a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__vector_1>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_35>
      90:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_36>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_45>
      b8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_46>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_50>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e8 e3       	ldi	r30, 0x38	; 56

000000fc <.Loc.4>:
      fc:	f4 e1       	ldi	r31, 0x14	; 20

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	ae 33       	cpi	r26, 0x3E	; 62

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <main>
     122:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initSerialCom>:
#include "Debugging.h"

///serial com for debugging
void initSerialCom(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr >> 8);
     12a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

0000012e <.Loc.3>:
    UBRR0L = (unsigned char)ubrr;
     12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

00000132 <.Loc.5>:

    // Enable transmitter
    UCSR0B = (1 << TXEN0);
     132:	88 e0       	ldi	r24, 0x08	; 8

00000134 <.Loc.7>:
     134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

00000138 <.Loc.8>:

    // Set frame format: 8data, 1stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     138:	86 e0       	ldi	r24, 0x06	; 6
     13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

0000013e <.Loc.10>:
}
     13e:	08 95       	ret

00000140 <SerialComTransmit>:

void SerialComTransmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)));
     140:	e0 ec       	ldi	r30, 0xC0	; 192
     142:	f0 e0       	ldi	r31, 0x00	; 0

00000144 <.L3>:
     144:	90 81       	ld	r25, Z

00000146 <.Loc.16>:
     146:	95 ff       	sbrs	r25, 5
     148:	fd cf       	rjmp	.-6      	; 0x144 <.L3>

0000014a <.Loc.17>:
    // Put data into buffer, sends the data
    UDR0 = data;
     14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

0000014e <.Loc.19>:
}
     14e:	08 95       	ret

00000150 <Serialprint>:

void Serialprint(const char *s) {
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	c8 2f       	mov	r28, r24
     156:	d9 2f       	mov	r29, r25

00000158 <.Loc.22>:
    while (*s) {
     158:	88 81       	ld	r24, Y
     15a:	88 23       	and	r24, r24
     15c:	31 f0       	breq	.+12     	; 0x16a <.L5>
     15e:	21 96       	adiw	r28, 0x01	; 1

00000160 <.L7>:
        SerialComTransmit(*s++);
     160:	0e 94 a0 00 	call	0x140	; 0x140 <SerialComTransmit>

00000164 <.LVL6>:
    while (*s) {
     164:	89 91       	ld	r24, Y+

00000166 <.Loc.27>:
     166:	81 11       	cpse	r24, r1
     168:	fb cf       	rjmp	.-10     	; 0x160 <.L7>

0000016a <.L5>:
    }
}
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
     170:	ea e0       	ldi	r30, 0x0A	; 10
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	80 81       	ld	r24, Z

00000176 <.Loc.2>:
     176:	80 68       	ori	r24, 0x80	; 128
     178:	80 83       	st	Z, r24

0000017a <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
     17a:	eb e0       	ldi	r30, 0x0B	; 11
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	80 81       	ld	r24, Z

00000180 <.Loc.4>:
     180:	80 68       	ori	r24, 0x80	; 128
     182:	80 83       	st	Z, r24

00000184 <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
     184:	80 81       	ld	r24, Z

00000186 <.Loc.6>:
     186:	80 64       	ori	r24, 0x40	; 64
     188:	80 83       	st	Z, r24

0000018a <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
     18a:	80 81       	ld	r24, Z
     18c:	8f 77       	andi	r24, 0x7F	; 127
     18e:	80 83       	st	Z, r24

00000190 <.Loc.9>:
}
     190:	08 95       	ret

00000192 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
     192:	ea e0       	ldi	r30, 0x0A	; 10
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	80 81       	ld	r24, Z

00000198 <.Loc.12>:
     198:	80 68       	ori	r24, 0x80	; 128
     19a:	80 83       	st	Z, r24

0000019c <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
     19c:	eb e0       	ldi	r30, 0x0B	; 11
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	80 81       	ld	r24, Z
     1a2:	8f 7b       	andi	r24, 0xBF	; 191
     1a4:	80 83       	st	Z, r24

000001a6 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
     1a6:	80 81       	ld	r24, Z

000001a8 <.Loc.16>:
     1a8:	80 64       	ori	r24, 0x40	; 64
     1aa:	80 83       	st	Z, r24

000001ac <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
     1ac:	80 81       	ld	r24, Z

000001ae <.Loc.18>:
     1ae:	80 68       	ori	r24, 0x80	; 128
     1b0:	80 83       	st	Z, r24

000001b2 <.Loc.19>:
}
     1b2:	08 95       	ret

000001b4 <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
     1b4:	ea e0       	ldi	r30, 0x0A	; 10
     1b6:	f1 e0       	ldi	r31, 0x01	; 1
     1b8:	90 81       	ld	r25, Z

000001ba <.Loc.22>:
     1ba:	90 68       	ori	r25, 0x80	; 128
     1bc:	90 83       	st	Z, r25

000001be <.Loc.23>:
     1be:	28 e0       	ldi	r18, 0x08	; 8
     1c0:	30 e0       	ldi	r19, 0x00	; 0

000001c2 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
     1c2:	eb e0       	ldi	r30, 0x0B	; 11
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <.L6>

000001c8 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
     1c8:	90 81       	ld	r25, Z
     1ca:	9f 77       	andi	r25, 0x7F	; 127
     1cc:	90 83       	st	Z, r25

000001ce <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
     1ce:	90 81       	ld	r25, Z

000001d0 <.Loc.31>:
     1d0:	90 64       	ori	r25, 0x40	; 64
     1d2:	90 83       	st	Z, r25

000001d4 <.Loc.32>:
        data >>= 1;
     1d4:	86 95       	lsr	r24

000001d6 <.Loc.34>:
    for(int i = 0; i < 8; i++){
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	31 09       	sbc	r19, r1

000001da <.Loc.36>:
     1da:	21 15       	cp	r18, r1
     1dc:	31 05       	cpc	r19, r1
     1de:	49 f0       	breq	.+18     	; 0x1f2 <.L8>

000001e0 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
     1e0:	90 81       	ld	r25, Z
     1e2:	9f 7b       	andi	r25, 0xBF	; 191
     1e4:	90 83       	st	Z, r25

000001e6 <.Loc.39>:
        if(data & 0x01){
     1e6:	80 ff       	sbrs	r24, 0
     1e8:	ef cf       	rjmp	.-34     	; 0x1c8 <.L4>

000001ea <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
     1ea:	90 81       	ld	r25, Z

000001ec <.Loc.42>:
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	90 83       	st	Z, r25
     1f0:	ee cf       	rjmp	.-36     	; 0x1ce <.L5>

000001f2 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
     1f2:	eb e0       	ldi	r30, 0x0B	; 11
     1f4:	f1 e0       	ldi	r31, 0x01	; 1
     1f6:	80 81       	ld	r24, Z

000001f8 <.Loc.46>:
     1f8:	8f 7b       	andi	r24, 0xBF	; 191
     1fa:	80 83       	st	Z, r24

000001fc <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
     1fc:	80 81       	ld	r24, Z

000001fe <.Loc.48>:
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24

00000202 <.Loc.49>:
}
     202:	08 95       	ret

00000204 <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
     204:	cf 93       	push	r28
     206:	c8 2f       	mov	r28, r24

00000208 <.Loc.52>:
    display_start();
     208:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

0000020c <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
     20c:	8c 2f       	mov	r24, r28
     20e:	87 70       	andi	r24, 0x07	; 7
     210:	88 68       	ori	r24, 0x88	; 136
     212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000216 <.LVL9>:
    display_stop();
     216:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000021a <.LVL10>:
}
     21a:	cf 91       	pop	r28

0000021c <.Loc.56>:
     21c:	08 95       	ret

0000021e <display_number>:

// Display 4 digit integer
void display_number(int number){
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	d8 2f       	mov	r29, r24
     22a:	c9 2f       	mov	r28, r25

0000022c <.Loc.59>:
    display_start();
     22c:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

00000230 <.LVL13>:
    display_sendbyte(0x40);
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000236 <.LVL14>:
    display_stop();
     236:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000023a <.LVL15>:
     23a:	13 ec       	ldi	r17, 0xC3	; 195

0000023c <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
     23c:	0f 2e       	mov	r0, r31
     23e:	fa e0       	ldi	r31, 0x0A	; 10
     240:	ef 2e       	mov	r14, r31
     242:	f1 2c       	mov	r15, r1
     244:	f0 2d       	mov	r31, r0

00000246 <.L11>:
        display_start();
     246:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

0000024a <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
     24a:	81 2f       	mov	r24, r17
     24c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000250 <.LVL18>:
        display_sendbyte(digits[number%10]);
     250:	8d 2f       	mov	r24, r29
     252:	9c 2f       	mov	r25, r28
     254:	b7 01       	movw	r22, r14
     256:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__divmodhi4>
     25a:	d6 2f       	mov	r29, r22

0000025c <.Loc.71>:
     25c:	c7 2f       	mov	r28, r23

0000025e <.Loc.72>:
     25e:	fc 01       	movw	r30, r24
     260:	ec 5e       	subi	r30, 0xEC	; 236
     262:	fd 4f       	sbci	r31, 0xFD	; 253

00000264 <.Loc.73>:
     264:	80 81       	ld	r24, Z
     266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

0000026a <.LVL20>:
        number /= 10;
        display_stop();
     26a:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000026e <.LVL21>:
    for (int i = 0; i < 4; i++) {
     26e:	11 50       	subi	r17, 0x01	; 1
     270:	1f 3b       	cpi	r17, 0xBF	; 191
     272:	49 f7       	brne	.-46     	; 0x246 <.L11>

00000274 <.Loc.78>:
    }
}
     274:	df 91       	pop	r29

00000276 <.Loc.79>:
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	08 95       	ret

00000280 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	c8 2f       	mov	r28, r24
     288:	d9 2f       	mov	r29, r25
     28a:	16 2f       	mov	r17, r22

0000028c <.Loc.82>:
    display_start();
     28c:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

00000290 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
     290:	80 ec       	ldi	r24, 0xC0	; 192
     292:	81 0f       	add	r24, r17
     294:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000298 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
     298:	c0 50       	subi	r28, 0x00	; 0
     29a:	de 4f       	sbci	r29, 0xFE	; 254

0000029c <.Loc.86>:
     29c:	88 81       	ld	r24, Y
     29e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

000002a2 <.LVL26>:
    display_stop();
     2a2:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

000002a6 <.LVL27>:
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17

000002ac <.Loc.89>:
     2ac:	08 95       	ret

000002ae <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
     2ae:	ea e0       	ldi	r30, 0x0A	; 10
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	80 81       	ld	r24, Z

000002b4 <.Loc.92>:
     2b4:	80 68       	ori	r24, 0x80	; 128
     2b6:	80 83       	st	Z, r24

000002b8 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
     2b8:	80 81       	ld	r24, Z

000002ba <.Loc.94>:
     2ba:	80 64       	ori	r24, 0x40	; 64
     2bc:	80 83       	st	Z, r24

000002be <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
     2be:	eb e0       	ldi	r30, 0x0B	; 11
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	80 81       	ld	r24, Z

000002c4 <.Loc.96>:
     2c4:	80 68       	ori	r24, 0x80	; 128
     2c6:	80 83       	st	Z, r24

000002c8 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
     2c8:	80 81       	ld	r24, Z

000002ca <.Loc.98>:
     2ca:	80 64       	ori	r24, 0x40	; 64
     2cc:	80 83       	st	Z, r24

000002ce <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
     2ce:	87 e0       	ldi	r24, 0x07	; 7
     2d0:	0e 94 02 01 	call	0x204	; 0x204 <display_brightness>

000002d4 <.LVL29>:
}
     2d4:	08 95       	ret

000002d6 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	83 e1       	ldi	r24, 0x13	; 19
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002e0 <.LVL30>:
    display_letter(3, 1);
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002ea <.LVL31>:
    display_letter(6, 2);
     2ea:	62 e0       	ldi	r22, 0x02	; 2
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002f4 <.LVL32>:
    display_letter(7, 3);
     2f4:	63 e0       	ldi	r22, 0x03	; 3
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002fe <.LVL33>:
}
     2fe:	08 95       	ret

00000300 <display_fol>:

void display_fol(void){
    display_letter(19, 0);
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	83 e1       	ldi	r24, 0x13	; 19
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000030a <.LVL34>:
    display_letter(6, 1);
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000314 <.LVL35>:
    display_letter(13, 2);
     314:	62 e0       	ldi	r22, 0x02	; 2
     316:	8d e0       	ldi	r24, 0x0D	; 13
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000031e <.LVL36>:
    display_letter(11, 3);
     31e:	63 e0       	ldi	r22, 0x03	; 3
     320:	8b e0       	ldi	r24, 0x0B	; 11
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000328 <.LVL37>:
}
     328:	08 95       	ret

0000032a <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	83 e1       	ldi	r24, 0x13	; 19
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000334 <.LVL38>:
    display_letter(3, 1);
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000033e <.LVL39>:
    display_letter(12, 2);
     33e:	62 e0       	ldi	r22, 0x02	; 2
     340:	8c e0       	ldi	r24, 0x0C	; 12
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000348 <.LVL40>:
    display_letter(17, 3);
     348:	63 e0       	ldi	r22, 0x03	; 3
     34a:	81 e1       	ldi	r24, 0x11	; 17
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000352 <.LVL41>:
}
     352:	08 95       	ret

00000354 <display_turn>:

void display_turn(void){
    display_letter(17, 0);
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	81 e1       	ldi	r24, 0x11	; 17
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000035e <.LVL42>:
    display_letter(18, 1);
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	82 e1       	ldi	r24, 0x12	; 18
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000368 <.LVL43>:
    display_letter(15, 2);
     368:	62 e0       	ldi	r22, 0x02	; 2
     36a:	8f e0       	ldi	r24, 0x0F	; 15
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000372 <.LVL44>:
    display_letter(12, 3);
     372:	63 e0       	ldi	r22, 0x03	; 3
     374:	8c e0       	ldi	r24, 0x0C	; 12
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000037c <.LVL45>:
}
     37c:	08 95       	ret

0000037e <display_dist>:

void display_dist(void){
    display_letter(4, 0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	84 e0       	ldi	r24, 0x04	; 4
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000388 <.LVL46>:
    display_letter(9, 1);
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	89 e0       	ldi	r24, 0x09	; 9
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000392 <.LVL47>:
    display_letter(16, 2);
     392:	62 e0       	ldi	r22, 0x02	; 2
     394:	80 e1       	ldi	r24, 0x10	; 16
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000039c <.LVL48>:
    display_letter(17, 3);
     39c:	63 e0       	ldi	r22, 0x03	; 3
     39e:	81 e1       	ldi	r24, 0x11	; 17
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003a6 <.LVL49>:
}
     3a6:	08 95       	ret

000003a8 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	83 e1       	ldi	r24, 0x13	; 19
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003b2 <.LVL50>:
    display_letter(14, 1);
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	8e e0       	ldi	r24, 0x0E	; 14
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003bc <.LVL51>:
    display_letter(1, 2);
     3bc:	62 e0       	ldi	r22, 0x02	; 2
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003c6 <.LVL52>:
    display_letter(3, 3);
     3c6:	63 e0       	ldi	r22, 0x03	; 3
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003d0 <.LVL53>:
}
     3d0:	08 95       	ret

000003d2 <display_mode>:
    if(mode){
     3d2:	88 23       	and	r24, r24
     3d4:	19 f0       	breq	.+6      	; 0x3dc <.L22>

000003d6 <.Loc.140>:
        display_fol();
     3d6:	0e 94 80 01 	call	0x300	; 0x300 <display_fol>

000003da <.LVL55>:
     3da:	08 95       	ret

000003dc <.L22>:
        display_pac();
     3dc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_pac>

000003e0 <.LVL57>:
}
     3e0:	08 95       	ret

000003e2 <display_left>:

void display_left(void){
    display_letter(11, 0);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	8b e0       	ldi	r24, 0x0B	; 11
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003ec <.LVL58>:
    display_letter(5, 1);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	85 e0       	ldi	r24, 0x05	; 5
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003f6 <.LVL59>:
    display_letter(6, 2);
     3f6:	62 e0       	ldi	r22, 0x02	; 2
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000400 <.LVL60>:
    display_letter(17, 3);
     400:	63 e0       	ldi	r22, 0x03	; 3
     402:	81 e1       	ldi	r24, 0x11	; 17
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000040a <.LVL61>:
}
     40a:	08 95       	ret

0000040c <display_rght>:

void display_rght(void){
    display_letter(15, 0);
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000416 <.LVL62>:
    display_letter(7, 1);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	87 e0       	ldi	r24, 0x07	; 7
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000420 <.LVL63>:
    display_letter(8, 2);
     420:	62 e0       	ldi	r22, 0x02	; 2
     422:	88 e0       	ldi	r24, 0x08	; 8
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000042a <.LVL64>:
    display_letter(17, 3);
     42a:	63 e0       	ldi	r22, 0x03	; 3
     42c:	81 e1       	ldi	r24, 0x11	; 17
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000434 <.LVL65>:
}
     434:	08 95       	ret

00000436 <display_direction>:
    if(dir){
     436:	88 23       	and	r24, r24
     438:	19 f0       	breq	.+6      	; 0x440 <.L27>

0000043a <.Loc.159>:
        display_rght();
     43a:	0e 94 06 02 	call	0x40c	; 0x40c <display_rght>

0000043e <.LVL67>:
     43e:	08 95       	ret

00000440 <.L27>:
        display_left();
     440:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <display_left>

00000444 <.LVL69>:
}
     444:	08 95       	ret

00000446 <display_go>:

void display_go(void){
    display_letter(19, 0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	83 e1       	ldi	r24, 0x13	; 19
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000450 <.LVL70>:
    display_letter(19, 1);
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	83 e1       	ldi	r24, 0x13	; 19
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000045a <.LVL71>:
    display_letter(7, 2);
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000464 <.LVL72>:
    display_letter(13, 3);
     464:	63 e0       	ldi	r22, 0x03	; 3
     466:	8d e0       	ldi	r24, 0x0D	; 13
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000046e <.LVL73>:
}
     46e:	08 95       	ret

00000470 <display_end>:

void display_end(void){
    display_letter(19, 0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	83 e1       	ldi	r24, 0x13	; 19
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000047a <.LVL74>:
    display_letter(5, 1);
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	85 e0       	ldi	r24, 0x05	; 5
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000484 <.LVL75>:
    display_letter(12, 2);
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	8c e0       	ldi	r24, 0x0C	; 12
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000048e <.LVL76>:
    display_letter(4, 3);
     48e:	63 e0       	ldi	r22, 0x03	; 3
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000498 <.LVL77>:
}
     498:	08 95       	ret

0000049a <display_srch>:

void display_srch(void){
    display_letter(16, 0);
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	80 e1       	ldi	r24, 0x10	; 16
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004a4 <.LVL78>:
    display_letter(15, 1);
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	8f e0       	ldi	r24, 0x0F	; 15
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ae <.LVL79>:
    display_letter(3, 2);
     4ae:	62 e0       	ldi	r22, 0x02	; 2
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004b8 <.LVL80>:
    display_letter(8, 3);
     4b8:	63 e0       	ldi	r22, 0x03	; 3
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004c2 <.LVL81>:
}
     4c2:	08 95       	ret

000004c4 <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	80 e1       	ldi	r24, 0x10	; 16
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ce <.LVL82>:
    display_letter(17, 1);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	81 e1       	ldi	r24, 0x11	; 17
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004d8 <.LVL83>:
    display_letter(13, 2);
     4d8:	62 e0       	ldi	r22, 0x02	; 2
     4da:	8d e0       	ldi	r24, 0x0D	; 13
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004e2 <.LVL84>:
    display_letter(14, 3);
     4e2:	63 e0       	ldi	r22, 0x03	; 3
     4e4:	8e e0       	ldi	r24, 0x0E	; 14
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ec <.LVL85>:
}
     4ec:	08 95       	ret

000004ee <interpreter>:
*/



void interpreter(){
    if(serialData==0x01){    //commmando bewegen
     4ee:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     4f2:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	09 f4       	brne	.+2      	; 0x4fc <.L2>

000004fa <L0^A>:
     4fa:	48 c0       	rjmp	.+144    	; 0x58c <.L13>

000004fc <.L2>:
        rechtdoor();
    }
    if(serialData==0x02){    //commmando bewegen
     4fc:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     500:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     504:	02 97       	sbiw	r24, 0x02	; 2
     506:	09 f4       	brne	.+2      	; 0x50a <.L3>

00000508 <L0^A>:
     508:	44 c0       	rjmp	.+136    	; 0x592 <.L14>

0000050a <.L3>:
        rechtdoorAnd();
    }
    if(serialData==0xA1){
     50a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     50e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     512:	81 3a       	cpi	r24, 0xA1	; 161
     514:	91 05       	cpc	r25, r1
     516:	09 f4       	brne	.+2      	; 0x51a <.L4>

00000518 <L0^A>:
     518:	3f c0       	rjmp	.+126    	; 0x598 <.L15>

0000051a <.L4>:
        achteruit();
    }
    if(serialData==0xB1){
     51a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     51e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     522:	81 3b       	cpi	r24, 0xB1	; 177
     524:	91 05       	cpc	r25, r1
     526:	d9 f1       	breq	.+118    	; 0x59e <.L16>

00000528 <.L5>:
        rechtsom();
    }
    if(serialData==0xB2){
     528:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     52c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     530:	82 3b       	cpi	r24, 0xB2	; 178
     532:	91 05       	cpc	r25, r1
     534:	b9 f1       	breq	.+110    	; 0x5a4 <.L17>

00000536 <.L6>:
        linksom();
    }
    if(serialData==0xD1){
     536:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     53a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     53e:	81 3d       	cpi	r24, 0xD1	; 209
     540:	91 05       	cpc	r25, r1
     542:	99 f1       	breq	.+102    	; 0x5aa <.L18>

00000544 <.L7>:
        kwartslagDraaienRechts();
    }
    if(serialData==0xD2){
     544:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     548:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     54c:	82 3d       	cpi	r24, 0xD2	; 210
     54e:	91 05       	cpc	r25, r1
     550:	79 f1       	breq	.+94     	; 0x5b0 <.L19>

00000552 <.L8>:
        kwartslagDraaienLinks();
    }
    if(serialData==0xD3){
     552:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     556:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     55a:	83 3d       	cpi	r24, 0xD3	; 211
     55c:	91 05       	cpc	r25, r1
     55e:	59 f1       	breq	.+86     	; 0x5b6 <.L20>

00000560 <.L9>:
        Pirouette();
    }
    if(serialData==0xD4){
     560:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     564:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     568:	84 3d       	cpi	r24, 0xD4	; 212
     56a:	91 05       	cpc	r25, r1
     56c:	39 f1       	breq	.+78     	; 0x5bc <.L21>

0000056e <.L10>:
        Pirouette2();
    }
    if(serialData==0xFF){
     56e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     572:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     576:	8f 3f       	cpi	r24, 0xFF	; 255
     578:	91 05       	cpc	r25, r1
     57a:	19 f1       	breq	.+70     	; 0x5c2 <.L22>

0000057c <.L11>:
        stop();
    }
    if(serialData==0xEF){
     57c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
     580:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
     584:	8f 3e       	cpi	r24, 0xEF	; 239
     586:	91 05       	cpc	r25, r1
     588:	f9 f0       	breq	.+62     	; 0x5c8 <.L23>

0000058a <.L1>:
        kleinBeetjeAchteruit();
        ongecontroleerdAchteruit();
        grootBeetjeVooruit();
        stop();
    }
}
     58a:	08 95       	ret

0000058c <.L13>:
        rechtdoor();
     58c:	0e 94 8d 03 	call	0x71a	; 0x71a <rechtdoor>

00000590 <.LVL0>:
     590:	b5 cf       	rjmp	.-150    	; 0x4fc <.L2>

00000592 <.L14>:
        rechtdoorAnd();
     592:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <rechtdoorAnd>

00000596 <.LVL1>:
     596:	b9 cf       	rjmp	.-142    	; 0x50a <.L3>

00000598 <.L15>:
        achteruit();
     598:	0e 94 cd 04 	call	0x99a	; 0x99a <achteruit>

0000059c <.LVL2>:
     59c:	be cf       	rjmp	.-132    	; 0x51a <.L4>

0000059e <.L16>:
        rechtsom();
     59e:	0e 94 be 05 	call	0xb7c	; 0xb7c <rechtsom>

000005a2 <.LVL3>:
     5a2:	c2 cf       	rjmp	.-124    	; 0x528 <.L5>

000005a4 <.L17>:
        linksom();
     5a4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <linksom>

000005a8 <.LVL4>:
     5a8:	c6 cf       	rjmp	.-116    	; 0x536 <.L6>

000005aa <.L18>:
        kwartslagDraaienRechts();
     5aa:	0e 94 28 06 	call	0xc50	; 0xc50 <kwartslagDraaienRechts>

000005ae <.LVL5>:
     5ae:	ca cf       	rjmp	.-108    	; 0x544 <.L7>

000005b0 <.L19>:
        kwartslagDraaienLinks();
     5b0:	0e 94 4b 06 	call	0xc96	; 0xc96 <kwartslagDraaienLinks>

000005b4 <.LVL6>:
     5b4:	ce cf       	rjmp	.-100    	; 0x552 <.L8>

000005b6 <.L20>:
        Pirouette();
     5b6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Pirouette>

000005ba <.LVL7>:
     5ba:	d2 cf       	rjmp	.-92     	; 0x560 <.L9>

000005bc <.L21>:
        Pirouette2();
     5bc:	0e 94 bb 06 	call	0xd76	; 0xd76 <Pirouette2>

000005c0 <.LVL8>:
     5c0:	d6 cf       	rjmp	.-84     	; 0x56e <.L10>

000005c2 <.L22>:
        stop();
     5c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

000005c6 <.LVL9>:
     5c6:	da cf       	rjmp	.-76     	; 0x57c <.L11>

000005c8 <.L23>:
        serialData=0x00;
     5c8:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <serialData+0x1>
     5cc:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <serialData>

000005d0 <.Loc.36>:
        ongecontroleerdVooruit();
     5d0:	0e 94 68 07 	call	0xed0	; 0xed0 <ongecontroleerdVooruit>

000005d4 <.LVL10>:
        Pirouette();
     5d4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Pirouette>

000005d8 <.LVL11>:
        ongecontroleerdAchteruit();
     5d8:	0e 94 35 07 	call	0xe6a	; 0xe6a <ongecontroleerdAchteruit>

000005dc <.LVL12>:
        ongecontroleerdVooruit2();
     5dc:	0e 94 7b 07 	call	0xef6	; 0xef6 <ongecontroleerdVooruit2>

000005e0 <.LVL13>:
        kleinBeetjeVooruit();
     5e0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <kleinBeetjeVooruit>

000005e4 <.LVL14>:
        kwartslagDraaienRechts();
     5e4:	0e 94 28 06 	call	0xc50	; 0xc50 <kwartslagDraaienRechts>

000005e8 <.LVL15>:
        minderBeetjeVooruit();
     5e8:	0e 94 a9 07 	call	0xf52	; 0xf52 <minderBeetjeVooruit>

000005ec <.LVL16>:
        Pirouette2();
     5ec:	0e 94 bb 06 	call	0xd76	; 0xd76 <Pirouette2>

000005f0 <.LVL17>:
        kleinBeetjeAchteruit();
     5f0:	0e 94 c4 07 	call	0xf88	; 0xf88 <kleinBeetjeAchteruit>

000005f4 <.LVL18>:
        kwartslagDraaienRechts();
     5f4:	0e 94 28 06 	call	0xc50	; 0xc50 <kwartslagDraaienRechts>

000005f8 <.LVL19>:
        kleinBeetjeAchteruit();
     5f8:	0e 94 c4 07 	call	0xf88	; 0xf88 <kleinBeetjeAchteruit>

000005fc <.LVL20>:
        kleinBeetjeAchteruit();
     5fc:	0e 94 c4 07 	call	0xf88	; 0xf88 <kleinBeetjeAchteruit>

00000600 <.LVL21>:
        kleinBeetjeAchteruit();
     600:	0e 94 c4 07 	call	0xf88	; 0xf88 <kleinBeetjeAchteruit>

00000604 <.LVL22>:
        kleinBeetjeAchteruit();
     604:	0e 94 c4 07 	call	0xf88	; 0xf88 <kleinBeetjeAchteruit>

00000608 <.LVL23>:
        ongecontroleerdAchteruit();
     608:	0e 94 35 07 	call	0xe6a	; 0xe6a <ongecontroleerdAchteruit>

0000060c <.LVL24>:
        grootBeetjeVooruit();
     60c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <grootBeetjeVooruit>

00000610 <.LVL25>:
        stop();
     610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000614 <.LVL26>:
}
     614:	ba cf       	rjmp	.-140    	; 0x58a <.L1>

00000616 <initKnipperLicht>:
#define LAR PC3
#define LAL PC7
#define PORTLED PORTC
#define DDRLED  DDRC
void initKnipperLicht(void){
    DDRLED |= (1<<LVR);
     616:	39 9a       	sbi	0x07, 1	; 7

00000618 <.Loc.3>:
    DDRLED |= (1<<LVL);
     618:	3d 9a       	sbi	0x07, 5	; 7

0000061a <.Loc.5>:
    DDRLED |= (1<<LAR);
     61a:	3b 9a       	sbi	0x07, 3	; 7

0000061c <.Loc.7>:
    DDRLED |= (1<<LAL);
     61c:	3f 9a       	sbi	0x07, 7	; 7

0000061e <.Loc.9>:
}
     61e:	08 95       	ret

00000620 <toggleKnipperRechts>:

void toggleKnipperRechts(void){
    static int state = 0;
    if(state == 0){
     620:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <state.2>
     624:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <state.2+0x1>
     628:	89 2b       	or	r24, r25
     62a:	49 f4       	brne	.+18     	; 0x63e <.L3>

0000062c <.Loc.14>:
        PORTLED |= (1<<LVR);
     62c:	41 9a       	sbi	0x08, 1	; 8

0000062e <.Loc.16>:
        PORTLED |= (1<<LAR);
     62e:	43 9a       	sbi	0x08, 3	; 8

00000630 <.Loc.18>:
        state = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0

00000634 <.L4>:
     634:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <state.2+0x1>
     638:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <state.2>

0000063c <.Loc.20>:
    else{
        PORTLED &= ~(1<<LVR);
        PORTLED &= ~(1<<LAR);
        state = 0;
    }
}
     63c:	08 95       	ret

0000063e <.L3>:
        PORTLED &= ~(1<<LVR);
     63e:	41 98       	cbi	0x08, 1	; 8

00000640 <.Loc.23>:
        PORTLED &= ~(1<<LAR);
     640:	43 98       	cbi	0x08, 3	; 8

00000642 <.Loc.25>:
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	f6 cf       	rjmp	.-20     	; 0x634 <.L4>

00000648 <toggleKnipperLinks>:

void toggleKnipperLinks(void){
    static int state = 0;
    if(state == 0){
     648:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <state.1>
     64c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <state.1+0x1>
     650:	89 2b       	or	r24, r25
     652:	49 f4       	brne	.+18     	; 0x666 <.L6>

00000654 <.Loc.31>:
        PORTLED |= (1<<LVL);
     654:	45 9a       	sbi	0x08, 5	; 8

00000656 <.Loc.33>:
        PORTLED |= (1<<LAL);
     656:	47 9a       	sbi	0x08, 7	; 8

00000658 <.Loc.35>:
        state = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0

0000065c <.L7>:
     65c:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <state.1+0x1>
     660:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <state.1>

00000664 <.Loc.37>:
    else{
        PORTLED &= ~(1<<LVL);
        PORTLED &= ~(1<<LAL);
        state = 0;
    }
}
     664:	08 95       	ret

00000666 <.L6>:
        PORTLED &= ~(1<<LVL);
     666:	45 98       	cbi	0x08, 5	; 8

00000668 <.Loc.40>:
        PORTLED &= ~(1<<LAL);
     668:	47 98       	cbi	0x08, 7	; 8

0000066a <.Loc.42>:
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	f6 cf       	rjmp	.-20     	; 0x65c <.L7>

00000670 <toggleKnipperNood>:

void toggleKnipperNood(void){
    static int state = 0;
    if(state == 0){
     670:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <state.0>
     674:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <state.0+0x1>
     678:	89 2b       	or	r24, r25
     67a:	59 f4       	brne	.+22     	; 0x692 <.L9>

0000067c <.Loc.48>:
        PORTLED |= (1<<LVL);
     67c:	45 9a       	sbi	0x08, 5	; 8

0000067e <.Loc.50>:
        PORTLED |= (1<<LAL);
     67e:	47 9a       	sbi	0x08, 7	; 8

00000680 <.Loc.52>:
        PORTLED |= (1<<LVR);
     680:	41 9a       	sbi	0x08, 1	; 8

00000682 <.Loc.54>:
        PORTLED |= (1<<LAR);
     682:	43 9a       	sbi	0x08, 3	; 8

00000684 <.Loc.56>:
        state = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0

00000688 <.L10>:
     688:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <state.0+0x1>
     68c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <state.0>

00000690 <.Loc.58>:
        PORTLED &= ~(1<<LAL);
        PORTLED &= ~(1<<LVR);
        PORTLED &= ~(1<<LAR);
        state = 0;
    }
}
     690:	08 95       	ret

00000692 <.L9>:
        PORTLED &= ~(1<<LVL);
     692:	45 98       	cbi	0x08, 5	; 8

00000694 <.Loc.61>:
        PORTLED &= ~(1<<LAL);
     694:	47 98       	cbi	0x08, 7	; 8

00000696 <.Loc.63>:
        PORTLED &= ~(1<<LVR);
     696:	41 98       	cbi	0x08, 1	; 8

00000698 <.Loc.65>:
        PORTLED &= ~(1<<LAR);
     698:	43 98       	cbi	0x08, 3	; 8

0000069a <.Loc.67>:
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	f4 cf       	rjmp	.-24     	; 0x688 <.L10>

000006a0 <main>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1

int main(void)
{
    initNoodstop();
     6a0:	0e 94 fa 07 	call	0xff4	; 0xff4 <initNoodstop>

000006a4 <.LVL0>:
    initStepper();
     6a4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <initStepper>

000006a8 <.LVL1>:
    init_ultrasoon();
     6a8:	0e 94 4f 09 	call	0x129e	; 0x129e <init_ultrasoon>

000006ac <.LVL2>:
    initUsart();
     6ac:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <initUsart>

000006b0 <.LVL3>:
    flushUsart2Buffer();
     6b0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <flushUsart2Buffer>

000006b4 <.LVL4>:
    initKnipperLicht();
     6b4:	0e 94 0b 03 	call	0x616	; 0x616 <initKnipperLicht>

000006b8 <.LVL5>:
    sei();
     6b8:	78 94       	sei

000006ba <.L2>:

    while(1){
        interpreter();
     6ba:	0e 94 77 02 	call	0x4ee	; 0x4ee <interpreter>

000006be <.LVL6>:
    while(1){
     6be:	fd cf       	rjmp	.-6      	; 0x6ba <.L2>

000006c0 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
     6c0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     6c4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     6c8:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     6cc:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19

000006d4 <.Loc.3>:
     6d4:	0d 96       	adiw	r24, 0x0d	; 13

000006d6 <.Loc.4>:
     6d6:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <padbreedte+0x1>
     6da:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <padbreedte>

000006de <.Loc.5>:
}
     6de:	08 95       	ret

000006e0 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(750);     //1150
     6e0:	8e ee       	ldi	r24, 0xEE	; 238
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000006e8 <.LVL0>:
    speedStepperRight(750);
     6e8:	8e ee       	ldi	r24, 0xEE	; 238
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000006f0 <.LVL1>:

}
     6f0:	08 95       	ret

000006f2 <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000006fa <.LVL2>:
    speedStepperRight(0);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000702 <.LVL3>:
}
     702:	08 95       	ret

00000704 <ramping>:

int ramping(int originalValue , int value){
     704:	26 2f       	mov	r18, r22
     706:	37 2f       	mov	r19, r23

00000708 <.Loc.16>:
    if(originalValue > value){
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	0c f4       	brge	.+2      	; 0x710 <.L5>

0000070e <.Loc.18>:
            originalValue --;
     70e:	01 97       	sbiw	r24, 0x01	; 1

00000710 <.L5>:
    }
    if(originalValue < value){
     710:	82 17       	cp	r24, r18
     712:	93 07       	cpc	r25, r19
     714:	0c f4       	brge	.+2      	; 0x718 <.L6>

00000716 <.Loc.22>:
            originalValue ++;
     716:	01 96       	adiw	r24, 0x01	; 1

00000718 <.L6>:
    }
    return originalValue;
}
     718:	08 95       	ret

0000071a <rechtdoor>:

void rechtdoor(void){
    stepperForward();
     71a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

0000071e <.LVL7>:
    while((stopRequest==0)){
     71e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     722:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     726:	89 2b       	or	r24, r25
     728:	b9 f0       	breq	.+46     	; 0x758 <.L14>

0000072a <.L8>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
     72a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

0000072e <.LVL8>:
    stopRequest=0;
     72e:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
     732:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

00000736 <.Loc.33>:
}
     736:	08 95       	ret

00000738 <.L9>:
            sendByte(0x01); //stuur klaar met opdracht
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000740 <.LVL9>:
            stopRequest=1;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
     748:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

0000074c <.L11>:
    while((stopRequest==0)){
     74c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     750:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     754:	89 2b       	or	r24, r25
     756:	49 f7       	brne	.-46     	; 0x72a <.L8>

00000758 <.L14>:
        if((distance_left>25)||(distance_right>25)){  //als agv buiten pad is
     758:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     75c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000760 <.Loc.40>:
     760:	4a 97       	sbiw	r24, 0x1a	; 26
     762:	54 f7       	brge	.-44     	; 0x738 <.L9>

00000764 <.Loc.41>:
     764:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     768:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

0000076c <.Loc.42>:
     76c:	4a 97       	sbiw	r24, 0x1a	; 26
     76e:	24 f7       	brge	.-56     	; 0x738 <.L9>

00000770 <.Loc.43>:
            if (distance_right==distance_left) {
     770:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     774:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     778:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     77c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000780 <.Loc.45>:
     780:	28 17       	cp	r18, r24
     782:	39 07       	cpc	r19, r25
     784:	f9 f0       	breq	.+62     	; 0x7c4 <.L16>

00000786 <.L12>:
            if (distance_right > distance_left){
     786:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     78a:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     78e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     792:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000796 <.Loc.48>:
     796:	82 17       	cp	r24, r18
     798:	93 07       	cpc	r25, r19
     79a:	ec f0       	brlt	.+58     	; 0x7d6 <.L17>

0000079c <.L13>:
            if(distance_left > distance_right){
     79c:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     7a0:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     7a4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     7a8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000007ac <.Loc.51>:
     7ac:	82 17       	cp	r24, r18
     7ae:	93 07       	cpc	r25, r19
     7b0:	6c f6       	brge	.-102    	; 0x74c <.L11>

000007b2 <.Loc.52>:
                speedStepperRight(ramping(1650, 1150));
     7b2:	81 e7       	ldi	r24, 0x71	; 113
     7b4:	96 e0       	ldi	r25, 0x06	; 6
     7b6:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000007ba <.LVL10>:
                speedStepperLeft(ramping(1150, 1650));
     7ba:	8f e7       	ldi	r24, 0x7F	; 127
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000007c2 <.LVL11>:
     7c2:	c4 cf       	rjmp	.-120    	; 0x74c <.L11>

000007c4 <.L16>:
            speedStepperLeft(1150);
     7c4:	8e e7       	ldi	r24, 0x7E	; 126
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000007cc <.LVL12>:
            speedStepperRight(1150);
     7cc:	8e e7       	ldi	r24, 0x7E	; 126
     7ce:	94 e0       	ldi	r25, 0x04	; 4
     7d0:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000007d4 <.LVL13>:
     7d4:	d8 cf       	rjmp	.-80     	; 0x786 <.L12>

000007d6 <.L17>:
                speedStepperLeft(ramping(1650, 1150));
     7d6:	81 e7       	ldi	r24, 0x71	; 113
     7d8:	96 e0       	ldi	r25, 0x06	; 6
     7da:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000007de <.LVL14>:
                speedStepperRight(ramping(1150, 1650));
     7de:	8f e7       	ldi	r24, 0x7F	; 127
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000007e6 <.LVL15>:
     7e6:	da cf       	rjmp	.-76     	; 0x79c <.L13>

000007e8 <rechtdoorAnd>:

void rechtdoorAnd(void){
    stepperForward();
     7e8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

000007ec <.LVL16>:
    while((stopRequest==0)){
     7ec:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     7f0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     7f4:	89 2b       	or	r24, r25
     7f6:	81 f1       	breq	.+96     	; 0x858 <.L25>

000007f8 <.L19>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stopRequest=0;
     7f8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
     7fc:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

00000800 <.Loc.64>:
    while(distance_left>20){
     800:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     804:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     808:	45 97       	sbiw	r24, 0x15	; 21
     80a:	44 f0       	brlt	.+16     	; 0x81c <.L26>

0000080c <.L27>:
        vooruit();
     80c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000810 <.LVL17>:
    while(distance_left>20){
     810:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     814:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     818:	45 97       	sbiw	r24, 0x15	; 21
     81a:	c4 f7       	brge	.-16     	; 0x80c <.L27>

0000081c <.L26>:
    }
    while((stopRequest==0)){
     81c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     820:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     824:	89 2b       	or	r24, r25
     826:	09 f4       	brne	.+2      	; 0x82a <.L28>

00000828 <L0^A>:
     828:	70 c0       	rjmp	.+224    	; 0x90a <.L34>

0000082a <.L28>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
     82a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

0000082e <.LVL18>:
    stopRequest=0;
     82e:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
     832:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

00000836 <.Loc.72>:
}
     836:	08 95       	ret

00000838 <.L20>:
            sendByte(0x01); //stuur klaar met opdracht
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000840 <.LVL19>:
            stopRequest=1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
     848:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

0000084c <.L22>:
    while((stopRequest==0)){
     84c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     850:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     854:	89 2b       	or	r24, r25
     856:	81 f6       	brne	.-96     	; 0x7f8 <.L19>

00000858 <.L25>:
        if((distance_left>25)||(distance_right>25)){  //als agv buiten pad is
     858:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     85c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000860 <.Loc.79>:
     860:	4a 97       	sbiw	r24, 0x1a	; 26
     862:	54 f7       	brge	.-44     	; 0x838 <.L20>

00000864 <.Loc.80>:
     864:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     868:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

0000086c <.Loc.81>:
     86c:	4a 97       	sbiw	r24, 0x1a	; 26
     86e:	24 f7       	brge	.-56     	; 0x838 <.L20>

00000870 <.Loc.82>:
            if (distance_right==distance_left) {
     870:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     874:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     878:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     87c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000880 <.Loc.84>:
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	f9 f0       	breq	.+62     	; 0x8c4 <.L38>

00000886 <.L23>:
            if (distance_right > distance_left){
     886:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     88a:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     88e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     892:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000896 <.Loc.87>:
     896:	82 17       	cp	r24, r18
     898:	93 07       	cpc	r25, r19
     89a:	ec f0       	brlt	.+58     	; 0x8d6 <.L39>

0000089c <.L24>:
            if(distance_left > distance_right){
     89c:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     8a0:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     8a4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     8a8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000008ac <.Loc.90>:
     8ac:	82 17       	cp	r24, r18
     8ae:	93 07       	cpc	r25, r19
     8b0:	6c f6       	brge	.-102    	; 0x84c <.L22>

000008b2 <.Loc.91>:
                speedStepperRight(ramping(1650, 1150));
     8b2:	81 e7       	ldi	r24, 0x71	; 113
     8b4:	96 e0       	ldi	r25, 0x06	; 6
     8b6:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000008ba <.LVL20>:
                speedStepperLeft(ramping(1150, 1650));
     8ba:	8f e7       	ldi	r24, 0x7F	; 127
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000008c2 <.LVL21>:
     8c2:	c4 cf       	rjmp	.-120    	; 0x84c <.L22>

000008c4 <.L38>:
            speedStepperLeft(1150);
     8c4:	8e e7       	ldi	r24, 0x7E	; 126
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000008cc <.LVL22>:
            speedStepperRight(1150);
     8cc:	8e e7       	ldi	r24, 0x7E	; 126
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000008d4 <.LVL23>:
     8d4:	d8 cf       	rjmp	.-80     	; 0x886 <.L23>

000008d6 <.L39>:
                speedStepperLeft(ramping(1650, 1150));
     8d6:	81 e7       	ldi	r24, 0x71	; 113
     8d8:	96 e0       	ldi	r25, 0x06	; 6
     8da:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

000008de <.LVL24>:
                speedStepperRight(ramping(1150, 1650));
     8de:	8f e7       	ldi	r24, 0x7F	; 127
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

000008e6 <.LVL25>:
     8e6:	da cf       	rjmp	.-76     	; 0x89c <.L24>

000008e8 <.L29>:
            sendByte(0x01); //stuur klaar met opdracht
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

000008f0 <.LVL26>:
            stopRequest=1;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
     8f8:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

000008fc <.L31>:
    while((stopRequest==0)){
     8fc:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     900:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     904:	89 2b       	or	r24, r25
     906:	09 f0       	breq	.+2      	; 0x90a <.L34>

00000908 <L0^A>:
     908:	90 cf       	rjmp	.-224    	; 0x82a <.L28>

0000090a <.L34>:
        if((distance_left>25)||(distance_right>25)){  //als agv buiten pad is
     90a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     90e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000912 <.Loc.103>:
     912:	4a 97       	sbiw	r24, 0x1a	; 26
     914:	4c f7       	brge	.-46     	; 0x8e8 <.L29>

00000916 <.Loc.104>:
     916:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     91a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

0000091e <.Loc.105>:
     91e:	4a 97       	sbiw	r24, 0x1a	; 26
     920:	1c f7       	brge	.-58     	; 0x8e8 <.L29>

00000922 <.Loc.106>:
            if (distance_right==distance_left) {
     922:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     926:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     92a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     92e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000932 <.Loc.108>:
     932:	28 17       	cp	r18, r24
     934:	39 07       	cpc	r19, r25
     936:	f9 f0       	breq	.+62     	; 0x976 <.L40>

00000938 <.L32>:
            if (distance_right > distance_left){
     938:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     93c:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     940:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     944:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000948 <.Loc.111>:
     948:	82 17       	cp	r24, r18
     94a:	93 07       	cpc	r25, r19
     94c:	ec f0       	brlt	.+58     	; 0x988 <.L41>

0000094e <.L33>:
            if(distance_left > distance_right){
     94e:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     952:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     956:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     95a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

0000095e <.Loc.114>:
     95e:	82 17       	cp	r24, r18
     960:	93 07       	cpc	r25, r19
     962:	64 f6       	brge	.-104    	; 0x8fc <.L31>

00000964 <.Loc.115>:
                speedStepperRight(ramping(1650, 1150));
     964:	81 e7       	ldi	r24, 0x71	; 113
     966:	96 e0       	ldi	r25, 0x06	; 6
     968:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

0000096c <.LVL27>:
                speedStepperLeft(ramping(1150, 1650));
     96c:	8f e7       	ldi	r24, 0x7F	; 127
     96e:	94 e0       	ldi	r25, 0x04	; 4
     970:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000974 <.LVL28>:
     974:	c3 cf       	rjmp	.-122    	; 0x8fc <.L31>

00000976 <.L40>:
            speedStepperLeft(1150);
     976:	8e e7       	ldi	r24, 0x7E	; 126
     978:	94 e0       	ldi	r25, 0x04	; 4
     97a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

0000097e <.LVL29>:
            speedStepperRight(1150);
     97e:	8e e7       	ldi	r24, 0x7E	; 126
     980:	94 e0       	ldi	r25, 0x04	; 4
     982:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000986 <.LVL30>:
     986:	d8 cf       	rjmp	.-80     	; 0x938 <.L32>

00000988 <.L41>:
                speedStepperLeft(ramping(1650, 1150));
     988:	81 e7       	ldi	r24, 0x71	; 113
     98a:	96 e0       	ldi	r25, 0x06	; 6
     98c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000990 <.LVL31>:
                speedStepperRight(ramping(1150, 1650));
     990:	8f e7       	ldi	r24, 0x7F	; 127
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000998 <.LVL32>:
     998:	da cf       	rjmp	.-76     	; 0x94e <.L33>

0000099a <achteruit>:

void achteruit(void){
    stepperBackward();
     99a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <stepperBackward>

0000099e <.LVL33>:
    while((stopRequest==0)){ //while agv binnen pad
     99e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     9a2:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     9a6:	89 2b       	or	r24, r25
     9a8:	09 f4       	brne	.+2      	; 0x9ac <.L43>

000009aa <L0^A>:
     9aa:	45 c0       	rjmp	.+138    	; 0xa36 <.L48>

000009ac <.L43>:
            speedStepperRight(ramping(1350, 1150));
            speedStepperLeft(ramping(1150, 1350));
            }
        }
    }
    stepperForward();
     9ac:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

000009b0 <.LVL34>:
    while((distance_left>15)&&(distance_right>15)){
     9b0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     9b4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000009b8 <.Loc.129>:
     9b8:	40 97       	sbiw	r24, 0x10	; 16
     9ba:	74 f0       	brlt	.+28     	; 0x9d8 <.L50>

000009bc <.L49>:
     9bc:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     9c0:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000009c4 <.Loc.131>:
     9c4:	40 97       	sbiw	r24, 0x10	; 16
     9c6:	44 f0       	brlt	.+16     	; 0x9d8 <.L50>

000009c8 <.Loc.132>:
        vooruit();  //rij naar volgende pad
     9c8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

000009cc <.LVL35>:
    while((distance_left>15)&&(distance_right>15)){
     9cc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     9d0:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000009d4 <.Loc.135>:
     9d4:	40 97       	sbiw	r24, 0x10	; 16
     9d6:	94 f7       	brge	.-28     	; 0x9bc <.L49>

000009d8 <.L50>:
    }
    stop();
     9d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

000009dc <.LVL36>:
    stopRequest=0;
     9dc:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
     9e0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

000009e4 <.Loc.139>:
}
     9e4:	08 95       	ret

000009e6 <.L44>:
        if (distance_right==distance_left) {
     9e6:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     9ea:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     9ee:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     9f2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000009f6 <.Loc.142>:
     9f6:	28 17       	cp	r18, r24
     9f8:	39 07       	cpc	r19, r25
     9fa:	a1 f1       	breq	.+104    	; 0xa64 <.L54>

000009fc <.L46>:
        if (distance_right < distance_left){
     9fc:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
     a00:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
     a04:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     a08:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000a0c <.Loc.145>:
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	94 f1       	brlt	.+100    	; 0xa76 <.L55>

00000a12 <.L47>:
        if(distance_left < distance_right){
     a12:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     a16:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     a1a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     a1e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000a22 <.Loc.148>:
     a22:	28 17       	cp	r18, r24
     a24:	39 07       	cpc	r19, r25
     a26:	84 f1       	brlt	.+96     	; 0xa88 <.L56>

00000a28 <.L45>:
    while((stopRequest==0)){ //while agv binnen pad
     a28:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
     a2c:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
     a30:	89 2b       	or	r24, r25
     a32:	09 f0       	breq	.+2      	; 0xa36 <.L48>

00000a34 <L0^A>:
     a34:	bb cf       	rjmp	.-138    	; 0x9ac <.L43>

00000a36 <.L48>:
        if((distance_right>35)&&(distance_left>35)){
     a36:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     a3a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000a3e <.Loc.152>:
     a3e:	84 97       	sbiw	r24, 0x24	; 36
     a40:	94 f2       	brlt	.-92     	; 0x9e6 <.L44>

00000a42 <.Loc.153>:
     a42:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     a46:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000a4a <.Loc.154>:
     a4a:	84 97       	sbiw	r24, 0x24	; 36
     a4c:	64 f2       	brlt	.-104    	; 0x9e6 <.L44>

00000a4e <.Loc.155>:
            sendByte(0x01);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000a56 <.LVL37>:
            stopRequest=1;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
     a5e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>
     a62:	e2 cf       	rjmp	.-60     	; 0xa28 <.L45>

00000a64 <.L54>:
            speedStepperLeft(1150);
     a64:	8e e7       	ldi	r24, 0x7E	; 126
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000a6c <.LVL38>:
            speedStepperRight(1150);
     a6c:	8e e7       	ldi	r24, 0x7E	; 126
     a6e:	94 e0       	ldi	r25, 0x04	; 4
     a70:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000a74 <.LVL39>:
     a74:	c3 cf       	rjmp	.-122    	; 0x9fc <.L46>

00000a76 <.L55>:
            speedStepperLeft(ramping(1350, 1150));
     a76:	85 e4       	ldi	r24, 0x45	; 69
     a78:	95 e0       	ldi	r25, 0x05	; 5
     a7a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000a7e <.LVL40>:
            speedStepperRight(ramping(1150, 1350));
     a7e:	8f e7       	ldi	r24, 0x7F	; 127
     a80:	94 e0       	ldi	r25, 0x04	; 4
     a82:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000a86 <.LVL41>:
     a86:	c5 cf       	rjmp	.-118    	; 0xa12 <.L47>

00000a88 <.L56>:
            speedStepperRight(ramping(1350, 1150));
     a88:	85 e4       	ldi	r24, 0x45	; 69
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000a90 <.LVL42>:
            speedStepperLeft(ramping(1150, 1350));
     a90:	8f e7       	ldi	r24, 0x7F	; 127
     a92:	94 e0       	ldi	r25, 0x04	; 4
     a94:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000a98 <.LVL43>:
     a98:	c7 cf       	rjmp	.-114    	; 0xa28 <.L45>

00000a9a <linksom>:

void linksom(void){
    toggleKnipperRechts();
     a9a:	0e 94 10 03 	call	0x620	; 0x620 <toggleKnipperRechts>

00000a9e <.LVL44>:
    enableStepCnt();
     a9e:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000aa2 <.LVL45>:
    clearStepCnt();
     aa2:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000aa6 <.LVL46>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
     aa6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     aaa:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     aae:	84 3d       	cpi	r24, 0xD4	; 212
     ab0:	97 41       	sbci	r25, 0x17	; 23
     ab2:	48 f4       	brcc	.+18     	; 0xac6 <.L58>

00000ab4 <.L59>:
        vooruit();
     ab4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000ab8 <.LVL47>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
     ab8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     abc:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     ac0:	84 3d       	cpi	r24, 0xD4	; 212
     ac2:	97 41       	sbci	r25, 0x17	; 23
     ac4:	b8 f3       	brcs	.-18     	; 0xab4 <.L59>

00000ac6 <.L58>:
    }
    clearStepCnt();
     ac6:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000aca <.LVL48>:
    toggleStepperDirectionRight();
     aca:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000ace <.LVL49>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
     ace:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     ad2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     ad6:	8e 32       	cpi	r24, 0x2E	; 46
     ad8:	99 40       	sbci	r25, 0x09	; 9
     ada:	48 f4       	brcc	.+18     	; 0xaee <.L60>

00000adc <.L61>:
        vooruit();
     adc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000ae0 <.LVL50>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
     ae0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     ae4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     ae8:	8e 32       	cpi	r24, 0x2E	; 46
     aea:	99 40       	sbci	r25, 0x09	; 9
     aec:	b8 f3       	brcs	.-18     	; 0xadc <.L61>

00000aee <.L60>:
    }
    toggleStepperDirectionRight();
     aee:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000af2 <.LVL51>:
    clearStepCnt();
     af2:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000af6 <.LVL52>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
     af6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     afa:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     afe:	8c 37       	cpi	r24, 0x7C	; 124
     b00:	95 41       	sbci	r25, 0x15	; 21
     b02:	48 f4       	brcc	.+18     	; 0xb16 <.L62>

00000b04 <.L63>:
        vooruit();
     b04:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000b08 <.LVL53>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
     b08:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     b0c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     b10:	8c 37       	cpi	r24, 0x7C	; 124
     b12:	95 41       	sbci	r25, 0x15	; 21
     b14:	b8 f3       	brcs	.-18     	; 0xb04 <.L63>

00000b16 <.L62>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
     b16:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000b1a <.LVL54>:
    clearStepCnt();
     b1a:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000b1e <.LVL55>:
    while(stepCounterLeft<(2350)){
     b1e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     b22:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     b26:	8e 32       	cpi	r24, 0x2E	; 46
     b28:	99 40       	sbci	r25, 0x09	; 9
     b2a:	48 f4       	brcc	.+18     	; 0xb3e <.L64>

00000b2c <.L65>:
        vooruit();
     b2c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000b30 <.LVL56>:
    while(stepCounterLeft<(2350)){
     b30:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     b34:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     b38:	8e 32       	cpi	r24, 0x2E	; 46
     b3a:	99 40       	sbci	r25, 0x09	; 9
     b3c:	b8 f3       	brcs	.-18     	; 0xb2c <.L65>

00000b3e <.L64>:
    }
    toggleStepperDirectionRight();
     b3e:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000b42 <.LVL57>:
    clearStepCnt();
     b42:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000b46 <.LVL58>:
    vooruit();
     b46:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000b4a <.LVL59>:
    while(distance_left>15){           //agv is in het volgende pad
     b4a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     b4e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     b52:	40 97       	sbiw	r24, 0x10	; 16
     b54:	44 f0       	brlt	.+16     	; 0xb66 <.L66>

00000b56 <.L67>:
        vooruit();
     b56:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000b5a <.LVL60>:
    while(distance_left>15){           //agv is in het volgende pad
     b5a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     b5e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     b62:	40 97       	sbiw	r24, 0x10	; 16
     b64:	c4 f7       	brge	.-16     	; 0xb56 <.L67>

00000b66 <.L66>:
    }
    stop();
     b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000b6a <.LVL61>:
    disableStepCnt();
     b6a:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000b6e <.LVL62>:
    sendByte(0x01);   //send klaar met opdracht
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000b76 <.LVL63>:
    toggleKnipperRechts();
     b76:	0e 94 10 03 	call	0x620	; 0x620 <toggleKnipperRechts>

00000b7a <.LVL64>:
}
     b7a:	08 95       	ret

00000b7c <rechtsom>:

void rechtsom(void){
    toggleKnipperLinks();
     b7c:	0e 94 24 03 	call	0x648	; 0x648 <toggleKnipperLinks>

00000b80 <.LVL65>:
    enableStepCnt();
     b80:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000b84 <.LVL66>:
    clearStepCnt();
     b84:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000b88 <.LVL67>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
     b88:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     b8c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     b90:	84 3d       	cpi	r24, 0xD4	; 212
     b92:	97 41       	sbci	r25, 0x17	; 23
     b94:	48 f4       	brcc	.+18     	; 0xba8 <.L74>

00000b96 <.L75>:
        vooruit();
     b96:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000b9a <.LVL68>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
     b9a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     b9e:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     ba2:	84 3d       	cpi	r24, 0xD4	; 212
     ba4:	97 41       	sbci	r25, 0x17	; 23
     ba6:	b8 f3       	brcs	.-18     	; 0xb96 <.L75>

00000ba8 <.L74>:
    }
    clearStepCnt();
     ba8:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000bac <.LVL69>:
    toggleStepperDirectionLeft();
     bac:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000bb0 <.LVL70>:
    while(stepCounterLeft<2250){   //agv draait 90 graden
     bb0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     bb4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     bb8:	8a 3c       	cpi	r24, 0xCA	; 202
     bba:	98 40       	sbci	r25, 0x08	; 8
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <.L76>

00000bbe <.L77>:
        vooruit();
     bbe:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000bc2 <.LVL71>:
    while(stepCounterLeft<2250){   //agv draait 90 graden
     bc2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     bc6:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     bca:	8a 3c       	cpi	r24, 0xCA	; 202
     bcc:	98 40       	sbci	r25, 0x08	; 8
     bce:	b8 f3       	brcs	.-18     	; 0xbbe <.L77>

00000bd0 <.L76>:
    }
    toggleStepperDirectionLeft();
     bd0:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000bd4 <.LVL72>:
    clearStepCnt();
     bd4:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000bd8 <.LVL73>:
    while(stepCounterLeft<(5300)){    //agv rijdt naar volgende pad
     bd8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     bdc:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     be0:	84 3b       	cpi	r24, 0xB4	; 180
     be2:	94 41       	sbci	r25, 0x14	; 20
     be4:	48 f4       	brcc	.+18     	; 0xbf8 <.L78>

00000be6 <.L79>:
        vooruit();
     be6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000bea <.LVL74>:
    while(stepCounterLeft<(5300)){    //agv rijdt naar volgende pad
     bea:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     bee:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     bf2:	84 3b       	cpi	r24, 0xB4	; 180
     bf4:	94 41       	sbci	r25, 0x14	; 20
     bf6:	b8 f3       	brcs	.-18     	; 0xbe6 <.L79>

00000bf8 <.L78>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
     bf8:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000bfc <.LVL75>:
    clearStepCnt();
     bfc:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000c00 <.LVL76>:
    while(stepCounterLeft<(2250)){
     c00:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     c04:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     c08:	8a 3c       	cpi	r24, 0xCA	; 202
     c0a:	98 40       	sbci	r25, 0x08	; 8
     c0c:	48 f4       	brcc	.+18     	; 0xc20 <.L80>

00000c0e <.L81>:
        vooruit();
     c0e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000c12 <.LVL77>:
    while(stepCounterLeft<(2250)){
     c12:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     c16:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     c1a:	8a 3c       	cpi	r24, 0xCA	; 202
     c1c:	98 40       	sbci	r25, 0x08	; 8
     c1e:	b8 f3       	brcs	.-18     	; 0xc0e <.L81>

00000c20 <.L80>:
    }
    toggleStepperDirectionLeft();
     c20:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000c24 <.LVL78>:
    disableStepCnt();
     c24:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000c28 <.LVL79>:
    vooruit();
     c28:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000c2c <.LVL80>:
    if(distance_left<15){           //agv is in het volgende pad
     c2c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     c30:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000c34 <.Loc.233>:
     c34:	0f 97       	sbiw	r24, 0x0f	; 15
     c36:	4c f0       	brlt	.+18     	; 0xc4a <.L87>

00000c38 <.L82>:
        stop();
    }
    stop();
     c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000c3c <.LVL81>:
    sendByte(0x01);      //send klaar met opdracht
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000c44 <.LVL82>:
    toggleKnipperLinks();
     c44:	0e 94 24 03 	call	0x648	; 0x648 <toggleKnipperLinks>

00000c48 <.LVL83>:
}
     c48:	08 95       	ret

00000c4a <.L87>:
        stop();
     c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000c4e <.LVL84>:
     c4e:	f4 cf       	rjmp	.-24     	; 0xc38 <.L82>

00000c50 <kwartslagDraaienRechts>:

void kwartslagDraaienRechts(void){
    toggleKnipperLinks();
     c50:	0e 94 24 03 	call	0x648	; 0x648 <toggleKnipperLinks>

00000c54 <.LVL85>:
    enableStepCnt();
     c54:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000c58 <.LVL86>:
    clearStepCnt();
     c58:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000c5c <.LVL87>:
    toggleStepperDirectionLeft();
     c5c:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000c60 <.LVL88>:
    while(stepCounterLeft<2300){   //agv draait 90 graden
     c60:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     c64:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     c68:	8c 3f       	cpi	r24, 0xFC	; 252
     c6a:	98 40       	sbci	r25, 0x08	; 8
     c6c:	48 f4       	brcc	.+18     	; 0xc80 <.L89>

00000c6e <.L90>:
        vooruit();
     c6e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000c72 <.LVL89>:
    while(stepCounterLeft<2300){   //agv draait 90 graden
     c72:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     c76:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     c7a:	8c 3f       	cpi	r24, 0xFC	; 252
     c7c:	98 40       	sbci	r25, 0x08	; 8
     c7e:	b8 f3       	brcs	.-18     	; 0xc6e <.L90>

00000c80 <.L89>:
    }
    toggleStepperDirectionLeft();
     c80:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000c84 <.LVL90>:
    disableStepCnt();
     c84:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000c88 <.LVL91>:
    toggleKnipperLinks();
     c88:	0e 94 24 03 	call	0x648	; 0x648 <toggleKnipperLinks>

00000c8c <.LVL92>:
    sendByte(0x01);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000c94 <.LVL93>:
}
     c94:	08 95       	ret

00000c96 <kwartslagDraaienLinks>:

void kwartslagDraaienLinks(void){
    toggleKnipperRechts();
     c96:	0e 94 10 03 	call	0x620	; 0x620 <toggleKnipperRechts>

00000c9a <.LVL94>:
    enableStepCnt();
     c9a:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000c9e <.LVL95>:
    clearStepCnt();
     c9e:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000ca2 <.LVL96>:
    toggleStepperDirectionRight();
     ca2:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000ca6 <.LVL97>:
    while(stepCounterLeft<2300){   //agv draait 90 graden
     ca6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     caa:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     cae:	8c 3f       	cpi	r24, 0xFC	; 252
     cb0:	98 40       	sbci	r25, 0x08	; 8
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <.L93>

00000cb4 <.L94>:
        vooruit();
     cb4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000cb8 <.LVL98>:
    while(stepCounterLeft<2300){   //agv draait 90 graden
     cb8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     cbc:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     cc0:	8c 3f       	cpi	r24, 0xFC	; 252
     cc2:	98 40       	sbci	r25, 0x08	; 8
     cc4:	b8 f3       	brcs	.-18     	; 0xcb4 <.L94>

00000cc6 <.L93>:
    }
    toggleStepperDirectionRight();
     cc6:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000cca <.LVL99>:
    disableStepCnt();
     cca:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000cce <.LVL100>:
    toggleKnipperRechts();
     cce:	0e 94 10 03 	call	0x620	; 0x620 <toggleKnipperRechts>

00000cd2 <.LVL101>:
    sendByte(0x01);
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000cda <.LVL102>:
}
     cda:	08 95       	ret

00000cdc <Pirouette>:

void Pirouette(void){
    toggleKnipperRechts();
     cdc:	0e 94 10 03 	call	0x620	; 0x620 <toggleKnipperRechts>

00000ce0 <.LVL103>:
    enableStepCnt();
     ce0:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000ce4 <.LVL104>:
    clearStepCnt();
     ce4:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000ce8 <.LVL105>:
    stepperForward();
     ce8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000cec <.LVL106>:
    while(stepCounterLeft<7500){    //agv rijdt ietsjes vooruit
     cec:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     cf0:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     cf4:	8c 34       	cpi	r24, 0x4C	; 76
     cf6:	9d 41       	sbci	r25, 0x1D	; 29
     cf8:	48 f4       	brcc	.+18     	; 0xd0c <.L97>

00000cfa <.L98>:
        vooruit();
     cfa:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000cfe <.LVL107>:
    while(stepCounterLeft<7500){    //agv rijdt ietsjes vooruit
     cfe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     d02:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     d06:	8c 34       	cpi	r24, 0x4C	; 76
     d08:	9d 41       	sbci	r25, 0x1D	; 29
     d0a:	b8 f3       	brcs	.-18     	; 0xcfa <.L98>

00000d0c <.L97>:
    }
    clearStepCnt();
     d0c:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000d10 <.LVL108>:
    toggleStepperDirectionRight();
     d10:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000d14 <.LVL109>:
    while(stepCounterLeft<4600){   //agv draait 90 graden
     d14:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     d18:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     d1c:	88 3f       	cpi	r24, 0xF8	; 248
     d1e:	91 41       	sbci	r25, 0x11	; 17
     d20:	48 f4       	brcc	.+18     	; 0xd34 <.L99>

00000d22 <.L100>:
        vooruit();
     d22:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000d26 <.LVL110>:
    while(stepCounterLeft<4600){   //agv draait 90 graden
     d26:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     d2a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     d2e:	88 3f       	cpi	r24, 0xF8	; 248
     d30:	91 41       	sbci	r25, 0x11	; 17
     d32:	b8 f3       	brcs	.-18     	; 0xd22 <.L100>

00000d34 <.L99>:
    }
    toggleStepperDirectionRight();
     d34:	0e 94 65 08 	call	0x10ca	; 0x10ca <toggleStepperDirectionRight>

00000d38 <.LVL111>:
    disableStepCnt();
     d38:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000d3c <.LVL112>:
    toggleKnipperRechts();
     d3c:	0e 94 10 03 	call	0x620	; 0x620 <toggleKnipperRechts>

00000d40 <.LVL113>:
    stepperBackward();
     d40:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <stepperBackward>

00000d44 <.LVL114>:
    while((distance_right>15)){
     d44:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     d48:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>
     d4c:	40 97       	sbiw	r24, 0x10	; 16
     d4e:	44 f0       	brlt	.+16     	; 0xd60 <.L101>

00000d50 <.L102>:
        vooruit();  //rij naar volgende pad
     d50:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000d54 <.LVL115>:
    while((distance_right>15)){
     d54:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     d58:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>
     d5c:	40 97       	sbiw	r24, 0x10	; 16
     d5e:	c4 f7       	brge	.-16     	; 0xd50 <.L102>

00000d60 <.L101>:
    }
    stop();
     d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000d64 <.LVL116>:
    stopRequest=0;
     d64:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
     d68:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

00000d6c <.Loc.293>:
    sendByte(0x01);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000d74 <.LVL117>:
}
     d74:	08 95       	ret

00000d76 <Pirouette2>:

void Pirouette2(void){
    toggleKnipperLinks();
     d76:	0e 94 24 03 	call	0x648	; 0x648 <toggleKnipperLinks>

00000d7a <.LVL118>:
    enableStepCnt();
     d7a:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000d7e <.LVL119>:
    clearStepCnt();
     d7e:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000d82 <.LVL120>:
    toggleStepperDirectionLeft();
     d82:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000d86 <.LVL121>:
    while(stepCounterLeft<4600){   //agv draait 180 graden
     d86:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     d8a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     d8e:	88 3f       	cpi	r24, 0xF8	; 248
     d90:	91 41       	sbci	r25, 0x11	; 17
     d92:	48 f4       	brcc	.+18     	; 0xda6 <.L107>

00000d94 <.L108>:
        vooruit();
     d94:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000d98 <.LVL122>:
    while(stepCounterLeft<4600){   //agv draait 180 graden
     d98:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     d9c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     da0:	88 3f       	cpi	r24, 0xF8	; 248
     da2:	91 41       	sbci	r25, 0x11	; 17
     da4:	b8 f3       	brcs	.-18     	; 0xd94 <.L108>

00000da6 <.L107>:
    }
    toggleStepperDirectionLeft();
     da6:	0e 94 77 08 	call	0x10ee	; 0x10ee <toggleStepperDirectionLeft>

00000daa <.LVL123>:
    disableStepCnt();
     daa:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000dae <.LVL124>:
    toggleKnipperLinks();
     dae:	0e 94 24 03 	call	0x648	; 0x648 <toggleKnipperLinks>

00000db2 <.LVL125>:
    stop();
     db2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000db6 <.LVL126>:
    stopRequest=0;
     db6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
     dba:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

00000dbe <.Loc.310>:
    sendByte(0x01);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendByte>

00000dc6 <.LVL127>:
}
     dc6:	08 95       	ret

00000dc8 <calibrate>:

void calibrate(void){
    stepperBackward();
     dc8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <stepperBackward>

00000dcc <.LVL128>:
    enableStepCnt();
     dcc:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000dd0 <.LVL129>:
    while(stepCounterLeft<1000){
     dd0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     dd4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     dd8:	88 3e       	cpi	r24, 0xE8	; 232
     dda:	93 40       	sbci	r25, 0x03	; 3
     ddc:	48 f4       	brcc	.+18     	; 0xdf0 <.L111>

00000dde <.L112>:
        vooruit();
     dde:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000de2 <.LVL130>:
    while(stepCounterLeft<1000){
     de2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     de6:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     dea:	88 3e       	cpi	r24, 0xE8	; 232
     dec:	93 40       	sbci	r25, 0x03	; 3
     dee:	b8 f3       	brcs	.-18     	; 0xdde <.L112>

00000df0 <.L111>:
    }
    stop();
     df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000df4 <.LVL131>:
    disableStepCnt();
     df4:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000df8 <.LVL132>:
    stepperForward();
     df8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000dfc <.LVL133>:
    while(distance_left != distance_right){     //first calibration
     dfc:	0b c0       	rjmp	.+22     	; 0xe14 <.L115>

00000dfe <.L114>:
        if(distance_left>distance_right){
            speedStepperLeft(3000);
            speedStepperRight(0);
        }
        if(distance_left<distance_right){
     dfe:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     e02:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     e06:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     e0a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000e0e <.Loc.326>:
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	fc f0       	brlt	.+62     	; 0xe52 <.L119>

00000e14 <.L115>:
    while(distance_left != distance_right){     //first calibration
     e14:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     e18:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     e1c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     e20:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	e9 f0       	breq	.+58     	; 0xe64 <.L120>

00000e2a <.Loc.328>:
        if(distance_left>distance_right){
     e2a:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
     e2e:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
     e32:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     e36:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000e3a <.Loc.330>:
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	fc f6       	brge	.-66     	; 0xdfe <.L114>

00000e40 <.Loc.331>:
            speedStepperLeft(3000);
     e40:	88 eb       	ldi	r24, 0xB8	; 184
     e42:	9b e0       	ldi	r25, 0x0B	; 11
     e44:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000e48 <.LVL134>:
            speedStepperRight(0);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000e50 <.LVL135>:
     e50:	d6 cf       	rjmp	.-84     	; 0xdfe <.L114>

00000e52 <.L119>:
            speedStepperRight(3000);
     e52:	88 eb       	ldi	r24, 0xB8	; 184
     e54:	9b e0       	ldi	r25, 0x0B	; 11
     e56:	0e 94 57 08 	call	0x10ae	; 0x10ae <speedStepperRight>

00000e5a <.LVL136>:
            speedStepperLeft(0);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <speedStepperLeft>

00000e62 <.LVL137>:
     e62:	d8 cf       	rjmp	.-80     	; 0xe14 <.L115>

00000e64 <.L120>:
        }
    }
    stop();
     e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000e68 <.LVL138>:
}
     e68:	08 95       	ret

00000e6a <ongecontroleerdAchteruit>:

void ongecontroleerdAchteruit(void){
    stepperBackward();
     e6a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <stepperBackward>

00000e6e <.LVL139>:
    while((distance_left<25)&&(distance_right<25)){
     e6e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     e72:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000e76 <.Loc.342>:
     e76:	49 97       	sbiw	r24, 0x19	; 25
     e78:	74 f4       	brge	.+28     	; 0xe96 <.L123>

00000e7a <.L122>:
     e7a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     e7e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000e82 <.Loc.344>:
     e82:	49 97       	sbiw	r24, 0x19	; 25
     e84:	44 f4       	brge	.+16     	; 0xe96 <.L123>

00000e86 <.Loc.345>:
        vooruit();
     e86:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000e8a <.LVL140>:
    while((distance_left<25)&&(distance_right<25)){
     e8a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     e8e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000e92 <.Loc.348>:
     e92:	49 97       	sbiw	r24, 0x19	; 25
     e94:	94 f3       	brlt	.-28     	; 0xe7a <.L122>

00000e96 <.L123>:
    }
    stop();
     e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000e9a <.LVL141>:
    stepperForward();
     e9a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000e9e <.LVL142>:
    clearStepCnt();
     e9e:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000ea2 <.LVL143>:
    enableStepCnt();
     ea2:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000ea6 <.LVL144>:
    while(stepCounterLeft<1000){
     ea6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     eaa:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     eae:	88 3e       	cpi	r24, 0xE8	; 232
     eb0:	93 40       	sbci	r25, 0x03	; 3
     eb2:	48 f4       	brcc	.+18     	; 0xec6 <.L125>

00000eb4 <.L126>:
        vooruit();
     eb4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000eb8 <.LVL145>:
    while(stepCounterLeft<1000){
     eb8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     ebc:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     ec0:	88 3e       	cpi	r24, 0xE8	; 232
     ec2:	93 40       	sbci	r25, 0x03	; 3
     ec4:	b8 f3       	brcs	.-18     	; 0xeb4 <.L126>

00000ec6 <.L125>:
    }
    disableStepCnt();
     ec6:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000eca <.LVL146>:
    stop();
     eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000ece <.LVL147>:
}
     ece:	08 95       	ret

00000ed0 <ongecontroleerdVooruit>:

void ongecontroleerdVooruit(void){
    stepperForward();
     ed0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000ed4 <.LVL148>:
    while((distance_left<20)){
     ed4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     ed8:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     edc:	44 97       	sbiw	r24, 0x14	; 20
     ede:	44 f4       	brge	.+16     	; 0xef0 <.L130>

00000ee0 <.L131>:
        vooruit();
     ee0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000ee4 <.LVL149>:
    while((distance_left<20)){
     ee4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
     ee8:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
     eec:	44 97       	sbiw	r24, 0x14	; 20
     eee:	c4 f3       	brlt	.-16     	; 0xee0 <.L131>

00000ef0 <.L130>:
    }
    stop();
     ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000ef4 <.LVL150>:
}
     ef4:	08 95       	ret

00000ef6 <ongecontroleerdVooruit2>:

void ongecontroleerdVooruit2(void){
    stepperForward();
     ef6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000efa <.LVL151>:
    while((distance_right<20)){
     efa:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     efe:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>
     f02:	44 97       	sbiw	r24, 0x14	; 20
     f04:	44 f4       	brge	.+16     	; 0xf16 <.L134>

00000f06 <.L135>:
        vooruit();
     f06:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000f0a <.LVL152>:
    while((distance_right<20)){
     f0a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
     f0e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>
     f12:	44 97       	sbiw	r24, 0x14	; 20
     f14:	c4 f3       	brlt	.-16     	; 0xf06 <.L135>

00000f16 <.L134>:
    }
    stop();
     f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000f1a <.LVL153>:
}
     f1a:	08 95       	ret

00000f1c <kleinBeetjeVooruit>:

void kleinBeetjeVooruit(void){
    stepperForward();
     f1c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000f20 <.LVL154>:
    enableStepCnt();
     f20:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000f24 <.LVL155>:
    clearStepCnt();
     f24:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000f28 <.LVL156>:
    while(stepCounterLeft<7550){
     f28:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     f2c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     f30:	8e 37       	cpi	r24, 0x7E	; 126
     f32:	9d 41       	sbci	r25, 0x1D	; 29
     f34:	48 f4       	brcc	.+18     	; 0xf48 <.L138>

00000f36 <.L139>:
        vooruit();
     f36:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000f3a <.LVL157>:
    while(stepCounterLeft<7550){
     f3a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     f3e:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     f42:	8e 37       	cpi	r24, 0x7E	; 126
     f44:	9d 41       	sbci	r25, 0x1D	; 29
     f46:	b8 f3       	brcs	.-18     	; 0xf36 <.L139>

00000f48 <.L138>:
    }
    stop();
     f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000f4c <.LVL158>:
    disableStepCnt();
     f4c:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000f50 <.LVL159>:
}
     f50:	08 95       	ret

00000f52 <minderBeetjeVooruit>:

void minderBeetjeVooruit(void){
    stepperForward();
     f52:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000f56 <.LVL160>:
    enableStepCnt();
     f56:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000f5a <.LVL161>:
    clearStepCnt();
     f5a:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000f5e <.LVL162>:
    while(stepCounterLeft<3050){
     f5e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     f62:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     f66:	8a 3e       	cpi	r24, 0xEA	; 234
     f68:	9b 40       	sbci	r25, 0x0B	; 11
     f6a:	48 f4       	brcc	.+18     	; 0xf7e <.L142>

00000f6c <.L143>:
        vooruit();
     f6c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000f70 <.LVL163>:
    while(stepCounterLeft<3050){
     f70:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     f74:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     f78:	8a 3e       	cpi	r24, 0xEA	; 234
     f7a:	9b 40       	sbci	r25, 0x0B	; 11
     f7c:	b8 f3       	brcs	.-18     	; 0xf6c <.L143>

00000f7e <.L142>:
    }
    stop();
     f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000f82 <.LVL164>:
    disableStepCnt();
     f82:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000f86 <.LVL165>:
}
     f86:	08 95       	ret

00000f88 <kleinBeetjeAchteruit>:

void kleinBeetjeAchteruit(void){
    stepperBackward();
     f88:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <stepperBackward>

00000f8c <.LVL166>:
    enableStepCnt();
     f8c:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000f90 <.LVL167>:
    clearStepCnt();
     f90:	0e 94 b5 08 	call	0x116a	; 0x116a <clearStepCnt>

00000f94 <.LVL168>:
    while(stepCounterLeft<3050){
     f94:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     f98:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     f9c:	8a 3e       	cpi	r24, 0xEA	; 234
     f9e:	9b 40       	sbci	r25, 0x0B	; 11
     fa0:	48 f4       	brcc	.+18     	; 0xfb4 <.L146>

00000fa2 <.L147>:
        vooruit();
     fa2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000fa6 <.LVL169>:
    while(stepCounterLeft<3050){
     fa6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     faa:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     fae:	8a 3e       	cpi	r24, 0xEA	; 234
     fb0:	9b 40       	sbci	r25, 0x0B	; 11
     fb2:	b8 f3       	brcs	.-18     	; 0xfa2 <.L147>

00000fb4 <.L146>:
    }
    stop();
     fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000fb8 <.LVL170>:
    disableStepCnt();
     fb8:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000fbc <.LVL171>:
    stepperForward();
     fbc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000fc0 <.LVL172>:
}
     fc0:	08 95       	ret

00000fc2 <grootBeetjeVooruit>:

void grootBeetjeVooruit(void){
    stepperForward();
     fc2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <stepperForward>

00000fc6 <.LVL173>:
    enableStepCnt();
     fc6:	0e 94 be 08 	call	0x117c	; 0x117c <enableStepCnt>

00000fca <.LVL174>:
    while(stepCounterLeft<29500){
     fca:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     fce:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     fd2:	8c 33       	cpi	r24, 0x3C	; 60
     fd4:	93 47       	sbci	r25, 0x73	; 115
     fd6:	48 f4       	brcc	.+18     	; 0xfea <.L150>

00000fd8 <.L151>:
        vooruit();
     fd8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vooruit>

00000fdc <.LVL175>:
    while(stepCounterLeft<29500){
     fdc:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
     fe0:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
     fe4:	8c 33       	cpi	r24, 0x3C	; 60
     fe6:	93 47       	sbci	r25, 0x73	; 115
     fe8:	b8 f3       	brcs	.-18     	; 0xfd8 <.L151>

00000fea <.L150>:
    }
    disableStepCnt();
     fea:	0e 94 c9 08 	call	0x1192	; 0x1192 <disableStepCnt>

00000fee <.LVL176>:
    stop();
     fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00000ff2 <.LVL177>:
}
     ff2:	08 95       	ret

00000ff4 <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
     ff4:	50 98       	cbi	0x0a, 0	; 10

00000ff6 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
     ff6:	58 9a       	sbi	0x0b, 0	; 11

00000ff8 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
     ff8:	e8 9a       	sbi	0x1d, 0	; 29

00000ffa <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
     ffa:	e9 e6       	ldi	r30, 0x69	; 105
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z

00001000 <.Loc.8>:
    1000:	81 60       	ori	r24, 0x01	; 1
    1002:	80 83       	st	Z, r24

00001004 <.Loc.9>:
    sei();
    1004:	78 94       	sei

00001006 <.Loc.10>:
}
    1006:	08 95       	ret

00001008 <__vector_1>:

ISR(INT0_vect){
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <.L5>

00001014 <.L3>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
            stop();
            toggleKnipperNood();
        }
        toggleKnipperNood();
    1014:	0e 94 38 03 	call	0x670	; 0x670 <toggleKnipperNood>

00001018 <.L5>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
    1018:	48 9b       	sbis	0x09, 0	; 9
    101a:	fc cf       	rjmp	.-8      	; 0x1014 <.L3>

0000101c <.L4>:
            stop();
    101c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <stop>

00001020 <.LVL1>:
            toggleKnipperNood();
    1020:	0e 94 38 03 	call	0x670	; 0x670 <toggleKnipperNood>

00001024 <.LVL2>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
    1024:	48 99       	sbic	0x09, 0	; 9
    1026:	fa cf       	rjmp	.-12     	; 0x101c <.L4>
    1028:	f5 cf       	rjmp	.-22     	; 0x1014 <.L3>

0000102a <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
    102a:	6b 9a       	sbi	0x0d, 3	; 13

0000102c <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
    102c:	e1 e0       	ldi	r30, 0x01	; 1
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	80 81       	ld	r24, Z

00001032 <.Loc.4>:
    1032:	88 60       	ori	r24, 0x08	; 8
    1034:	80 83       	st	Z, r24

00001036 <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
    1036:	9d 9a       	sbi	0x13, 5	; 19

00001038 <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
    1038:	80 81       	ld	r24, Z

0000103a <.Loc.8>:
    103a:	80 61       	ori	r24, 0x10	; 16
    103c:	80 83       	st	Z, r24

0000103e <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
    103e:	73 98       	cbi	0x0e, 3	; 14

00001040 <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
    1040:	e2 e0       	ldi	r30, 0x02	; 2
    1042:	f1 e0       	ldi	r31, 0x01	; 1
    1044:	80 81       	ld	r24, Z
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	80 83       	st	Z, r24

0000104a <.Loc.13>:
	PORT_DIR_R |= (1<<DIRECTION_R);
    104a:	a5 9a       	sbi	0x14, 5	; 20

0000104c <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
    104c:	80 81       	ld	r24, Z
    104e:	8f 7e       	andi	r24, 0xEF	; 239
    1050:	80 83       	st	Z, r24

00001052 <.Loc.17>:
}
    1052:	08 95       	ret

00001054 <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
    1054:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00001058 <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

0000105e <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
    105e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00001062 <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
    1062:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00001066 <.Loc.27>:
}
    1066:	08 95       	ret

00001068 <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
    1068:	82 e8       	ldi	r24, 0x82	; 130
    106a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

0000106e <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
    106e:	8a e1       	ldi	r24, 0x1A	; 26
    1070:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00001074 <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    107c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00001080 <.Loc.35>:
    sei();
    1080:	78 94       	sei

00001082 <.Loc.36>:
}
    1082:	08 95       	ret

00001084 <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
    1084:	82 e8       	ldi	r24, 0x82	; 130
    1086:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

0000108a <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
    108a:	8a e1       	ldi	r24, 0x1A	; 26
    108c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00001090 <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    1098:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

0000109c <.Loc.44>:
    sei();
    109c:	78 94       	sei

0000109e <.Loc.45>:
}
    109e:	08 95       	ret

000010a0 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
    10a0:	0e 94 42 08 	call	0x1084	; 0x1084 <initTimer4Stepper>

000010a4 <.LVL0>:
    initTimer3Stepper();
    10a4:	0e 94 34 08 	call	0x1068	; 0x1068 <initTimer3Stepper>

000010a8 <.LVL1>:
    initPinsStepper();
    10a8:	0e 94 15 08 	call	0x102a	; 0x102a <initPinsStepper>

000010ac <.LVL2>:
}
    10ac:	08 95       	ret

000010ae <speedStepperRight>:

void speedStepperRight(int PWMRight){
    10ae:	28 2f       	mov	r18, r24
    10b0:	39 2f       	mov	r19, r25

000010b2 <.Loc.53>:
    ICR3 = PWMRight;
    10b2:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    10b6:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

000010ba <.Loc.55>:
}
    10ba:	08 95       	ret

000010bc <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
    10bc:	28 2f       	mov	r18, r24
    10be:	39 2f       	mov	r19, r25

000010c0 <.Loc.58>:
    ICR4 = PWMLeft;
    10c0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    10c4:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

000010c8 <.Loc.60>:
}
    10c8:	08 95       	ret

000010ca <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
    10ca:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <state.1>
    10ce:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <state.1+0x1>
    10d2:	89 2b       	or	r24, r25
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <.L9>

000010d6 <.Loc.65>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
    10d6:	a5 98       	cbi	0x14, 5	; 20

000010d8 <.Loc.67>:
        state = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0

000010dc <.L10>:
    10dc:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <state.1+0x1>
    10e0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <state.1>

000010e4 <.Loc.69>:
    }
    else{
        PORT_DIR_R |= (1<<DIRECTION_R);
        state = 0;
    }
}
    10e4:	08 95       	ret

000010e6 <.L9>:
        PORT_DIR_R |= (1<<DIRECTION_R);
    10e6:	a5 9a       	sbi	0x14, 5	; 20

000010e8 <.Loc.72>:
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	f7 cf       	rjmp	.-18     	; 0x10dc <.L10>

000010ee <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
    10ee:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <state.0>
    10f2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <state.0+0x1>
    10f6:	89 2b       	or	r24, r25
    10f8:	61 f4       	brne	.+24     	; 0x1112 <.L12>

000010fa <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
    10fa:	e2 e0       	ldi	r30, 0x02	; 2
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	80 81       	ld	r24, Z

00001100 <.Loc.79>:
    1100:	80 61       	ori	r24, 0x10	; 16
    1102:	80 83       	st	Z, r24

00001104 <.Loc.80>:
        state = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0

00001108 <.L13>:
    1108:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <state.0+0x1>
    110c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <state.0>

00001110 <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
    1110:	08 95       	ret

00001112 <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
    1112:	e2 e0       	ldi	r30, 0x02	; 2
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	80 81       	ld	r24, Z
    1118:	8f 7e       	andi	r24, 0xEF	; 239
    111a:	80 83       	st	Z, r24

0000111c <.Loc.85>:
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	f3 cf       	rjmp	.-26     	; 0x1108 <.L13>

00001122 <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
    1122:	8f 93       	push	r24
    1124:	8f b7       	in	r24, 0x3f	; 63
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25

0000112a <.Loc.88>:
    stepCounterLeft++;
    112a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
    112e:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <stepCounterLeft+0x1>
    1138:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <stepCounterLeft>

0000113c <.Loc.90>:
}
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	8f bf       	out	0x3f, r24	; 63
    1142:	8f 91       	pop	r24
    1144:	18 95       	reti

00001146 <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
    1146:	8f 93       	push	r24
    1148:	8f b7       	in	r24, 0x3f	; 63
    114a:	8f 93       	push	r24
    114c:	9f 93       	push	r25

0000114e <.Loc.92>:
    stepCounterRight++;
    114e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <stepCounterRight>
    1152:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <stepCounterRight+0x1>
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <stepCounterRight+0x1>
    115c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <stepCounterRight>

00001160 <.Loc.94>:
}
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	8f bf       	out	0x3f, r24	; 63
    1166:	8f 91       	pop	r24
    1168:	18 95       	reti

0000116a <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
    116a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <stepCounterLeft+0x1>
    116e:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <stepCounterLeft>

00001172 <.Loc.98>:
    stepCounterRight = 0;
    1172:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <stepCounterRight+0x1>
    1176:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <stepCounterRight>

0000117a <.Loc.100>:
}
    117a:	08 95       	ret

0000117c <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
    117c:	e2 e7       	ldi	r30, 0x72	; 114
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z

00001182 <.Loc.103>:
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	80 83       	st	Z, r24

00001186 <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
    1186:	e1 e7       	ldi	r30, 0x71	; 113
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z

0000118c <.Loc.105>:
    118c:	81 60       	ori	r24, 0x01	; 1
    118e:	80 83       	st	Z, r24

00001190 <.Loc.106>:
}
    1190:	08 95       	ret

00001192 <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
    1192:	e2 e7       	ldi	r30, 0x72	; 114
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	80 83       	st	Z, r24

0000119c <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
    119c:	e1 e7       	ldi	r30, 0x71	; 113
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	80 83       	st	Z, r24

000011a6 <.Loc.112>:
}
    11a6:	08 95       	ret

000011a8 <stepperBackward>:

void stepperBackward(void){
    PORT_DIR_R &= ~(1<<DIRECTION_R);
    11a8:	a5 98       	cbi	0x14, 5	; 20

000011aa <.Loc.116>:
	PORT_DIR_L |= (1<<DIRECTION_L);
    11aa:	e2 e0       	ldi	r30, 0x02	; 2
    11ac:	f1 e0       	ldi	r31, 0x01	; 1
    11ae:	80 81       	ld	r24, Z

000011b0 <.Loc.117>:
    11b0:	80 61       	ori	r24, 0x10	; 16
    11b2:	80 83       	st	Z, r24

000011b4 <.Loc.118>:
}
    11b4:	08 95       	ret

000011b6 <stepperForward>:

void stepperForward(void){
    PORT_DIR_R |= (1<<DIRECTION_R);
    11b6:	a5 9a       	sbi	0x14, 5	; 20

000011b8 <.Loc.122>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
    11b8:	e2 e0       	ldi	r30, 0x02	; 2
    11ba:	f1 e0       	ldi	r31, 0x01	; 1
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7e       	andi	r24, 0xEF	; 239
    11c0:	80 83       	st	Z, r24

000011c2 <.Loc.124>:
}
    11c2:	08 95       	ret

000011c4 <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
    11c4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

000011c8 <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
    11c8:	87 e6       	ldi	r24, 0x67	; 103
    11ca:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

000011ce <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
    11ce:	88 e9       	ldi	r24, 0x98	; 152
    11d0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

000011d4 <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
    11d4:	86 e0       	ldi	r24, 0x06	; 6
    11d6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

000011da <.Loc.9>:
}
    11da:	08 95       	ret

000011dc <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
    11dc:	e8 ec       	ldi	r30, 0xC8	; 200
    11de:	f0 e0       	ldi	r31, 0x00	; 0

000011e0 <.L3>:
    11e0:	90 81       	ld	r25, Z
    11e2:	95 ff       	sbrs	r25, 5
    11e4:	fd cf       	rjmp	.-6      	; 0x11e0 <.L3>

000011e6 <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
    11e6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

000011ea <.Loc.17>:
}
    11ea:	08 95       	ret

000011ec <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
    11ec:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    11f0:	88 23       	and	r24, r24
    11f2:	44 f4       	brge	.+16     	; 0x1204 <.L5>

000011f4 <.Loc.22>:
        dummy = UDR1; // Read and discard
    11f4:	ae ec       	ldi	r26, 0xCE	; 206
    11f6:	b0 e0       	ldi	r27, 0x00	; 0

000011f8 <.Loc.23>:
    while (UCSR1A & (1 << RXC1)) {
    11f8:	e8 ec       	ldi	r30, 0xC8	; 200
    11fa:	f0 e0       	ldi	r31, 0x00	; 0

000011fc <.L7>:
        dummy = UDR1; // Read and discard
    11fc:	8c 91       	ld	r24, X

000011fe <.Loc.26>:
    while (UCSR1A & (1 << RXC1)) {
    11fe:	80 81       	ld	r24, Z
    1200:	88 23       	and	r24, r24
    1202:	e4 f3       	brlt	.-8      	; 0x11fc <.L7>

00001204 <.L5>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
    1204:	08 95       	ret

00001206 <__vector_36>:

unsigned int serialData;
volatile int stopRequest = 0;

ISR(USART1_RX_vect) {
    1206:	1f 92       	push	r1
    1208:	1f b6       	in	r1, 0x3f	; 63
    120a:	1f 92       	push	r1
    120c:	11 24       	eor	r1, r1
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25

00001212 <.Loc.29>:
    serialData = UDR1;
    1212:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1216:	90 e0       	ldi	r25, 0x00	; 0

00001218 <.Loc.31>:
    1218:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <serialData+0x1>
    121c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <serialData>

00001220 <.Loc.32>:

    if(serialData==0xFF){
    1220:	8f 3f       	cpi	r24, 0xFF	; 255
    1222:	91 05       	cpc	r25, r1
    1224:	31 f0       	breq	.+12     	; 0x1232 <.L11>

00001226 <.L9>:
        stopRequest = 1;
    }
}
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	1f 90       	pop	r1
    122c:	1f be       	out	0x3f, r1	; 63
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <.L11>:
        stopRequest = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
    123a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

0000123e <.Loc.37>:
}
    123e:	f3 cf       	rjmp	.-26     	; 0x1226 <.L9>

00001240 <init_timer5>:
#include "Debugging.h"
#include <stdlib.h>

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
    1240:	8b e2       	ldi	r24, 0x2B	; 43
    1242:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00001246 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
    1246:	8a e5       	ldi	r24, 0x5A	; 90
    1248:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

0000124c <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
    124c:	81 e2       	ldi	r24, 0x21	; 33
    124e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00001252 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    125a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

0000125e <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
    125e:	84 e1       	ldi	r24, 0x14	; 20
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1266:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

0000126a <.Loc.11>:
    OCR5C = 20;
    126a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    126e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00001272 <.Loc.13>:
    //set enable interrupt
    sei();
    1272:	78 94       	sei

00001274 <.Loc.14>:
}
    1274:	08 95       	ret

00001276 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
    1276:	ea e0       	ldi	r30, 0x0A	; 10
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	80 81       	ld	r24, Z

0000127c <.Loc.17>:
    127c:	80 61       	ori	r24, 0x10	; 16
    127e:	80 83       	st	Z, r24

00001280 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
    1280:	80 81       	ld	r24, Z

00001282 <.Loc.19>:
    1282:	80 62       	ori	r24, 0x20	; 32
    1284:	80 83       	st	Z, r24

00001286 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
    1286:	ab e0       	ldi	r26, 0x0B	; 11
    1288:	b1 e0       	ldi	r27, 0x01	; 1
    128a:	8c 91       	ld	r24, X
    128c:	8f 7e       	andi	r24, 0xEF	; 239
    128e:	8c 93       	st	X, r24

00001290 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
    1290:	8c 91       	ld	r24, X
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	8c 93       	st	X, r24

00001296 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
    1296:	80 81       	ld	r24, Z
    1298:	8d 7f       	andi	r24, 0xFD	; 253
    129a:	80 83       	st	Z, r24

0000129c <.Loc.26>:
}
    129c:	08 95       	ret

0000129e <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
    129e:	0e 94 3b 09 	call	0x1276	; 0x1276 <init_pins_ultrasoon>

000012a2 <.LVL0>:
    init_timer5();
    12a2:	0e 94 20 09 	call	0x1240	; 0x1240 <init_timer5>

000012a6 <.LVL1>:
}
    12a6:	08 95       	ret

000012a8 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
    12a8:	8f 93       	push	r24
    12aa:	8f b7       	in	r24, 0x3f	; 63
    12ac:	8f 93       	push	r24
    12ae:	8b b7       	in	r24, 0x3b	; 59
    12b0:	8f 93       	push	r24
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31

000012b6 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
    12b6:	e1 e2       	ldi	r30, 0x21	; 33
    12b8:	f1 e0       	ldi	r31, 0x01	; 1
    12ba:	80 81       	ld	r24, Z

000012bc <.Loc.33>:
    12bc:	80 64       	ori	r24, 0x40	; 64
    12be:	80 83       	st	Z, r24

000012c0 <.Loc.34>:
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	8f 91       	pop	r24
    12c6:	8b bf       	out	0x3b, r24	; 59
    12c8:	8f 91       	pop	r24
    12ca:	8f bf       	out	0x3f, r24	; 63
    12cc:	8f 91       	pop	r24
    12ce:	18 95       	reti

000012d0 <__vector_46>:

ISR(TIMER5_CAPT_vect){
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	1f 92       	push	r1
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	2b b7       	in	r18, 0x3b	; 59
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31

000012f2 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
    12f2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000012f6 <.Loc.39>:
    12f6:	86 ff       	sbrs	r24, 6
    12f8:	1e c0       	rjmp	.+60     	; 0x1336 <.L6>

000012fa <.Loc.40>:
        start_time = ICR5;
    12fa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    12fe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00001302 <.Loc.42>:
    1302:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <start_time.0+0x1>
    1306:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <start_time.0>

0000130a <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
    130a:	e1 e2       	ldi	r30, 0x21	; 33
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	80 81       	ld	r24, Z
    1310:	8f 7b       	andi	r24, 0xBF	; 191
    1312:	80 83       	st	Z, r24

00001314 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	3f 91       	pop	r19
    1326:	2f 91       	pop	r18
    1328:	2b bf       	out	0x3b, r18	; 59
    132a:	2f 91       	pop	r18
    132c:	1f 90       	pop	r1
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	18 95       	reti

00001336 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
    1336:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    133a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

0000133e <.Loc.48>:
    133e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <start_time.0>
    1342:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <start_time.0+0x1>
    1346:	28 1b       	sub	r18, r24
    1348:	39 0b       	sbc	r19, r25

0000134a <.Loc.49>:
    134a:	a9 e0       	ldi	r26, 0x09	; 9
    134c:	bc e8       	ldi	r27, 0x8C	; 140
    134e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__umulhisi3>
    1352:	00 24       	eor	r0, r0
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	00 1c       	adc	r0, r0
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	00 1c       	adc	r0, r0
    1360:	89 2f       	mov	r24, r25
    1362:	90 2d       	mov	r25, r0

00001364 <.Loc.50>:
        if (current_sensor == 0) {
    1364:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <current_sensor>
    1368:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <current_sensor+0x1>

0000136c <.Loc.52>:
    136c:	23 2b       	or	r18, r19
    136e:	c9 f4       	brne	.+50     	; 0x13a2 <.L8>

00001370 <.Loc.53>:
            distance_right = distance;  // Store distance for Sensor A
    1370:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <distance_right+0x1>
    1374:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <distance_right>

00001378 <.L9>:
        if (current_sensor == 0) {
    1378:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <current_sensor>
    137c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <current_sensor+0x1>

00001380 <.Loc.57>:
    1380:	89 2b       	or	r24, r25
    1382:	a1 f4       	brne	.+40     	; 0x13ac <.L10>

00001384 <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <current_sensor+0x1>
    138c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <current_sensor>

00001390 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
    1390:	e0 e2       	ldi	r30, 0x20	; 32
    1392:	f1 e0       	ldi	r31, 0x01	; 1
    1394:	80 81       	ld	r24, Z
    1396:	87 7f       	andi	r24, 0xF7	; 247
    1398:	80 83       	st	Z, r24

0000139a <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
    139a:	80 81       	ld	r24, Z

0000139c <.Loc.63>:
    139c:	80 62       	ori	r24, 0x20	; 32
    139e:	80 83       	st	Z, r24
    13a0:	b9 cf       	rjmp	.-142    	; 0x1314 <.L5>

000013a2 <.L8>:
            distance_left = distance;  // Store distance for Sensor B
    13a2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <distance_left+0x1>
    13a6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <distance_left>
    13aa:	e6 cf       	rjmp	.-52     	; 0x1378 <.L9>

000013ac <.L10>:
            current_sensor = 0;  // Switch to Sensor A
    13ac:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <current_sensor+0x1>
    13b0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <current_sensor>

000013b4 <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
    13b4:	e0 e2       	ldi	r30, 0x20	; 32
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	80 81       	ld	r24, Z
    13ba:	8f 7d       	andi	r24, 0xDF	; 223
    13bc:	80 83       	st	Z, r24

000013be <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
    13be:	80 81       	ld	r24, Z

000013c0 <.Loc.71>:
    13c0:	88 60       	ori	r24, 0x08	; 8
    13c2:	80 83       	st	Z, r24

000013c4 <.LBE2>:
}
    13c4:	a7 cf       	rjmp	.-178    	; 0x1314 <.L5>

000013c6 <__divmodhi4>:
    13c6:	97 fb       	bst	r25, 7

000013c8 <.Loc.1>:
    13c8:	07 2e       	mov	r0, r23

000013ca <.Loc.2>:
    13ca:	16 f4       	brtc	.+4      	; 0x13d0 <.L^B1>

000013cc <.Loc.3>:
    13cc:	00 94       	com	r0

000013ce <.Loc.4>:
    13ce:	07 d0       	rcall	.+14     	; 0x13de <__divmodhi4_neg1>

000013d0 <.L^B1>:
    13d0:	77 fd       	sbrc	r23, 7

000013d2 <.Loc.6>:
    13d2:	09 d0       	rcall	.+18     	; 0x13e6 <__divmodhi4_neg2>

000013d4 <.Loc.7>:
    13d4:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodhi4>

000013d8 <.Loc.8>:
    13d8:	07 fc       	sbrc	r0, 7

000013da <.Loc.9>:
    13da:	05 d0       	rcall	.+10     	; 0x13e6 <__divmodhi4_neg2>

000013dc <.Loc.10>:
    13dc:	3e f4       	brtc	.+14     	; 0x13ec <__divmodhi4_exit>

000013de <__divmodhi4_neg1>:
    13de:	90 95       	com	r25

000013e0 <.Loc.12>:
    13e0:	81 95       	neg	r24

000013e2 <.Loc.13>:
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255

000013e4 <.Loc.14>:
    13e4:	08 95       	ret

000013e6 <__divmodhi4_neg2>:
    13e6:	70 95       	com	r23

000013e8 <.Loc.16>:
    13e8:	61 95       	neg	r22

000013ea <.Loc.17>:
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255

000013ec <__divmodhi4_exit>:
    13ec:	08 95       	ret

000013ee <__umulhisi3>:
    13ee:	a2 9f       	mul	r26, r18

000013f0 <.Loc.1>:
    13f0:	b0 01       	movw	r22, r0

000013f2 <.Loc.2>:
    13f2:	b3 9f       	mul	r27, r19

000013f4 <.Loc.3>:
    13f4:	c0 01       	movw	r24, r0

000013f6 <.Loc.4>:
    13f6:	a3 9f       	mul	r26, r19

000013f8 <.Loc.5>:
    13f8:	70 0d       	add	r23, r0

000013fa <.Loc.6>:
    13fa:	81 1d       	adc	r24, r1

000013fc <.Loc.7>:
    13fc:	11 24       	eor	r1, r1

000013fe <.Loc.8>:
    13fe:	91 1d       	adc	r25, r1

00001400 <.Loc.9>:
    1400:	b2 9f       	mul	r27, r18

00001402 <.Loc.10>:
    1402:	70 0d       	add	r23, r0

00001404 <.Loc.11>:
    1404:	81 1d       	adc	r24, r1

00001406 <.Loc.12>:
    1406:	11 24       	eor	r1, r1

00001408 <.Loc.13>:
    1408:	91 1d       	adc	r25, r1

0000140a <.Loc.14>:
    140a:	08 95       	ret

0000140c <__udivmodhi4>:
    140c:	aa 1b       	sub	r26, r26

0000140e <.Loc.1>:
    140e:	bb 1b       	sub	r27, r27

00001410 <.Loc.2>:
    1410:	51 e1       	ldi	r21, 0x11	; 17

00001412 <.Loc.3>:
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <__udivmodhi4_ep>

00001414 <__udivmodhi4_loop>:
    1414:	aa 1f       	adc	r26, r26

00001416 <.Loc.5>:
    1416:	bb 1f       	adc	r27, r27

00001418 <.Loc.6>:
    1418:	a6 17       	cp	r26, r22

0000141a <.Loc.7>:
    141a:	b7 07       	cpc	r27, r23

0000141c <.Loc.8>:
    141c:	10 f0       	brcs	.+4      	; 0x1422 <__udivmodhi4_ep>

0000141e <.Loc.9>:
    141e:	a6 1b       	sub	r26, r22

00001420 <.Loc.10>:
    1420:	b7 0b       	sbc	r27, r23

00001422 <__udivmodhi4_ep>:
    1422:	88 1f       	adc	r24, r24

00001424 <.Loc.12>:
    1424:	99 1f       	adc	r25, r25

00001426 <.Loc.13>:
    1426:	5a 95       	dec	r21

00001428 <.Loc.14>:
    1428:	a9 f7       	brne	.-22     	; 0x1414 <__udivmodhi4_loop>

0000142a <.Loc.15>:
    142a:	80 95       	com	r24

0000142c <.Loc.16>:
    142c:	90 95       	com	r25

0000142e <.Loc.17>:
    142e:	bc 01       	movw	r22, r24

00001430 <.Loc.18>:
    1430:	cd 01       	movw	r24, r26

00001432 <.Loc.19>:
    1432:	08 95       	ret

00001434 <_exit>:
    1434:	f8 94       	cli

00001436 <__stop_program>:
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <__stop_program>
