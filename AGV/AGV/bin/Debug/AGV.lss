
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000ff0  000010a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800222  00800222  000010c6  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000010c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000218  00000000  00000000  00001120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000271c  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001384  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00002181  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000005f4  00000000  00000000  00006f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000009a4  00000000  00000000  00007550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000214  00000000  00000000  00007ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000001e0  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001f  00000000  00000000  000082e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_35>
  90:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_45>
  b8:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e0 ef       	ldi	r30, 0xF0	; 240

000000fc <.Loc.4>:
  fc:	ff e0       	ldi	r31, 0x0F	; 15

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	ae 33       	cpi	r26, 0x3E	; 62

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 15 03 	call	0x62a	; 0x62a <main>
 122:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initSerialCom>:
#include "Debugging.h"

///serial com for debugging
void initSerialCom(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr >> 8);
 12a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

0000012e <.Loc.3>:
    UBRR0L = (unsigned char)ubrr;
 12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

00000132 <.Loc.5>:

    // Enable transmitter
    UCSR0B = (1 << TXEN0);
 132:	88 e0       	ldi	r24, 0x08	; 8

00000134 <.Loc.7>:
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

00000138 <.Loc.8>:

    // Set frame format: 8data, 1stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

0000013e <.Loc.10>:
}
 13e:	08 95       	ret

00000140 <SerialComTransmit>:

void SerialComTransmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)));
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0

00000144 <.L3>:
 144:	90 81       	ld	r25, Z

00000146 <.Loc.16>:
 146:	95 ff       	sbrs	r25, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <.L3>

0000014a <.Loc.17>:
    // Put data into buffer, sends the data
    UDR0 = data;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

0000014e <.Loc.19>:
}
 14e:	08 95       	ret

00000150 <Serialprint>:

void Serialprint(const char *s) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	c8 2f       	mov	r28, r24
 156:	d9 2f       	mov	r29, r25

00000158 <.Loc.22>:
    while (*s) {
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <.L5>
 15e:	21 96       	adiw	r28, 0x01	; 1

00000160 <.L7>:
        SerialComTransmit(*s++);
 160:	0e 94 a0 00 	call	0x140	; 0x140 <SerialComTransmit>

00000164 <.LVL6>:
    while (*s) {
 164:	89 91       	ld	r24, Y+

00000166 <.Loc.27>:
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <.L7>

0000016a <.L5>:
    }
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 170:	ea e0       	ldi	r30, 0x0A	; 10
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z

00000176 <.Loc.2>:
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24

0000017a <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 17a:	eb e0       	ldi	r30, 0x0B	; 11
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z

00000180 <.Loc.4>:
 180:	80 68       	ori	r24, 0x80	; 128
 182:	80 83       	st	Z, r24

00000184 <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 184:	80 81       	ld	r24, Z

00000186 <.Loc.6>:
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24

0000018a <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 18a:	80 81       	ld	r24, Z
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	80 83       	st	Z, r24

00000190 <.Loc.9>:
}
 190:	08 95       	ret

00000192 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 192:	ea e0       	ldi	r30, 0x0A	; 10
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	80 81       	ld	r24, Z

00000198 <.Loc.12>:
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 83       	st	Z, r24

0000019c <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 19c:	eb e0       	ldi	r30, 0x0B	; 11
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 7b       	andi	r24, 0xBF	; 191
 1a4:	80 83       	st	Z, r24

000001a6 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 1a6:	80 81       	ld	r24, Z

000001a8 <.Loc.16>:
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24

000001ac <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 1ac:	80 81       	ld	r24, Z

000001ae <.Loc.18>:
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	80 83       	st	Z, r24

000001b2 <.Loc.19>:
}
 1b2:	08 95       	ret

000001b4 <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 1b4:	ea e0       	ldi	r30, 0x0A	; 10
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	90 81       	ld	r25, Z

000001ba <.Loc.22>:
 1ba:	90 68       	ori	r25, 0x80	; 128
 1bc:	90 83       	st	Z, r25

000001be <.Loc.23>:
 1be:	28 e0       	ldi	r18, 0x08	; 8
 1c0:	30 e0       	ldi	r19, 0x00	; 0

000001c2 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 1c2:	eb e0       	ldi	r30, 0x0B	; 11
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <.L6>

000001c8 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 1c8:	90 81       	ld	r25, Z
 1ca:	9f 77       	andi	r25, 0x7F	; 127
 1cc:	90 83       	st	Z, r25

000001ce <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 1ce:	90 81       	ld	r25, Z

000001d0 <.Loc.31>:
 1d0:	90 64       	ori	r25, 0x40	; 64
 1d2:	90 83       	st	Z, r25

000001d4 <.Loc.32>:
        data >>= 1;
 1d4:	86 95       	lsr	r24

000001d6 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1

000001da <.Loc.36>:
 1da:	21 15       	cp	r18, r1
 1dc:	31 05       	cpc	r19, r1
 1de:	49 f0       	breq	.+18     	; 0x1f2 <.L8>

000001e0 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 1e0:	90 81       	ld	r25, Z
 1e2:	9f 7b       	andi	r25, 0xBF	; 191
 1e4:	90 83       	st	Z, r25

000001e6 <.Loc.39>:
        if(data & 0x01){
 1e6:	80 ff       	sbrs	r24, 0
 1e8:	ef cf       	rjmp	.-34     	; 0x1c8 <.L4>

000001ea <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 1ea:	90 81       	ld	r25, Z

000001ec <.Loc.42>:
 1ec:	90 68       	ori	r25, 0x80	; 128
 1ee:	90 83       	st	Z, r25
 1f0:	ee cf       	rjmp	.-36     	; 0x1ce <.L5>

000001f2 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 1f2:	eb e0       	ldi	r30, 0x0B	; 11
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	80 81       	ld	r24, Z

000001f8 <.Loc.46>:
 1f8:	8f 7b       	andi	r24, 0xBF	; 191
 1fa:	80 83       	st	Z, r24

000001fc <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 1fc:	80 81       	ld	r24, Z

000001fe <.Loc.48>:
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24

00000202 <.Loc.49>:
}
 202:	08 95       	ret

00000204 <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24

00000208 <.Loc.52>:
    display_start();
 208:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

0000020c <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 20c:	8c 2f       	mov	r24, r28
 20e:	87 70       	andi	r24, 0x07	; 7
 210:	88 68       	ori	r24, 0x88	; 136
 212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000216 <.LVL9>:
    display_stop();
 216:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000021a <.LVL10>:
}
 21a:	cf 91       	pop	r28

0000021c <.Loc.56>:
 21c:	08 95       	ret

0000021e <display_number>:

// Display 4 digit integer
void display_number(int number){
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	d8 2f       	mov	r29, r24
 22a:	c9 2f       	mov	r28, r25

0000022c <.Loc.59>:
    display_start();
 22c:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

00000230 <.LVL13>:
    display_sendbyte(0x40);
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000236 <.LVL14>:
    display_stop();
 236:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000023a <.LVL15>:
 23a:	13 ec       	ldi	r17, 0xC3	; 195

0000023c <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 23c:	0f 2e       	mov	r0, r31
 23e:	fa e0       	ldi	r31, 0x0A	; 10
 240:	ef 2e       	mov	r14, r31
 242:	f1 2c       	mov	r15, r1
 244:	f0 2d       	mov	r31, r0

00000246 <.L11>:
        display_start();
 246:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

0000024a <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 24a:	81 2f       	mov	r24, r17
 24c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000250 <.LVL18>:
        display_sendbyte(digits[number%10]);
 250:	8d 2f       	mov	r24, r29
 252:	9c 2f       	mov	r25, r28
 254:	b7 01       	movw	r22, r14
 256:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divmodhi4>
 25a:	d6 2f       	mov	r29, r22

0000025c <.Loc.71>:
 25c:	c7 2f       	mov	r28, r23

0000025e <.Loc.72>:
 25e:	fc 01       	movw	r30, r24
 260:	ec 5e       	subi	r30, 0xEC	; 236
 262:	fd 4f       	sbci	r31, 0xFD	; 253

00000264 <.Loc.73>:
 264:	80 81       	ld	r24, Z
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

0000026a <.LVL20>:
        number /= 10;
        display_stop();
 26a:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000026e <.LVL21>:
    for (int i = 0; i < 4; i++) {
 26e:	11 50       	subi	r17, 0x01	; 1
 270:	1f 3b       	cpi	r17, 0xBF	; 191
 272:	49 f7       	brne	.-46     	; 0x246 <.L11>

00000274 <.Loc.78>:
    }
}
 274:	df 91       	pop	r29

00000276 <.Loc.79>:
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	c8 2f       	mov	r28, r24
 288:	d9 2f       	mov	r29, r25
 28a:	16 2f       	mov	r17, r22

0000028c <.Loc.82>:
    display_start();
 28c:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

00000290 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 290:	80 ec       	ldi	r24, 0xC0	; 192
 292:	81 0f       	add	r24, r17
 294:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000298 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 298:	c0 50       	subi	r28, 0x00	; 0
 29a:	de 4f       	sbci	r29, 0xFE	; 254

0000029c <.Loc.86>:
 29c:	88 81       	ld	r24, Y
 29e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

000002a2 <.LVL26>:
    display_stop();
 2a2:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

000002a6 <.LVL27>:
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17

000002ac <.Loc.89>:
 2ac:	08 95       	ret

000002ae <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 2ae:	ea e0       	ldi	r30, 0x0A	; 10
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	80 81       	ld	r24, Z

000002b4 <.Loc.92>:
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	80 83       	st	Z, r24

000002b8 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 2b8:	80 81       	ld	r24, Z

000002ba <.Loc.94>:
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	80 83       	st	Z, r24

000002be <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 2be:	eb e0       	ldi	r30, 0x0B	; 11
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	80 81       	ld	r24, Z

000002c4 <.Loc.96>:
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24

000002c8 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 2c8:	80 81       	ld	r24, Z

000002ca <.Loc.98>:
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24

000002ce <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 2ce:	87 e0       	ldi	r24, 0x07	; 7
 2d0:	0e 94 02 01 	call	0x204	; 0x204 <display_brightness>

000002d4 <.LVL29>:
}
 2d4:	08 95       	ret

000002d6 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	83 e1       	ldi	r24, 0x13	; 19
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002e0 <.LVL30>:
    display_letter(3, 1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002ea <.LVL31>:
    display_letter(6, 2);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002f4 <.LVL32>:
    display_letter(7, 3);
 2f4:	63 e0       	ldi	r22, 0x03	; 3
 2f6:	87 e0       	ldi	r24, 0x07	; 7
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002fe <.LVL33>:
}
 2fe:	08 95       	ret

00000300 <display_fol>:

void display_fol(void){
    display_letter(19, 0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	83 e1       	ldi	r24, 0x13	; 19
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000030a <.LVL34>:
    display_letter(6, 1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000314 <.LVL35>:
    display_letter(13, 2);
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000031e <.LVL36>:
    display_letter(11, 3);
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	8b e0       	ldi	r24, 0x0B	; 11
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000328 <.LVL37>:
}
 328:	08 95       	ret

0000032a <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	83 e1       	ldi	r24, 0x13	; 19
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000334 <.LVL38>:
    display_letter(3, 1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000033e <.LVL39>:
    display_letter(12, 2);
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000348 <.LVL40>:
    display_letter(17, 3);
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	81 e1       	ldi	r24, 0x11	; 17
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000352 <.LVL41>:
}
 352:	08 95       	ret

00000354 <display_turn>:

void display_turn(void){
    display_letter(17, 0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	81 e1       	ldi	r24, 0x11	; 17
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000035e <.LVL42>:
    display_letter(18, 1);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	82 e1       	ldi	r24, 0x12	; 18
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000368 <.LVL43>:
    display_letter(15, 2);
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000372 <.LVL44>:
    display_letter(12, 3);
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	8c e0       	ldi	r24, 0x0C	; 12
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000037c <.LVL45>:
}
 37c:	08 95       	ret

0000037e <display_dist>:

void display_dist(void){
    display_letter(4, 0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000388 <.LVL46>:
    display_letter(9, 1);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	89 e0       	ldi	r24, 0x09	; 9
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000392 <.LVL47>:
    display_letter(16, 2);
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	80 e1       	ldi	r24, 0x10	; 16
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000039c <.LVL48>:
    display_letter(17, 3);
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	81 e1       	ldi	r24, 0x11	; 17
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003a6 <.LVL49>:
}
 3a6:	08 95       	ret

000003a8 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	83 e1       	ldi	r24, 0x13	; 19
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003b2 <.LVL50>:
    display_letter(14, 1);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	8e e0       	ldi	r24, 0x0E	; 14
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003bc <.LVL51>:
    display_letter(1, 2);
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003c6 <.LVL52>:
    display_letter(3, 3);
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003d0 <.LVL53>:
}
 3d0:	08 95       	ret

000003d2 <display_mode>:
    if(mode){
 3d2:	88 23       	and	r24, r24
 3d4:	19 f0       	breq	.+6      	; 0x3dc <.L22>

000003d6 <.Loc.140>:
        display_fol();
 3d6:	0e 94 80 01 	call	0x300	; 0x300 <display_fol>

000003da <.LVL55>:
 3da:	08 95       	ret

000003dc <.L22>:
        display_pac();
 3dc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_pac>

000003e0 <.LVL57>:
}
 3e0:	08 95       	ret

000003e2 <display_left>:

void display_left(void){
    display_letter(11, 0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	8b e0       	ldi	r24, 0x0B	; 11
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003ec <.LVL58>:
    display_letter(5, 1);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003f6 <.LVL59>:
    display_letter(6, 2);
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000400 <.LVL60>:
    display_letter(17, 3);
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	81 e1       	ldi	r24, 0x11	; 17
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000040a <.LVL61>:
}
 40a:	08 95       	ret

0000040c <display_rght>:

void display_rght(void){
    display_letter(15, 0);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	8f e0       	ldi	r24, 0x0F	; 15
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000416 <.LVL62>:
    display_letter(7, 1);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	87 e0       	ldi	r24, 0x07	; 7
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000420 <.LVL63>:
    display_letter(8, 2);
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000042a <.LVL64>:
    display_letter(17, 3);
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	81 e1       	ldi	r24, 0x11	; 17
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000434 <.LVL65>:
}
 434:	08 95       	ret

00000436 <display_direction>:
    if(dir){
 436:	88 23       	and	r24, r24
 438:	19 f0       	breq	.+6      	; 0x440 <.L27>

0000043a <.Loc.159>:
        display_rght();
 43a:	0e 94 06 02 	call	0x40c	; 0x40c <display_rght>

0000043e <.LVL67>:
 43e:	08 95       	ret

00000440 <.L27>:
        display_left();
 440:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <display_left>

00000444 <.LVL69>:
}
 444:	08 95       	ret

00000446 <display_go>:

void display_go(void){
    display_letter(19, 0);
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	83 e1       	ldi	r24, 0x13	; 19
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000450 <.LVL70>:
    display_letter(19, 1);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	83 e1       	ldi	r24, 0x13	; 19
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000045a <.LVL71>:
    display_letter(7, 2);
 45a:	62 e0       	ldi	r22, 0x02	; 2
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000464 <.LVL72>:
    display_letter(13, 3);
 464:	63 e0       	ldi	r22, 0x03	; 3
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000046e <.LVL73>:
}
 46e:	08 95       	ret

00000470 <display_end>:

void display_end(void){
    display_letter(19, 0);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	83 e1       	ldi	r24, 0x13	; 19
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000047a <.LVL74>:
    display_letter(5, 1);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000484 <.LVL75>:
    display_letter(12, 2);
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000048e <.LVL76>:
    display_letter(4, 3);
 48e:	63 e0       	ldi	r22, 0x03	; 3
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000498 <.LVL77>:
}
 498:	08 95       	ret

0000049a <display_srch>:

void display_srch(void){
    display_letter(16, 0);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	80 e1       	ldi	r24, 0x10	; 16
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004a4 <.LVL78>:
    display_letter(15, 1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ae <.LVL79>:
    display_letter(3, 2);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004b8 <.LVL80>:
    display_letter(8, 3);
 4b8:	63 e0       	ldi	r22, 0x03	; 3
 4ba:	88 e0       	ldi	r24, 0x08	; 8
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004c2 <.LVL81>:
}
 4c2:	08 95       	ret

000004c4 <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ce <.LVL82>:
    display_letter(17, 1);
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	81 e1       	ldi	r24, 0x11	; 17
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004d8 <.LVL83>:
    display_letter(13, 2);
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004e2 <.LVL84>:
    display_letter(14, 3);
 4e2:	63 e0       	ldi	r22, 0x03	; 3
 4e4:	8e e0       	ldi	r24, 0x0E	; 14
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ec <.LVL85>:
}
 4ec:	08 95       	ret

000004ee <interpreter>:
*/



void interpreter(){
    if(serialData==0x01){    //commmando bewegen
 4ee:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 4f2:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	c1 f1       	breq	.+112    	; 0x56a <.L11>

000004fa <.L2>:
        rechtdoor();
    }
    if(serialData==0x02){    //commmando bewegen
 4fa:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 4fe:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 502:	02 97       	sbiw	r24, 0x02	; 2
 504:	a9 f1       	breq	.+106    	; 0x570 <.L12>

00000506 <.L3>:
        rechtdoorAnd();
    }
    if(serialData==0xA1){
 506:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 50a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 50e:	81 3a       	cpi	r24, 0xA1	; 161
 510:	91 05       	cpc	r25, r1
 512:	89 f1       	breq	.+98     	; 0x576 <.L13>

00000514 <.L4>:
        achteruit();
    }
    if(serialData==0xB1){
 514:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 518:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 51c:	81 3b       	cpi	r24, 0xB1	; 177
 51e:	91 05       	cpc	r25, r1
 520:	69 f1       	breq	.+90     	; 0x57c <.L14>

00000522 <.L5>:
        rechtsom();
    }
    if(serialData==0xB2){
 522:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 526:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 52a:	82 3b       	cpi	r24, 0xB2	; 178
 52c:	91 05       	cpc	r25, r1
 52e:	49 f1       	breq	.+82     	; 0x582 <.L15>

00000530 <.L6>:
        linksom();
    }
    if(serialData==0xD1){
 530:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 534:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 538:	81 3d       	cpi	r24, 0xD1	; 209
 53a:	91 05       	cpc	r25, r1
 53c:	29 f1       	breq	.+74     	; 0x588 <.L16>

0000053e <.L7>:
        kwartslagDraaienRechts();
    }
    if(serialData==0xD2){
 53e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 542:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 546:	82 3d       	cpi	r24, 0xD2	; 210
 548:	91 05       	cpc	r25, r1
 54a:	09 f1       	breq	.+66     	; 0x58e <.L17>

0000054c <.L8>:
        kwartslagDraaienLinks();
    }
    if(serialData==0xD3){
 54c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 550:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 554:	83 3d       	cpi	r24, 0xD3	; 211
 556:	91 05       	cpc	r25, r1
 558:	e9 f0       	breq	.+58     	; 0x594 <.L18>

0000055a <.L9>:
        Pirouette();
    }
    if(serialData==0xFF){
 55a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 55e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 562:	8f 3f       	cpi	r24, 0xFF	; 255
 564:	91 05       	cpc	r25, r1
 566:	c9 f0       	breq	.+50     	; 0x59a <.L19>

00000568 <.L1>:
        stop();
    }
}
 568:	08 95       	ret

0000056a <.L11>:
        rechtdoor();
 56a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <rechtdoor>

0000056e <.LVL0>:
 56e:	c5 cf       	rjmp	.-118    	; 0x4fa <.L2>

00000570 <.L12>:
        rechtdoorAnd();
 570:	0e 94 b9 03 	call	0x772	; 0x772 <rechtdoorAnd>

00000574 <.LVL1>:
 574:	c8 cf       	rjmp	.-112    	; 0x506 <.L3>

00000576 <.L13>:
        achteruit();
 576:	0e 94 21 04 	call	0x842	; 0x842 <achteruit>

0000057a <.LVL2>:
 57a:	cc cf       	rjmp	.-104    	; 0x514 <.L4>

0000057c <.L14>:
        rechtsom();
 57c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rechtsom>

00000580 <.LVL3>:
 580:	d0 cf       	rjmp	.-96     	; 0x522 <.L5>

00000582 <.L15>:
        linksom();
 582:	0e 94 7d 04 	call	0x8fa	; 0x8fa <linksom>

00000586 <.LVL4>:
 586:	d4 cf       	rjmp	.-88     	; 0x530 <.L6>

00000588 <.L16>:
        kwartslagDraaienRechts();
 588:	0e 94 58 05 	call	0xab0	; 0xab0 <kwartslagDraaienRechts>

0000058c <.LVL5>:
 58c:	d8 cf       	rjmp	.-80     	; 0x53e <.L7>

0000058e <.L17>:
        kwartslagDraaienLinks();
 58e:	0e 94 77 05 	call	0xaee	; 0xaee <kwartslagDraaienLinks>

00000592 <.LVL6>:
 592:	dc cf       	rjmp	.-72     	; 0x54c <.L8>

00000594 <.L18>:
        Pirouette();
 594:	0e 94 96 05 	call	0xb2c	; 0xb2c <Pirouette>

00000598 <.LVL7>:
 598:	e0 cf       	rjmp	.-64     	; 0x55a <.L9>

0000059a <.L19>:
        stop();
 59a:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

0000059e <.LVL8>:
}
 59e:	e4 cf       	rjmp	.-56     	; 0x568 <.L1>

000005a0 <initKnipperLicht>:
#define LAR PC3
#define LAL PC7
#define PORTLED PORTC
#define DDRLED  DDRC
void initKnipperLicht(void){
    DDRLED |= (1<<LVR);
 5a0:	39 9a       	sbi	0x07, 1	; 7

000005a2 <.Loc.3>:
    DDRLED |= (1<<LVL);
 5a2:	3d 9a       	sbi	0x07, 5	; 7

000005a4 <.Loc.5>:
    DDRLED |= (1<<LAR);
 5a4:	3b 9a       	sbi	0x07, 3	; 7

000005a6 <.Loc.7>:
    DDRLED |= (1<<LAL);
 5a6:	3f 9a       	sbi	0x07, 7	; 7

000005a8 <.Loc.9>:
}
 5a8:	08 95       	ret

000005aa <toggleKnipperRechts>:

void toggleKnipperRechts(void){
    static int state = 0;
    if(state == 0){
 5aa:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <state.2>
 5ae:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <state.2+0x1>
 5b2:	89 2b       	or	r24, r25
 5b4:	49 f4       	brne	.+18     	; 0x5c8 <.L3>

000005b6 <.Loc.14>:
        PORTLED |= (1<<LVR);
 5b6:	41 9a       	sbi	0x08, 1	; 8

000005b8 <.Loc.16>:
        PORTLED |= (1<<LAR);
 5b8:	43 9a       	sbi	0x08, 3	; 8

000005ba <.Loc.18>:
        state = 1;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0

000005be <.L4>:
 5be:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <state.2+0x1>
 5c2:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <state.2>

000005c6 <.Loc.20>:
    else{
        PORTLED &= ~(1<<LVR);
        PORTLED &= ~(1<<LAR);
        state = 0;
    }
}
 5c6:	08 95       	ret

000005c8 <.L3>:
        PORTLED &= ~(1<<LVR);
 5c8:	41 98       	cbi	0x08, 1	; 8

000005ca <.Loc.23>:
        PORTLED &= ~(1<<LAR);
 5ca:	43 98       	cbi	0x08, 3	; 8

000005cc <.Loc.25>:
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	f6 cf       	rjmp	.-20     	; 0x5be <.L4>

000005d2 <toggleKnipperLinks>:

void toggleKnipperLinks(void){
    static int state = 0;
    if(state == 0){
 5d2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <state.1>
 5d6:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <state.1+0x1>
 5da:	89 2b       	or	r24, r25
 5dc:	49 f4       	brne	.+18     	; 0x5f0 <.L6>

000005de <.Loc.31>:
        PORTLED |= (1<<LVL);
 5de:	45 9a       	sbi	0x08, 5	; 8

000005e0 <.Loc.33>:
        PORTLED |= (1<<LAL);
 5e0:	47 9a       	sbi	0x08, 7	; 8

000005e2 <.Loc.35>:
        state = 1;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0

000005e6 <.L7>:
 5e6:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <state.1+0x1>
 5ea:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <state.1>

000005ee <.Loc.37>:
    else{
        PORTLED &= ~(1<<LVL);
        PORTLED &= ~(1<<LAL);
        state = 0;
    }
}
 5ee:	08 95       	ret

000005f0 <.L6>:
        PORTLED &= ~(1<<LVL);
 5f0:	45 98       	cbi	0x08, 5	; 8

000005f2 <.Loc.40>:
        PORTLED &= ~(1<<LAL);
 5f2:	47 98       	cbi	0x08, 7	; 8

000005f4 <.Loc.42>:
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	f6 cf       	rjmp	.-20     	; 0x5e6 <.L7>

000005fa <toggleKnipperNood>:

void toggleKnipperNood(void){
    static int state = 0;
    if(state == 0){
 5fa:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <state.0>
 5fe:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <state.0+0x1>
 602:	89 2b       	or	r24, r25
 604:	59 f4       	brne	.+22     	; 0x61c <.L9>

00000606 <.Loc.48>:
        PORTLED |= (1<<LVL);
 606:	45 9a       	sbi	0x08, 5	; 8

00000608 <.Loc.50>:
        PORTLED |= (1<<LAL);
 608:	47 9a       	sbi	0x08, 7	; 8

0000060a <.Loc.52>:
        PORTLED |= (1<<LVR);
 60a:	41 9a       	sbi	0x08, 1	; 8

0000060c <.Loc.54>:
        PORTLED |= (1<<LAR);
 60c:	43 9a       	sbi	0x08, 3	; 8

0000060e <.Loc.56>:
        state = 1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0

00000612 <.L10>:
 612:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <state.0+0x1>
 616:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <state.0>

0000061a <.Loc.58>:
        PORTLED &= ~(1<<LAL);
        PORTLED &= ~(1<<LVR);
        PORTLED &= ~(1<<LAR);
        state = 0;
    }
}
 61a:	08 95       	ret

0000061c <.L9>:
        PORTLED &= ~(1<<LVL);
 61c:	45 98       	cbi	0x08, 5	; 8

0000061e <.Loc.61>:
        PORTLED &= ~(1<<LAL);
 61e:	47 98       	cbi	0x08, 7	; 8

00000620 <.Loc.63>:
        PORTLED &= ~(1<<LVR);
 620:	41 98       	cbi	0x08, 1	; 8

00000622 <.Loc.65>:
        PORTLED &= ~(1<<LAR);
 622:	43 98       	cbi	0x08, 3	; 8

00000624 <.Loc.67>:
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	f4 cf       	rjmp	.-24     	; 0x612 <.L10>

0000062a <main>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1

int main(void)
{
    initNoodstop();
 62a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <initNoodstop>

0000062e <.LVL0>:
    initStepper();
 62e:	0e 94 2c 06 	call	0xc58	; 0xc58 <initStepper>

00000632 <.LVL1>:
    init_ultrasoon();
 632:	0e 94 2b 07 	call	0xe56	; 0xe56 <init_ultrasoon>

00000636 <.LVL2>:
    initUsart();
 636:	0e 94 be 06 	call	0xd7c	; 0xd7c <initUsart>

0000063a <.LVL3>:
    flushUsart2Buffer();
 63a:	0e 94 d2 06 	call	0xda4	; 0xda4 <flushUsart2Buffer>

0000063e <.LVL4>:
    initKnipperLicht();
 63e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <initKnipperLicht>

00000642 <.LVL5>:
    sei();
 642:	78 94       	sei

00000644 <.L2>:

    while(1){
        interpreter();
 644:	0e 94 77 02 	call	0x4ee	; 0x4ee <interpreter>

00000648 <.LVL6>:
    while(1){
 648:	fd cf       	rjmp	.-6      	; 0x644 <.L2>

0000064a <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 64a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 64e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
 652:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 656:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 65a:	82 0f       	add	r24, r18
 65c:	93 1f       	adc	r25, r19

0000065e <.Loc.3>:
 65e:	0d 96       	adiw	r24, 0x0d	; 13

00000660 <.Loc.4>:
 660:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <padbreedte+0x1>
 664:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <padbreedte>

00000668 <.Loc.5>:
}
 668:	08 95       	ret

0000066a <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(1150);
 66a:	8e e7       	ldi	r24, 0x7E	; 126
 66c:	94 e0       	ldi	r25, 0x04	; 4
 66e:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000672 <.LVL0>:
    speedStepperRight(1150);
 672:	8e e7       	ldi	r24, 0x7E	; 126
 674:	94 e0       	ldi	r25, 0x04	; 4
 676:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

0000067a <.LVL1>:
}
 67a:	08 95       	ret

0000067c <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000684 <.LVL2>:
    speedStepperRight(0);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

0000068c <.LVL3>:
}
 68c:	08 95       	ret

0000068e <ramping>:

int ramping(int originalValue , int value){
 68e:	26 2f       	mov	r18, r22
 690:	37 2f       	mov	r19, r23

00000692 <.Loc.16>:
    if(originalValue > value){
 692:	28 17       	cp	r18, r24
 694:	39 07       	cpc	r19, r25
 696:	0c f4       	brge	.+2      	; 0x69a <.L5>

00000698 <.Loc.18>:
            originalValue --;
 698:	01 97       	sbiw	r24, 0x01	; 1

0000069a <.L5>:
    }
    if(originalValue < value){
 69a:	82 17       	cp	r24, r18
 69c:	93 07       	cpc	r25, r19
 69e:	0c f4       	brge	.+2      	; 0x6a2 <.L6>

000006a0 <.Loc.22>:
            originalValue ++;
 6a0:	01 96       	adiw	r24, 0x01	; 1

000006a2 <.L6>:
    }
    return originalValue;
}
 6a2:	08 95       	ret

000006a4 <rechtdoor>:

void rechtdoor(void){
    stepperForward();
 6a4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <stepperForward>

000006a8 <.LVL7>:
    while((stopRequest==0)){
 6a8:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 6ac:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
 6b0:	89 2b       	or	r24, r25
 6b2:	b9 f0       	breq	.+46     	; 0x6e2 <.L14>

000006b4 <.L8>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
 6b4:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

000006b8 <.LVL8>:
    stopRequest=0;
 6b8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
 6bc:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

000006c0 <.Loc.33>:
}
 6c0:	08 95       	ret

000006c2 <.L9>:
            sendByte(0x01); //stuur klaar met opdracht
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 ca 06 	call	0xd94	; 0xd94 <sendByte>

000006ca <.LVL9>:
            stopRequest=1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
 6d2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

000006d6 <.L11>:
    while((stopRequest==0)){
 6d6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 6da:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
 6de:	89 2b       	or	r24, r25
 6e0:	49 f7       	brne	.-46     	; 0x6b4 <.L8>

000006e2 <.L14>:
        if((distance_left>25)||(distance_right>25)){  //als agv buiten pad is
 6e2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 6e6:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000006ea <.Loc.40>:
 6ea:	4a 97       	sbiw	r24, 0x1a	; 26
 6ec:	54 f7       	brge	.-44     	; 0x6c2 <.L9>

000006ee <.Loc.41>:
 6ee:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 6f2:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000006f6 <.Loc.42>:
 6f6:	4a 97       	sbiw	r24, 0x1a	; 26
 6f8:	24 f7       	brge	.-56     	; 0x6c2 <.L9>

000006fa <.Loc.43>:
            if (distance_right==distance_left) {
 6fa:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 6fe:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 702:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 706:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

0000070a <.Loc.45>:
 70a:	28 17       	cp	r18, r24
 70c:	39 07       	cpc	r19, r25
 70e:	f9 f0       	breq	.+62     	; 0x74e <.L16>

00000710 <.L12>:
            if (distance_right > distance_left){
 710:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 714:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 718:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 71c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000720 <.Loc.48>:
 720:	82 17       	cp	r24, r18
 722:	93 07       	cpc	r25, r19
 724:	ec f0       	brlt	.+58     	; 0x760 <.L17>

00000726 <.L13>:
            if(distance_left > distance_right){
 726:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
 72a:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
 72e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 732:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000736 <.Loc.51>:
 736:	82 17       	cp	r24, r18
 738:	93 07       	cpc	r25, r19
 73a:	6c f6       	brge	.-102    	; 0x6d6 <.L11>

0000073c <.Loc.52>:
                speedStepperRight(ramping(1650, 1150));
 73c:	81 e7       	ldi	r24, 0x71	; 113
 73e:	96 e0       	ldi	r25, 0x06	; 6
 740:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

00000744 <.LVL10>:
                speedStepperLeft(ramping(1150, 1650));
 744:	8f e7       	ldi	r24, 0x7F	; 127
 746:	94 e0       	ldi	r25, 0x04	; 4
 748:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

0000074c <.LVL11>:
 74c:	c4 cf       	rjmp	.-120    	; 0x6d6 <.L11>

0000074e <.L16>:
            speedStepperLeft(1150);
 74e:	8e e7       	ldi	r24, 0x7E	; 126
 750:	94 e0       	ldi	r25, 0x04	; 4
 752:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000756 <.LVL12>:
            speedStepperRight(1150);
 756:	8e e7       	ldi	r24, 0x7E	; 126
 758:	94 e0       	ldi	r25, 0x04	; 4
 75a:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

0000075e <.LVL13>:
 75e:	d8 cf       	rjmp	.-80     	; 0x710 <.L12>

00000760 <.L17>:
                speedStepperLeft(ramping(1650, 1150));
 760:	81 e7       	ldi	r24, 0x71	; 113
 762:	96 e0       	ldi	r25, 0x06	; 6
 764:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000768 <.LVL14>:
                speedStepperRight(ramping(1150, 1650));
 768:	8f e7       	ldi	r24, 0x7F	; 127
 76a:	94 e0       	ldi	r25, 0x04	; 4
 76c:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

00000770 <.LVL15>:
 770:	da cf       	rjmp	.-76     	; 0x726 <.L13>

00000772 <rechtdoorAnd>:

void rechtdoorAnd(void){
    stepperForward();
 772:	0e 94 b7 06 	call	0xd6e	; 0xd6e <stepperForward>

00000776 <.LVL16>:
    while((stopRequest==0)){
 776:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 77a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
 77e:	89 2b       	or	r24, r25
 780:	71 f1       	breq	.+92     	; 0x7de <.L24>

00000782 <.L19>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
 782:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

00000786 <.LVL17>:
    stopRequest=0;
 786:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
 78a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

0000078e <.Loc.65>:
}
 78e:	08 95       	ret

00000790 <.L20>:
            if (distance_right==distance_left) {
 790:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 794:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 798:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 79c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000007a0 <.Loc.68>:
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	99 f1       	breq	.+102    	; 0x80c <.L26>

000007a6 <.L22>:
            if (distance_right > distance_left){
 7a6:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 7aa:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 7ae:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 7b2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000007b6 <.Loc.71>:
 7b6:	82 17       	cp	r24, r18
 7b8:	93 07       	cpc	r25, r19
 7ba:	8c f1       	brlt	.+98     	; 0x81e <.L27>

000007bc <.L23>:
            if(distance_left > distance_right){
 7bc:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
 7c0:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
 7c4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 7c8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000007cc <.Loc.74>:
 7cc:	82 17       	cp	r24, r18
 7ce:	93 07       	cpc	r25, r19
 7d0:	7c f1       	brlt	.+94     	; 0x830 <.L28>

000007d2 <.L21>:
    while((stopRequest==0)){
 7d2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 7d6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
 7da:	89 2b       	or	r24, r25
 7dc:	91 f6       	brne	.-92     	; 0x782 <.L19>

000007de <.L24>:
        if((distance_left>25)&&(distance_right>25)){  //als agv buiten pad is
 7de:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 7e2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000007e6 <.Loc.78>:
 7e6:	4a 97       	sbiw	r24, 0x1a	; 26
 7e8:	9c f2       	brlt	.-90     	; 0x790 <.L20>

000007ea <.Loc.79>:
 7ea:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 7ee:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000007f2 <.Loc.80>:
 7f2:	4a 97       	sbiw	r24, 0x1a	; 26
 7f4:	6c f2       	brlt	.-102    	; 0x790 <.L20>

000007f6 <.Loc.81>:
            sendByte(0x01); //stuur klaar met opdracht
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 ca 06 	call	0xd94	; 0xd94 <sendByte>

000007fe <.LVL18>:
            stopRequest=1;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
 806:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>
 80a:	e3 cf       	rjmp	.-58     	; 0x7d2 <.L21>

0000080c <.L26>:
            speedStepperLeft(1150);
 80c:	8e e7       	ldi	r24, 0x7E	; 126
 80e:	94 e0       	ldi	r25, 0x04	; 4
 810:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000814 <.LVL19>:
            speedStepperRight(1150);
 814:	8e e7       	ldi	r24, 0x7E	; 126
 816:	94 e0       	ldi	r25, 0x04	; 4
 818:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

0000081c <.LVL20>:
 81c:	c4 cf       	rjmp	.-120    	; 0x7a6 <.L22>

0000081e <.L27>:
                speedStepperLeft(ramping(1650, 1150));
 81e:	81 e7       	ldi	r24, 0x71	; 113
 820:	96 e0       	ldi	r25, 0x06	; 6
 822:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000826 <.LVL21>:
                speedStepperRight(ramping(1150, 1650));
 826:	8f e7       	ldi	r24, 0x7F	; 127
 828:	94 e0       	ldi	r25, 0x04	; 4
 82a:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

0000082e <.LVL22>:
 82e:	c6 cf       	rjmp	.-116    	; 0x7bc <.L23>

00000830 <.L28>:
                speedStepperRight(ramping(1650, 1150));
 830:	81 e7       	ldi	r24, 0x71	; 113
 832:	96 e0       	ldi	r25, 0x06	; 6
 834:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

00000838 <.LVL23>:
                speedStepperLeft(ramping(1150, 1650));
 838:	8f e7       	ldi	r24, 0x7F	; 127
 83a:	94 e0       	ldi	r25, 0x04	; 4
 83c:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

00000840 <.LVL24>:
 840:	c8 cf       	rjmp	.-112    	; 0x7d2 <.L21>

00000842 <achteruit>:

void achteruit(void){
    stepperBackward();
 842:	0e 94 b0 06 	call	0xd60	; 0xd60 <stepperBackward>

00000846 <.LVL25>:
    while(((distance_right<30)||(distance_left<30))||(stopRequest==0)){ //while agv binnen pad
 846:	21 c0       	rjmp	.+66     	; 0x88a <.L30>

00000848 <.L34>:
        if (distance_right==distance_left) {
 848:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 84c:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 850:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 854:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000858 <.Loc.96>:
 858:	28 17       	cp	r18, r24
 85a:	39 07       	cpc	r19, r25
 85c:	99 f1       	breq	.+102    	; 0x8c4 <.L35>

0000085e <.Loc.97>:
            speedStepperLeft(1150);
            speedStepperRight(1150);
        }
        else{
            if (distance_right < distance_left){
 85e:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 862:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 866:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 86a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

0000086e <.Loc.99>:
 86e:	28 17       	cp	r18, r24
 870:	39 07       	cpc	r19, r25
 872:	8c f1       	brlt	.+98     	; 0x8d6 <.L36>

00000874 <.L33>:
                speedStepperLeft(ramping(1650, 1150));
                speedStepperRight(ramping(1150, 1650));
            }
            if(distance_left < distance_right){
 874:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
 878:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
 87c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 880:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000884 <.Loc.102>:
 884:	28 17       	cp	r18, r24
 886:	39 07       	cpc	r19, r25
 888:	7c f1       	brlt	.+94     	; 0x8e8 <.L37>

0000088a <.L30>:
    while(((distance_right<30)||(distance_left<30))||(stopRequest==0)){ //while agv binnen pad
 88a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 88e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000892 <.Loc.105>:
 892:	4e 97       	sbiw	r24, 0x1e	; 30
 894:	cc f2       	brlt	.-78     	; 0x848 <.L34>

00000896 <.Loc.106>:
 896:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 89a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

0000089e <.Loc.107>:
 89e:	4e 97       	sbiw	r24, 0x1e	; 30
 8a0:	9c f2       	brlt	.-90     	; 0x848 <.L34>

000008a2 <.Loc.108>:
 8a2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 8a6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>

000008aa <.Loc.109>:
 8aa:	89 2b       	or	r24, r25
 8ac:	69 f2       	breq	.-102    	; 0x848 <.L34>

000008ae <.Loc.110>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
 8ae:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

000008b2 <.LVL26>:
    stopRequest=0;
 8b2:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
 8b6:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

000008ba <.Loc.113>:
    sendByte(0x01);   //send klaar met opdracht
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 ca 06 	call	0xd94	; 0xd94 <sendByte>

000008c2 <.LVL27>:
}
 8c2:	08 95       	ret

000008c4 <.L35>:
            speedStepperLeft(1150);
 8c4:	8e e7       	ldi	r24, 0x7E	; 126
 8c6:	94 e0       	ldi	r25, 0x04	; 4
 8c8:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

000008cc <.LVL28>:
            speedStepperRight(1150);
 8cc:	8e e7       	ldi	r24, 0x7E	; 126
 8ce:	94 e0       	ldi	r25, 0x04	; 4
 8d0:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

000008d4 <.LVL29>:
 8d4:	da cf       	rjmp	.-76     	; 0x88a <.L30>

000008d6 <.L36>:
                speedStepperLeft(ramping(1650, 1150));
 8d6:	81 e7       	ldi	r24, 0x71	; 113
 8d8:	96 e0       	ldi	r25, 0x06	; 6
 8da:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

000008de <.LVL30>:
                speedStepperRight(ramping(1150, 1650));
 8de:	8f e7       	ldi	r24, 0x7F	; 127
 8e0:	94 e0       	ldi	r25, 0x04	; 4
 8e2:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

000008e6 <.LVL31>:
 8e6:	c6 cf       	rjmp	.-116    	; 0x874 <.L33>

000008e8 <.L37>:
                speedStepperRight(ramping(1650, 1150));
 8e8:	81 e7       	ldi	r24, 0x71	; 113
 8ea:	96 e0       	ldi	r25, 0x06	; 6
 8ec:	0e 94 33 06 	call	0xc66	; 0xc66 <speedStepperRight>

000008f0 <.LVL32>:
                speedStepperLeft(ramping(1150, 1650));
 8f0:	8f e7       	ldi	r24, 0x7F	; 127
 8f2:	94 e0       	ldi	r25, 0x04	; 4
 8f4:	0e 94 3a 06 	call	0xc74	; 0xc74 <speedStepperLeft>

000008f8 <.LVL33>:
 8f8:	c8 cf       	rjmp	.-112    	; 0x88a <.L30>

000008fa <linksom>:

void linksom(void){
    toggleKnipperRechts();
 8fa:	0e 94 d5 02 	call	0x5aa	; 0x5aa <toggleKnipperRechts>

000008fe <.LVL34>:
    enableStepCnt();
 8fe:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableStepCnt>

00000902 <.LVL35>:
    clearStepCnt();
 902:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000906 <.LVL36>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 906:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 90a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 90e:	84 3d       	cpi	r24, 0xD4	; 212
 910:	97 41       	sbci	r25, 0x17	; 23
 912:	48 f4       	brcc	.+18     	; 0x926 <.L39>

00000914 <.L40>:
        vooruit();
 914:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000918 <.LVL37>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 918:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 91c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 920:	84 3d       	cpi	r24, 0xD4	; 212
 922:	97 41       	sbci	r25, 0x17	; 23
 924:	b8 f3       	brcs	.-18     	; 0x914 <.L40>

00000926 <.L39>:
    }
    clearStepCnt();
 926:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

0000092a <.LVL38>:
    toggleStepperDirectionRight();
 92a:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

0000092e <.LVL39>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 92e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 932:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 936:	8e 32       	cpi	r24, 0x2E	; 46
 938:	99 40       	sbci	r25, 0x09	; 9
 93a:	48 f4       	brcc	.+18     	; 0x94e <.L41>

0000093c <.L42>:
        vooruit();
 93c:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000940 <.LVL40>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 940:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 944:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 948:	8e 32       	cpi	r24, 0x2E	; 46
 94a:	99 40       	sbci	r25, 0x09	; 9
 94c:	b8 f3       	brcs	.-18     	; 0x93c <.L42>

0000094e <.L41>:
    }
    toggleStepperDirectionRight();
 94e:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

00000952 <.LVL41>:
    clearStepCnt();
 952:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000956 <.LVL42>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 956:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 95a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 95e:	8c 37       	cpi	r24, 0x7C	; 124
 960:	95 41       	sbci	r25, 0x15	; 21
 962:	48 f4       	brcc	.+18     	; 0x976 <.L43>

00000964 <.L44>:
        vooruit();
 964:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000968 <.LVL43>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 968:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 96c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 970:	8c 37       	cpi	r24, 0x7C	; 124
 972:	95 41       	sbci	r25, 0x15	; 21
 974:	b8 f3       	brcs	.-18     	; 0x964 <.L44>

00000976 <.L43>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 976:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

0000097a <.LVL44>:
    clearStepCnt();
 97a:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

0000097e <.LVL45>:
    while(stepCounterLeft<(2350)){
 97e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 982:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 986:	8e 32       	cpi	r24, 0x2E	; 46
 988:	99 40       	sbci	r25, 0x09	; 9
 98a:	48 f4       	brcc	.+18     	; 0x99e <.L45>

0000098c <.L46>:
        vooruit();
 98c:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000990 <.LVL46>:
    while(stepCounterLeft<(2350)){
 990:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 994:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 998:	8e 32       	cpi	r24, 0x2E	; 46
 99a:	99 40       	sbci	r25, 0x09	; 9
 99c:	b8 f3       	brcs	.-18     	; 0x98c <.L46>

0000099e <.L45>:
    }
    toggleStepperDirectionRight();
 99e:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

000009a2 <.LVL47>:
    clearStepCnt();
 9a2:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

000009a6 <.LVL48>:
    vooruit();
 9a6:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

000009aa <.LVL49>:
    while(distance_left>15){           //agv is in het volgende pad
 9aa:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 9ae:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
 9b2:	40 97       	sbiw	r24, 0x10	; 16
 9b4:	44 f0       	brlt	.+16     	; 0x9c6 <.L47>

000009b6 <.L48>:
        vooruit();
 9b6:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

000009ba <.LVL50>:
    while(distance_left>15){           //agv is in het volgende pad
 9ba:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 9be:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
 9c2:	40 97       	sbiw	r24, 0x10	; 16
 9c4:	c4 f7       	brge	.-16     	; 0x9b6 <.L48>

000009c6 <.L47>:
    }
    stop();
 9c6:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

000009ca <.LVL51>:
    disableStepCnt();
 9ca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disableStepCnt>

000009ce <.LVL52>:
    sendByte(0x01);   //send klaar met opdracht
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 ca 06 	call	0xd94	; 0xd94 <sendByte>

000009d6 <.LVL53>:
    toggleKnipperRechts();
 9d6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <toggleKnipperRechts>

000009da <.LVL54>:
}
 9da:	08 95       	ret

000009dc <rechtsom>:

void rechtsom(void){
    toggleKnipperLinks();
 9dc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <toggleKnipperLinks>

000009e0 <.LVL55>:
    enableStepCnt();
 9e0:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableStepCnt>

000009e4 <.LVL56>:
    clearStepCnt();
 9e4:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

000009e8 <.LVL57>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 9e8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 9ec:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 9f0:	84 3d       	cpi	r24, 0xD4	; 212
 9f2:	97 41       	sbci	r25, 0x17	; 23
 9f4:	48 f4       	brcc	.+18     	; 0xa08 <.L55>

000009f6 <.L56>:
        vooruit();
 9f6:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

000009fa <.LVL58>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 9fa:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 9fe:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a02:	84 3d       	cpi	r24, 0xD4	; 212
 a04:	97 41       	sbci	r25, 0x17	; 23
 a06:	b8 f3       	brcs	.-18     	; 0x9f6 <.L56>

00000a08 <.L55>:
    }
    clearStepCnt();
 a08:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000a0c <.LVL59>:
    toggleStepperDirectionLeft();
 a0c:	0e 94 53 06 	call	0xca6	; 0xca6 <toggleStepperDirectionLeft>

00000a10 <.LVL60>:
    while(stepCounterLeft<2250){   //agv draait 90 graden
 a10:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a14:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a18:	8a 3c       	cpi	r24, 0xCA	; 202
 a1a:	98 40       	sbci	r25, 0x08	; 8
 a1c:	48 f4       	brcc	.+18     	; 0xa30 <.L57>

00000a1e <.L58>:
        vooruit();
 a1e:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000a22 <.LVL61>:
    while(stepCounterLeft<2250){   //agv draait 90 graden
 a22:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a26:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a2a:	8a 3c       	cpi	r24, 0xCA	; 202
 a2c:	98 40       	sbci	r25, 0x08	; 8
 a2e:	b8 f3       	brcs	.-18     	; 0xa1e <.L58>

00000a30 <.L57>:
    }
    toggleStepperDirectionLeft();
 a30:	0e 94 53 06 	call	0xca6	; 0xca6 <toggleStepperDirectionLeft>

00000a34 <.LVL62>:
    clearStepCnt();
 a34:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000a38 <.LVL63>:
    while(stepCounterLeft<(5600)){    //agv rijdt naar volgende pad
 a38:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a3c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a40:	80 3e       	cpi	r24, 0xE0	; 224
 a42:	95 41       	sbci	r25, 0x15	; 21
 a44:	48 f4       	brcc	.+18     	; 0xa58 <.L59>

00000a46 <.L60>:
        vooruit();
 a46:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000a4a <.LVL64>:
    while(stepCounterLeft<(5600)){    //agv rijdt naar volgende pad
 a4a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a4e:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a52:	80 3e       	cpi	r24, 0xE0	; 224
 a54:	95 41       	sbci	r25, 0x15	; 21
 a56:	b8 f3       	brcs	.-18     	; 0xa46 <.L60>

00000a58 <.L59>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 a58:	0e 94 53 06 	call	0xca6	; 0xca6 <toggleStepperDirectionLeft>

00000a5c <.LVL65>:
    clearStepCnt();
 a5c:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000a60 <.LVL66>:
    while(stepCounterLeft<(2250)){
 a60:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a64:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a68:	8a 3c       	cpi	r24, 0xCA	; 202
 a6a:	98 40       	sbci	r25, 0x08	; 8
 a6c:	48 f4       	brcc	.+18     	; 0xa80 <.L61>

00000a6e <.L62>:
        vooruit();
 a6e:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000a72 <.LVL67>:
    while(stepCounterLeft<(2250)){
 a72:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a76:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a7a:	8a 3c       	cpi	r24, 0xCA	; 202
 a7c:	98 40       	sbci	r25, 0x08	; 8
 a7e:	b8 f3       	brcs	.-18     	; 0xa6e <.L62>

00000a80 <.L61>:
    }
    toggleStepperDirectionLeft();
 a80:	0e 94 53 06 	call	0xca6	; 0xca6 <toggleStepperDirectionLeft>

00000a84 <.LVL68>:
    disableStepCnt();
 a84:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disableStepCnt>

00000a88 <.LVL69>:
    vooruit();
 a88:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000a8c <.LVL70>:
    if(distance_left<15){           //agv is in het volgende pad
 a8c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 a90:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000a94 <.Loc.190>:
 a94:	0f 97       	sbiw	r24, 0x0f	; 15
 a96:	4c f0       	brlt	.+18     	; 0xaaa <.L68>

00000a98 <.L63>:
        stop();
    }
    stop();
 a98:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

00000a9c <.LVL71>:
    sendByte(0x01);      //send klaar met opdracht
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 ca 06 	call	0xd94	; 0xd94 <sendByte>

00000aa4 <.LVL72>:
    toggleKnipperLinks();
 aa4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <toggleKnipperLinks>

00000aa8 <.LVL73>:
}
 aa8:	08 95       	ret

00000aaa <.L68>:
        stop();
 aaa:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

00000aae <.LVL74>:
 aae:	f4 cf       	rjmp	.-24     	; 0xa98 <.L63>

00000ab0 <kwartslagDraaienRechts>:

void kwartslagDraaienRechts(void){
    toggleKnipperRechts();
 ab0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <toggleKnipperRechts>

00000ab4 <.LVL75>:
    enableStepCnt();
 ab4:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableStepCnt>

00000ab8 <.LVL76>:
    clearStepCnt();
 ab8:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000abc <.LVL77>:
    toggleStepperDirectionLeft();
 abc:	0e 94 53 06 	call	0xca6	; 0xca6 <toggleStepperDirectionLeft>

00000ac0 <.LVL78>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 ac0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 ac4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 ac8:	8e 32       	cpi	r24, 0x2E	; 46
 aca:	99 40       	sbci	r25, 0x09	; 9
 acc:	48 f4       	brcc	.+18     	; 0xae0 <.L70>

00000ace <.L71>:
        vooruit();
 ace:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000ad2 <.LVL79>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 ad2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 ad6:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 ada:	8e 32       	cpi	r24, 0x2E	; 46
 adc:	99 40       	sbci	r25, 0x09	; 9
 ade:	b8 f3       	brcs	.-18     	; 0xace <.L71>

00000ae0 <.L70>:
    }
    toggleStepperDirectionLeft();
 ae0:	0e 94 53 06 	call	0xca6	; 0xca6 <toggleStepperDirectionLeft>

00000ae4 <.LVL80>:
    disableStepCnt();
 ae4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disableStepCnt>

00000ae8 <.LVL81>:
    toggleKnipperRechts();
 ae8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <toggleKnipperRechts>

00000aec <.LVL82>:

}
 aec:	08 95       	ret

00000aee <kwartslagDraaienLinks>:

void kwartslagDraaienLinks(void){
    toggleKnipperLinks();
 aee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <toggleKnipperLinks>

00000af2 <.LVL83>:
    enableStepCnt();
 af2:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableStepCnt>

00000af6 <.LVL84>:
    clearStepCnt();
 af6:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000afa <.LVL85>:
    toggleStepperDirectionRight();
 afa:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

00000afe <.LVL86>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 afe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 b02:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 b06:	8e 32       	cpi	r24, 0x2E	; 46
 b08:	99 40       	sbci	r25, 0x09	; 9
 b0a:	48 f4       	brcc	.+18     	; 0xb1e <.L74>

00000b0c <.L75>:
        vooruit();
 b0c:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000b10 <.LVL87>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 b10:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 b14:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 b18:	8e 32       	cpi	r24, 0x2E	; 46
 b1a:	99 40       	sbci	r25, 0x09	; 9
 b1c:	b8 f3       	brcs	.-18     	; 0xb0c <.L75>

00000b1e <.L74>:
    }
    toggleStepperDirectionRight();
 b1e:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

00000b22 <.LVL88>:
    disableStepCnt();
 b22:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disableStepCnt>

00000b26 <.LVL89>:
    toggleKnipperLinks();
 b26:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <toggleKnipperLinks>

00000b2a <.LVL90>:
}
 b2a:	08 95       	ret

00000b2c <Pirouette>:

void Pirouette(void){
        toggleKnipperLinks();
 b2c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <toggleKnipperLinks>

00000b30 <.LVL91>:
    enableStepCnt();
 b30:	0e 94 9a 06 	call	0xd34	; 0xd34 <enableStepCnt>

00000b34 <.LVL92>:
    clearStepCnt();
 b34:	0e 94 91 06 	call	0xd22	; 0xd22 <clearStepCnt>

00000b38 <.LVL93>:
    toggleStepperDirectionRight();
 b38:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

00000b3c <.LVL94>:
    while(stepCounterLeft<4700){   //agv draait 90 graden
 b3c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 b40:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 b44:	8c 35       	cpi	r24, 0x5C	; 92
 b46:	92 41       	sbci	r25, 0x12	; 18
 b48:	48 f4       	brcc	.+18     	; 0xb5c <.L78>

00000b4a <.L79>:
        vooruit();
 b4a:	0e 94 35 03 	call	0x66a	; 0x66a <vooruit>

00000b4e <.LVL95>:
    while(stepCounterLeft<4700){   //agv draait 90 graden
 b4e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 b52:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 b56:	8c 35       	cpi	r24, 0x5C	; 92
 b58:	92 41       	sbci	r25, 0x12	; 18
 b5a:	b8 f3       	brcs	.-18     	; 0xb4a <.L79>

00000b5c <.L78>:
    }
    toggleStepperDirectionRight();
 b5c:	0e 94 41 06 	call	0xc82	; 0xc82 <toggleStepperDirectionRight>

00000b60 <.LVL96>:
    disableStepCnt();
 b60:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disableStepCnt>

00000b64 <.LVL97>:
    toggleKnipperLinks();
 b64:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <toggleKnipperLinks>

00000b68 <.LVL98>:
}
 b68:	08 95       	ret

00000b6a <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 b6a:	50 98       	cbi	0x0a, 0	; 10

00000b6c <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 b6c:	58 9a       	sbi	0x0b, 0	; 11

00000b6e <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 b6e:	e8 9a       	sbi	0x1d, 0	; 29

00000b70 <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 b70:	e9 e6       	ldi	r30, 0x69	; 105
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	80 81       	ld	r24, Z

00000b76 <.Loc.8>:
 b76:	81 60       	ori	r24, 0x01	; 1
 b78:	80 83       	st	Z, r24

00000b7a <.Loc.9>:
    sei();
 b7a:	78 94       	sei

00000b7c <.Loc.10>:
}
 b7c:	08 95       	ret

00000b7e <__vector_1>:

ISR(INT0_vect){
 b7e:	1f 92       	push	r1
 b80:	0f 92       	push	r0
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	0f 92       	push	r0
 b86:	11 24       	eor	r1, r1
 b88:	0b b6       	in	r0, 0x3b	; 59
 b8a:	0f 92       	push	r0
 b8c:	2f 93       	push	r18
 b8e:	3f 93       	push	r19
 b90:	4f 93       	push	r20
 b92:	5f 93       	push	r21
 b94:	6f 93       	push	r22
 b96:	7f 93       	push	r23
 b98:	8f 93       	push	r24
 b9a:	9f 93       	push	r25
 b9c:	af 93       	push	r26
 b9e:	bf 93       	push	r27
 ba0:	ef 93       	push	r30
 ba2:	ff 93       	push	r31

00000ba4 <.L5>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 ba4:	48 9b       	sbis	0x09, 0	; 9
 ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <.L3>

00000ba8 <.L4>:
            stop();
 ba8:	0e 94 3e 03 	call	0x67c	; 0x67c <stop>

00000bac <.LVL0>:
            toggleKnipperNood();
 bac:	0e 94 fd 02 	call	0x5fa	; 0x5fa <toggleKnipperNood>

00000bb0 <.LVL1>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 bb0:	48 99       	sbic	0x09, 0	; 9
 bb2:	fa cf       	rjmp	.-12     	; 0xba8 <.L4>

00000bb4 <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 bb4:	06 99       	sbic	0x00, 6	; 0
 bb6:	f6 cf       	rjmp	.-20     	; 0xba4 <.L5>

00000bb8 <.Loc.20>:
            //uitvoer();
            toggleKnipperNood();
 bb8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <toggleKnipperNood>

00000bbc <.LVL2>:
            break;
        }
    }
}
 bbc:	ff 91       	pop	r31
 bbe:	ef 91       	pop	r30
 bc0:	bf 91       	pop	r27
 bc2:	af 91       	pop	r26
 bc4:	9f 91       	pop	r25
 bc6:	8f 91       	pop	r24
 bc8:	7f 91       	pop	r23
 bca:	6f 91       	pop	r22
 bcc:	5f 91       	pop	r21
 bce:	4f 91       	pop	r20
 bd0:	3f 91       	pop	r19
 bd2:	2f 91       	pop	r18
 bd4:	0f 90       	pop	r0
 bd6:	0b be       	out	0x3b, r0	; 59
 bd8:	0f 90       	pop	r0
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	0f 90       	pop	r0
 bde:	1f 90       	pop	r1
 be0:	18 95       	reti

00000be2 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 be2:	6b 9a       	sbi	0x0d, 3	; 13

00000be4 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 be4:	e1 e0       	ldi	r30, 0x01	; 1
 be6:	f1 e0       	ldi	r31, 0x01	; 1
 be8:	80 81       	ld	r24, Z

00000bea <.Loc.4>:
 bea:	88 60       	ori	r24, 0x08	; 8
 bec:	80 83       	st	Z, r24

00000bee <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 bee:	9d 9a       	sbi	0x13, 5	; 19

00000bf0 <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 bf0:	80 81       	ld	r24, Z

00000bf2 <.Loc.8>:
 bf2:	80 61       	ori	r24, 0x10	; 16
 bf4:	80 83       	st	Z, r24

00000bf6 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 bf6:	73 98       	cbi	0x0e, 3	; 14

00000bf8 <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 bf8:	e2 e0       	ldi	r30, 0x02	; 2
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
 bfc:	80 81       	ld	r24, Z
 bfe:	87 7f       	andi	r24, 0xF7	; 247
 c00:	80 83       	st	Z, r24

00000c02 <.Loc.13>:
	PORT_DIR_R |= (1<<DIRECTION_R);
 c02:	a5 9a       	sbi	0x14, 5	; 20

00000c04 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 c04:	80 81       	ld	r24, Z
 c06:	8f 7e       	andi	r24, 0xEF	; 239
 c08:	80 83       	st	Z, r24

00000c0a <.Loc.17>:
}
 c0a:	08 95       	ret

00000c0c <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
 c0c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000c10 <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 c10:	82 e0       	ldi	r24, 0x02	; 2
 c12:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000c16 <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
 c16:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000c1a <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 c1a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000c1e <.Loc.27>:
}
 c1e:	08 95       	ret

00000c20 <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
 c20:	82 e8       	ldi	r24, 0x82	; 130
 c22:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000c26 <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 c26:	8a e1       	ldi	r24, 0x1A	; 26
 c28:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000c2c <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 c34:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000c38 <.Loc.35>:
    sei();
 c38:	78 94       	sei

00000c3a <.Loc.36>:
}
 c3a:	08 95       	ret

00000c3c <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
 c3c:	82 e8       	ldi	r24, 0x82	; 130
 c3e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000c42 <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 c42:	8a e1       	ldi	r24, 0x1A	; 26
 c44:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000c48 <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
 c48:	81 e0       	ldi	r24, 0x01	; 1
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 c50:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000c54 <.Loc.44>:
    sei();
 c54:	78 94       	sei

00000c56 <.Loc.45>:
}
 c56:	08 95       	ret

00000c58 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 c58:	0e 94 1e 06 	call	0xc3c	; 0xc3c <initTimer4Stepper>

00000c5c <.LVL0>:
    initTimer3Stepper();
 c5c:	0e 94 10 06 	call	0xc20	; 0xc20 <initTimer3Stepper>

00000c60 <.LVL1>:
    initPinsStepper();
 c60:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <initPinsStepper>

00000c64 <.LVL2>:
}
 c64:	08 95       	ret

00000c66 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 c66:	28 2f       	mov	r18, r24
 c68:	39 2f       	mov	r19, r25

00000c6a <.Loc.53>:
    ICR3 = PWMRight;
 c6a:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 c6e:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000c72 <.Loc.55>:
}
 c72:	08 95       	ret

00000c74 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 c74:	28 2f       	mov	r18, r24
 c76:	39 2f       	mov	r19, r25

00000c78 <.Loc.58>:
    ICR4 = PWMLeft;
 c78:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 c7c:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

00000c80 <.Loc.60>:
}
 c80:	08 95       	ret

00000c82 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 c82:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <state.1>
 c86:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <state.1+0x1>
 c8a:	89 2b       	or	r24, r25
 c8c:	41 f4       	brne	.+16     	; 0xc9e <.L9>

00000c8e <.Loc.65>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 c8e:	a5 98       	cbi	0x14, 5	; 20

00000c90 <.Loc.67>:
        state = 1;
 c90:	81 e0       	ldi	r24, 0x01	; 1
 c92:	90 e0       	ldi	r25, 0x00	; 0

00000c94 <.L10>:
 c94:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <state.1+0x1>
 c98:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <state.1>

00000c9c <.Loc.69>:
    }
    else{
        PORT_DIR_R |= (1<<DIRECTION_R);
        state = 0;
    }
}
 c9c:	08 95       	ret

00000c9e <.L9>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 c9e:	a5 9a       	sbi	0x14, 5	; 20

00000ca0 <.Loc.72>:
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	f7 cf       	rjmp	.-18     	; 0xc94 <.L10>

00000ca6 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 ca6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <state.0>
 caa:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <state.0+0x1>
 cae:	89 2b       	or	r24, r25
 cb0:	61 f4       	brne	.+24     	; 0xcca <.L12>

00000cb2 <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 cb2:	e2 e0       	ldi	r30, 0x02	; 2
 cb4:	f1 e0       	ldi	r31, 0x01	; 1
 cb6:	80 81       	ld	r24, Z

00000cb8 <.Loc.79>:
 cb8:	80 61       	ori	r24, 0x10	; 16
 cba:	80 83       	st	Z, r24

00000cbc <.Loc.80>:
        state = 1;
 cbc:	81 e0       	ldi	r24, 0x01	; 1
 cbe:	90 e0       	ldi	r25, 0x00	; 0

00000cc0 <.L13>:
 cc0:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <state.0+0x1>
 cc4:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <state.0>

00000cc8 <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 cc8:	08 95       	ret

00000cca <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 cca:	e2 e0       	ldi	r30, 0x02	; 2
 ccc:	f1 e0       	ldi	r31, 0x01	; 1
 cce:	80 81       	ld	r24, Z
 cd0:	8f 7e       	andi	r24, 0xEF	; 239
 cd2:	80 83       	st	Z, r24

00000cd4 <.Loc.85>:
 cd4:	80 e0       	ldi	r24, 0x00	; 0
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	f3 cf       	rjmp	.-26     	; 0xcc0 <.L13>

00000cda <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 cda:	8f 93       	push	r24
 cdc:	8f b7       	in	r24, 0x3f	; 63
 cde:	8f 93       	push	r24
 ce0:	9f 93       	push	r25

00000ce2 <.Loc.88>:
    stepCounterLeft++;
 ce2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 ce6:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 cea:	01 96       	adiw	r24, 0x01	; 1
 cec:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <stepCounterLeft+0x1>
 cf0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <stepCounterLeft>

00000cf4 <.Loc.90>:
}
 cf4:	9f 91       	pop	r25
 cf6:	8f 91       	pop	r24
 cf8:	8f bf       	out	0x3f, r24	; 63
 cfa:	8f 91       	pop	r24
 cfc:	18 95       	reti

00000cfe <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 cfe:	8f 93       	push	r24
 d00:	8f b7       	in	r24, 0x3f	; 63
 d02:	8f 93       	push	r24
 d04:	9f 93       	push	r25

00000d06 <.Loc.92>:
    stepCounterRight++;
 d06:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <stepCounterRight>
 d0a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <stepCounterRight+0x1>
 d0e:	01 96       	adiw	r24, 0x01	; 1
 d10:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <stepCounterRight+0x1>
 d14:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <stepCounterRight>

00000d18 <.Loc.94>:
}
 d18:	9f 91       	pop	r25
 d1a:	8f 91       	pop	r24
 d1c:	8f bf       	out	0x3f, r24	; 63
 d1e:	8f 91       	pop	r24
 d20:	18 95       	reti

00000d22 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 d22:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <stepCounterLeft+0x1>
 d26:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <stepCounterLeft>

00000d2a <.Loc.98>:
    stepCounterRight = 0;
 d2a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <stepCounterRight+0x1>
 d2e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <stepCounterRight>

00000d32 <.Loc.100>:
}
 d32:	08 95       	ret

00000d34 <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
 d34:	e2 e7       	ldi	r30, 0x72	; 114
 d36:	f0 e0       	ldi	r31, 0x00	; 0
 d38:	80 81       	ld	r24, Z

00000d3a <.Loc.103>:
 d3a:	81 60       	ori	r24, 0x01	; 1
 d3c:	80 83       	st	Z, r24

00000d3e <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
 d3e:	e1 e7       	ldi	r30, 0x71	; 113
 d40:	f0 e0       	ldi	r31, 0x00	; 0
 d42:	80 81       	ld	r24, Z

00000d44 <.Loc.105>:
 d44:	81 60       	ori	r24, 0x01	; 1
 d46:	80 83       	st	Z, r24

00000d48 <.Loc.106>:
}
 d48:	08 95       	ret

00000d4a <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
 d4a:	e2 e7       	ldi	r30, 0x72	; 114
 d4c:	f0 e0       	ldi	r31, 0x00	; 0
 d4e:	80 81       	ld	r24, Z
 d50:	8e 7f       	andi	r24, 0xFE	; 254
 d52:	80 83       	st	Z, r24

00000d54 <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
 d54:	e1 e7       	ldi	r30, 0x71	; 113
 d56:	f0 e0       	ldi	r31, 0x00	; 0
 d58:	80 81       	ld	r24, Z
 d5a:	8e 7f       	andi	r24, 0xFE	; 254
 d5c:	80 83       	st	Z, r24

00000d5e <.Loc.112>:
}
 d5e:	08 95       	ret

00000d60 <stepperBackward>:

void stepperBackward(void){
    PORT_DIR_R &= ~(1<<DIRECTION_R);
 d60:	a5 98       	cbi	0x14, 5	; 20

00000d62 <.Loc.116>:
	PORT_DIR_L |= (1<<DIRECTION_L);
 d62:	e2 e0       	ldi	r30, 0x02	; 2
 d64:	f1 e0       	ldi	r31, 0x01	; 1
 d66:	80 81       	ld	r24, Z

00000d68 <.Loc.117>:
 d68:	80 61       	ori	r24, 0x10	; 16
 d6a:	80 83       	st	Z, r24

00000d6c <.Loc.118>:
}
 d6c:	08 95       	ret

00000d6e <stepperForward>:

void stepperForward(void){
    PORT_DIR_R |= (1<<DIRECTION_R);
 d6e:	a5 9a       	sbi	0x14, 5	; 20

00000d70 <.Loc.122>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 d70:	e2 e0       	ldi	r30, 0x02	; 2
 d72:	f1 e0       	ldi	r31, 0x01	; 1
 d74:	80 81       	ld	r24, Z
 d76:	8f 7e       	andi	r24, 0xEF	; 239
 d78:	80 83       	st	Z, r24

00000d7a <.Loc.124>:
}
 d7a:	08 95       	ret

00000d7c <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 d7c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

00000d80 <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 d80:	87 e6       	ldi	r24, 0x67	; 103
 d82:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

00000d86 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 d86:	88 e9       	ldi	r24, 0x98	; 152
 d88:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

00000d8c <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 d8c:	86 e0       	ldi	r24, 0x06	; 6
 d8e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

00000d92 <.Loc.9>:
}
 d92:	08 95       	ret

00000d94 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 d94:	e8 ec       	ldi	r30, 0xC8	; 200
 d96:	f0 e0       	ldi	r31, 0x00	; 0

00000d98 <.L3>:
 d98:	90 81       	ld	r25, Z
 d9a:	95 ff       	sbrs	r25, 5
 d9c:	fd cf       	rjmp	.-6      	; 0xd98 <.L3>

00000d9e <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 d9e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000da2 <.Loc.17>:
}
 da2:	08 95       	ret

00000da4 <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 da4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 da8:	88 23       	and	r24, r24
 daa:	44 f4       	brge	.+16     	; 0xdbc <.L5>

00000dac <.Loc.22>:
        dummy = UDR1; // Read and discard
 dac:	ae ec       	ldi	r26, 0xCE	; 206
 dae:	b0 e0       	ldi	r27, 0x00	; 0

00000db0 <.Loc.23>:
    while (UCSR1A & (1 << RXC1)) {
 db0:	e8 ec       	ldi	r30, 0xC8	; 200
 db2:	f0 e0       	ldi	r31, 0x00	; 0

00000db4 <.L7>:
        dummy = UDR1; // Read and discard
 db4:	8c 91       	ld	r24, X

00000db6 <.Loc.26>:
    while (UCSR1A & (1 << RXC1)) {
 db6:	80 81       	ld	r24, Z
 db8:	88 23       	and	r24, r24
 dba:	e4 f3       	brlt	.-8      	; 0xdb4 <.L7>

00000dbc <.L5>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 dbc:	08 95       	ret

00000dbe <__vector_36>:

unsigned int serialData;
volatile int stopRequest = 0;

ISR(USART1_RX_vect) {
 dbe:	1f 92       	push	r1
 dc0:	1f b6       	in	r1, 0x3f	; 63
 dc2:	1f 92       	push	r1
 dc4:	11 24       	eor	r1, r1
 dc6:	8f 93       	push	r24
 dc8:	9f 93       	push	r25

00000dca <.Loc.29>:
    serialData = UDR1;
 dca:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 dce:	90 e0       	ldi	r25, 0x00	; 0

00000dd0 <.Loc.31>:
 dd0:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <serialData+0x1>
 dd4:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <serialData>

00000dd8 <.Loc.32>:

    if(serialData==0xFF){
 dd8:	8f 3f       	cpi	r24, 0xFF	; 255
 dda:	91 05       	cpc	r25, r1
 ddc:	31 f0       	breq	.+12     	; 0xdea <.L11>

00000dde <.L9>:
        stopRequest = 1;
    }
}
 dde:	9f 91       	pop	r25
 de0:	8f 91       	pop	r24
 de2:	1f 90       	pop	r1
 de4:	1f be       	out	0x3f, r1	; 63
 de6:	1f 90       	pop	r1
 de8:	18 95       	reti

00000dea <.L11>:
        stopRequest = 1;
 dea:	81 e0       	ldi	r24, 0x01	; 1
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
 df2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

00000df6 <.Loc.37>:
}
 df6:	f3 cf       	rjmp	.-26     	; 0xdde <.L9>

00000df8 <init_timer5>:
#include "Debugging.h"
#include <stdlib.h>

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 df8:	8b e2       	ldi	r24, 0x2B	; 43
 dfa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000dfe <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 dfe:	8a e5       	ldi	r24, 0x5A	; 90
 e00:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000e04 <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 e04:	81 e2       	ldi	r24, 0x21	; 33
 e06:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000e0a <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 e0a:	8f ef       	ldi	r24, 0xFF	; 255
 e0c:	9f ef       	ldi	r25, 0xFF	; 255
 e0e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 e12:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

00000e16 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 e16:	84 e1       	ldi	r24, 0x14	; 20
 e18:	90 e0       	ldi	r25, 0x00	; 0
 e1a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 e1e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000e22 <.Loc.11>:
    OCR5C = 20;
 e22:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 e26:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000e2a <.Loc.13>:
    //set enable interrupt
    sei();
 e2a:	78 94       	sei

00000e2c <.Loc.14>:
}
 e2c:	08 95       	ret

00000e2e <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 e2e:	ea e0       	ldi	r30, 0x0A	; 10
 e30:	f1 e0       	ldi	r31, 0x01	; 1
 e32:	80 81       	ld	r24, Z

00000e34 <.Loc.17>:
 e34:	80 61       	ori	r24, 0x10	; 16
 e36:	80 83       	st	Z, r24

00000e38 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 e38:	80 81       	ld	r24, Z

00000e3a <.Loc.19>:
 e3a:	80 62       	ori	r24, 0x20	; 32
 e3c:	80 83       	st	Z, r24

00000e3e <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 e3e:	ab e0       	ldi	r26, 0x0B	; 11
 e40:	b1 e0       	ldi	r27, 0x01	; 1
 e42:	8c 91       	ld	r24, X
 e44:	8f 7e       	andi	r24, 0xEF	; 239
 e46:	8c 93       	st	X, r24

00000e48 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 e48:	8c 91       	ld	r24, X
 e4a:	8f 7d       	andi	r24, 0xDF	; 223
 e4c:	8c 93       	st	X, r24

00000e4e <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 e4e:	80 81       	ld	r24, Z
 e50:	8d 7f       	andi	r24, 0xFD	; 253
 e52:	80 83       	st	Z, r24

00000e54 <.Loc.26>:
}
 e54:	08 95       	ret

00000e56 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 e56:	0e 94 17 07 	call	0xe2e	; 0xe2e <init_pins_ultrasoon>

00000e5a <.LVL0>:
    init_timer5();
 e5a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <init_timer5>

00000e5e <.LVL1>:
}
 e5e:	08 95       	ret

00000e60 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 e60:	8f 93       	push	r24
 e62:	8f b7       	in	r24, 0x3f	; 63
 e64:	8f 93       	push	r24
 e66:	8b b7       	in	r24, 0x3b	; 59
 e68:	8f 93       	push	r24
 e6a:	ef 93       	push	r30
 e6c:	ff 93       	push	r31

00000e6e <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 e6e:	e1 e2       	ldi	r30, 0x21	; 33
 e70:	f1 e0       	ldi	r31, 0x01	; 1
 e72:	80 81       	ld	r24, Z

00000e74 <.Loc.33>:
 e74:	80 64       	ori	r24, 0x40	; 64
 e76:	80 83       	st	Z, r24

00000e78 <.Loc.34>:
}
 e78:	ff 91       	pop	r31
 e7a:	ef 91       	pop	r30
 e7c:	8f 91       	pop	r24
 e7e:	8b bf       	out	0x3b, r24	; 59
 e80:	8f 91       	pop	r24
 e82:	8f bf       	out	0x3f, r24	; 63
 e84:	8f 91       	pop	r24
 e86:	18 95       	reti

00000e88 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 e88:	0f 92       	push	r0
 e8a:	0f b6       	in	r0, 0x3f	; 63
 e8c:	0f 92       	push	r0
 e8e:	1f 92       	push	r1
 e90:	11 24       	eor	r1, r1
 e92:	2f 93       	push	r18
 e94:	2b b7       	in	r18, 0x3b	; 59
 e96:	2f 93       	push	r18
 e98:	3f 93       	push	r19
 e9a:	6f 93       	push	r22
 e9c:	7f 93       	push	r23
 e9e:	8f 93       	push	r24
 ea0:	9f 93       	push	r25
 ea2:	af 93       	push	r26
 ea4:	bf 93       	push	r27
 ea6:	ef 93       	push	r30
 ea8:	ff 93       	push	r31

00000eaa <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 eaa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000eae <.Loc.39>:
 eae:	86 ff       	sbrs	r24, 6
 eb0:	1e c0       	rjmp	.+60     	; 0xeee <.L6>

00000eb2 <.Loc.40>:
        start_time = ICR5;
 eb2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 eb6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000eba <.Loc.42>:
 eba:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <start_time.0+0x1>
 ebe:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <start_time.0>

00000ec2 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 ec2:	e1 e2       	ldi	r30, 0x21	; 33
 ec4:	f1 e0       	ldi	r31, 0x01	; 1
 ec6:	80 81       	ld	r24, Z
 ec8:	8f 7b       	andi	r24, 0xBF	; 191
 eca:	80 83       	st	Z, r24

00000ecc <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 ecc:	ff 91       	pop	r31
 ece:	ef 91       	pop	r30
 ed0:	bf 91       	pop	r27
 ed2:	af 91       	pop	r26
 ed4:	9f 91       	pop	r25
 ed6:	8f 91       	pop	r24
 ed8:	7f 91       	pop	r23
 eda:	6f 91       	pop	r22
 edc:	3f 91       	pop	r19
 ede:	2f 91       	pop	r18
 ee0:	2b bf       	out	0x3b, r18	; 59
 ee2:	2f 91       	pop	r18
 ee4:	1f 90       	pop	r1
 ee6:	0f 90       	pop	r0
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	0f 90       	pop	r0
 eec:	18 95       	reti

00000eee <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 eee:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 ef2:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000ef6 <.Loc.48>:
 ef6:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <start_time.0>
 efa:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <start_time.0+0x1>
 efe:	28 1b       	sub	r18, r24
 f00:	39 0b       	sbc	r19, r25

00000f02 <.Loc.49>:
 f02:	a9 e0       	ldi	r26, 0x09	; 9
 f04:	bc e8       	ldi	r27, 0x8C	; 140
 f06:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__umulhisi3>
 f0a:	00 24       	eor	r0, r0
 f0c:	88 0f       	add	r24, r24
 f0e:	99 1f       	adc	r25, r25
 f10:	00 1c       	adc	r0, r0
 f12:	88 0f       	add	r24, r24
 f14:	99 1f       	adc	r25, r25
 f16:	00 1c       	adc	r0, r0
 f18:	89 2f       	mov	r24, r25
 f1a:	90 2d       	mov	r25, r0

00000f1c <.Loc.50>:
        if (current_sensor == 0) {
 f1c:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <current_sensor>
 f20:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <current_sensor+0x1>

00000f24 <.Loc.52>:
 f24:	23 2b       	or	r18, r19
 f26:	c9 f4       	brne	.+50     	; 0xf5a <.L8>

00000f28 <.Loc.53>:
            distance_right = distance;  // Store distance for Sensor A
 f28:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <distance_right+0x1>
 f2c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <distance_right>

00000f30 <.L9>:
        if (current_sensor == 0) {
 f30:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <current_sensor>
 f34:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <current_sensor+0x1>

00000f38 <.Loc.57>:
 f38:	89 2b       	or	r24, r25
 f3a:	a1 f4       	brne	.+40     	; 0xf64 <.L10>

00000f3c <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 f3c:	81 e0       	ldi	r24, 0x01	; 1
 f3e:	90 e0       	ldi	r25, 0x00	; 0
 f40:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <current_sensor+0x1>
 f44:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <current_sensor>

00000f48 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 f48:	e0 e2       	ldi	r30, 0x20	; 32
 f4a:	f1 e0       	ldi	r31, 0x01	; 1
 f4c:	80 81       	ld	r24, Z
 f4e:	87 7f       	andi	r24, 0xF7	; 247
 f50:	80 83       	st	Z, r24

00000f52 <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 f52:	80 81       	ld	r24, Z

00000f54 <.Loc.63>:
 f54:	80 62       	ori	r24, 0x20	; 32
 f56:	80 83       	st	Z, r24
 f58:	b9 cf       	rjmp	.-142    	; 0xecc <.L5>

00000f5a <.L8>:
            distance_left = distance;  // Store distance for Sensor B
 f5a:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <distance_left+0x1>
 f5e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <distance_left>
 f62:	e6 cf       	rjmp	.-52     	; 0xf30 <.L9>

00000f64 <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 f64:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <current_sensor+0x1>
 f68:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <current_sensor>

00000f6c <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 f6c:	e0 e2       	ldi	r30, 0x20	; 32
 f6e:	f1 e0       	ldi	r31, 0x01	; 1
 f70:	80 81       	ld	r24, Z
 f72:	8f 7d       	andi	r24, 0xDF	; 223
 f74:	80 83       	st	Z, r24

00000f76 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 f76:	80 81       	ld	r24, Z

00000f78 <.Loc.71>:
 f78:	88 60       	ori	r24, 0x08	; 8
 f7a:	80 83       	st	Z, r24

00000f7c <.LBE2>:
}
 f7c:	a7 cf       	rjmp	.-178    	; 0xecc <.L5>

00000f7e <__divmodhi4>:
 f7e:	97 fb       	bst	r25, 7

00000f80 <.Loc.1>:
 f80:	07 2e       	mov	r0, r23

00000f82 <.Loc.2>:
 f82:	16 f4       	brtc	.+4      	; 0xf88 <.L^B1>

00000f84 <.Loc.3>:
 f84:	00 94       	com	r0

00000f86 <.Loc.4>:
 f86:	07 d0       	rcall	.+14     	; 0xf96 <__divmodhi4_neg1>

00000f88 <.L^B1>:
 f88:	77 fd       	sbrc	r23, 7

00000f8a <.Loc.6>:
 f8a:	09 d0       	rcall	.+18     	; 0xf9e <__divmodhi4_neg2>

00000f8c <.Loc.7>:
 f8c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__udivmodhi4>

00000f90 <.Loc.8>:
 f90:	07 fc       	sbrc	r0, 7

00000f92 <.Loc.9>:
 f92:	05 d0       	rcall	.+10     	; 0xf9e <__divmodhi4_neg2>

00000f94 <.Loc.10>:
 f94:	3e f4       	brtc	.+14     	; 0xfa4 <__divmodhi4_exit>

00000f96 <__divmodhi4_neg1>:
 f96:	90 95       	com	r25

00000f98 <.Loc.12>:
 f98:	81 95       	neg	r24

00000f9a <.Loc.13>:
 f9a:	9f 4f       	sbci	r25, 0xFF	; 255

00000f9c <.Loc.14>:
 f9c:	08 95       	ret

00000f9e <__divmodhi4_neg2>:
 f9e:	70 95       	com	r23

00000fa0 <.Loc.16>:
 fa0:	61 95       	neg	r22

00000fa2 <.Loc.17>:
 fa2:	7f 4f       	sbci	r23, 0xFF	; 255

00000fa4 <__divmodhi4_exit>:
 fa4:	08 95       	ret

00000fa6 <__umulhisi3>:
 fa6:	a2 9f       	mul	r26, r18

00000fa8 <.Loc.1>:
 fa8:	b0 01       	movw	r22, r0

00000faa <.Loc.2>:
 faa:	b3 9f       	mul	r27, r19

00000fac <.Loc.3>:
 fac:	c0 01       	movw	r24, r0

00000fae <.Loc.4>:
 fae:	a3 9f       	mul	r26, r19

00000fb0 <.Loc.5>:
 fb0:	70 0d       	add	r23, r0

00000fb2 <.Loc.6>:
 fb2:	81 1d       	adc	r24, r1

00000fb4 <.Loc.7>:
 fb4:	11 24       	eor	r1, r1

00000fb6 <.Loc.8>:
 fb6:	91 1d       	adc	r25, r1

00000fb8 <.Loc.9>:
 fb8:	b2 9f       	mul	r27, r18

00000fba <.Loc.10>:
 fba:	70 0d       	add	r23, r0

00000fbc <.Loc.11>:
 fbc:	81 1d       	adc	r24, r1

00000fbe <.Loc.12>:
 fbe:	11 24       	eor	r1, r1

00000fc0 <.Loc.13>:
 fc0:	91 1d       	adc	r25, r1

00000fc2 <.Loc.14>:
 fc2:	08 95       	ret

00000fc4 <__udivmodhi4>:
 fc4:	aa 1b       	sub	r26, r26

00000fc6 <.Loc.1>:
 fc6:	bb 1b       	sub	r27, r27

00000fc8 <.Loc.2>:
 fc8:	51 e1       	ldi	r21, 0x11	; 17

00000fca <.Loc.3>:
 fca:	07 c0       	rjmp	.+14     	; 0xfda <__udivmodhi4_ep>

00000fcc <__udivmodhi4_loop>:
 fcc:	aa 1f       	adc	r26, r26

00000fce <.Loc.5>:
 fce:	bb 1f       	adc	r27, r27

00000fd0 <.Loc.6>:
 fd0:	a6 17       	cp	r26, r22

00000fd2 <.Loc.7>:
 fd2:	b7 07       	cpc	r27, r23

00000fd4 <.Loc.8>:
 fd4:	10 f0       	brcs	.+4      	; 0xfda <__udivmodhi4_ep>

00000fd6 <.Loc.9>:
 fd6:	a6 1b       	sub	r26, r22

00000fd8 <.Loc.10>:
 fd8:	b7 0b       	sbc	r27, r23

00000fda <__udivmodhi4_ep>:
 fda:	88 1f       	adc	r24, r24

00000fdc <.Loc.12>:
 fdc:	99 1f       	adc	r25, r25

00000fde <.Loc.13>:
 fde:	5a 95       	dec	r21

00000fe0 <.Loc.14>:
 fe0:	a9 f7       	brne	.-22     	; 0xfcc <__udivmodhi4_loop>

00000fe2 <.Loc.15>:
 fe2:	80 95       	com	r24

00000fe4 <.Loc.16>:
 fe4:	90 95       	com	r25

00000fe6 <.Loc.17>:
 fe6:	bc 01       	movw	r22, r24

00000fe8 <.Loc.18>:
 fe8:	cd 01       	movw	r24, r26

00000fea <.Loc.19>:
 fea:	08 95       	ret

00000fec <_exit>:
 fec:	f8 94       	cli

00000fee <__stop_program>:
 fee:	ff cf       	rjmp	.-2      	; 0xfee <__stop_program>
