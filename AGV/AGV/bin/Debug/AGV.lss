
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000856  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000856  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800202  00800202  0000090c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000178  00000000  00000000  00000968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000186b  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000123a  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000011e5  00000000  00000000  00003585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000370  00000000  00000000  0000476c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007e2  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000020f  00000000  00000000  000052be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000096  00000000  00000000  000054cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_35>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_45>
  b8:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 8b 03 	jmp	0x716	; 0x716 <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e6 e5       	ldi	r30, 0x56	; 86

000000fc <.Loc.4>:
  fc:	f8 e0       	ldi	r31, 0x08	; 8

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 30       	cpi	r26, 0x02	; 2

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e0       	ldi	r26, 0x02	; 2

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	ac 31       	cpi	r26, 0x1C	; 28

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
 122:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <interpreter>:

Signaal omhoog (vanuit AGV naar Module)
0x01: Klaar met opdracht, einde pad of einde bocht geen parameters nodig.
*/

void interpreter(){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29

0000012e <.Loc.1>:
    receiveCommand();   //this function may have to be called more often within the while to be able to update if any new information comes in
 12e:	0e 94 43 03 	call	0x686	; 0x686 <receiveCommand>

00000132 <.LVL0>:
    if(serialOntvangen[0]==0x01){    //commmando bewegen
 132:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <serialOntvangen>
 136:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <serialOntvangen+0x1>

0000013a <.Loc.4>:
        while((distance_right<30)||(distance_left<30)){ //while agv binnen pad
            if(serialOntvangen[1]>0x7F)
 13a:	cc e0       	ldi	r28, 0x0C	; 12
 13c:	d2 e0       	ldi	r29, 0x02	; 2

0000013e <.Loc.5>:
    if(serialOntvangen[0]==0x01){    //commmando bewegen
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	c1 f0       	breq	.+48     	; 0x172 <.L6>

00000142 <.L3>:
                achteruit();
            if(serialOntvangen[1]==0x7F)
                stop();
        }
    }
    if(serialOntvangen[0]==0x02){
 142:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <serialOntvangen>
 146:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <serialOntvangen+0x1>
 14a:	02 97       	sbiw	r24, 0x02	; 2
 14c:	41 f1       	breq	.+80     	; 0x19e <.L12>

0000014e <.L1>:
        if(serialOntvangen[1]==0x01)
            linksom();
        if(serialOntvangen[1]==0x02)
            rechtsom();
    }
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <.L7>:
            if(serialOntvangen[1]>0x7F)
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	9b 81       	ldd	r25, Y+3	; 0x03
 158:	80 38       	cpi	r24, 0x80	; 128
 15a:	91 05       	cpc	r25, r1
 15c:	b8 f4       	brcc	.+46     	; 0x18c <.L13>

0000015e <.L4>:
            if(serialOntvangen[1]<0x7F)
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	9b 81       	ldd	r25, Y+3	; 0x03
 162:	8f 37       	cpi	r24, 0x7F	; 127
 164:	91 05       	cpc	r25, r1
 166:	a8 f0       	brcs	.+42     	; 0x192 <.L14>

00000168 <.L5>:
            if(serialOntvangen[1]==0x7F)
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	8f 37       	cpi	r24, 0x7F	; 127
 16e:	91 05       	cpc	r25, r1
 170:	99 f0       	breq	.+38     	; 0x198 <.L15>

00000172 <.L6>:
        while((distance_right<30)||(distance_left<30)){ //while agv binnen pad
 172:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <distance_right>
 176:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <distance_right+0x1>

0000017a <.Loc.17>:
 17a:	4e 97       	sbiw	r24, 0x1e	; 30
 17c:	5c f3       	brlt	.-42     	; 0x154 <.L7>

0000017e <.Loc.18>:
 17e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 182:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>

00000186 <.Loc.19>:
 186:	4e 97       	sbiw	r24, 0x1e	; 30
 188:	2c f3       	brlt	.-54     	; 0x154 <.L7>
 18a:	db cf       	rjmp	.-74     	; 0x142 <.L3>

0000018c <.L13>:
                rechtdoor();
 18c:	0e 94 1c 01 	call	0x238	; 0x238 <rechtdoor>

00000190 <.LVL1>:
 190:	e6 cf       	rjmp	.-52     	; 0x15e <.L4>

00000192 <.L14>:
                achteruit();
 192:	0e 94 59 01 	call	0x2b2	; 0x2b2 <achteruit>

00000196 <.LVL2>:
 196:	e8 cf       	rjmp	.-48     	; 0x168 <.L5>

00000198 <.L15>:
                stop();
 198:	0e 94 08 01 	call	0x210	; 0x210 <stop>

0000019c <.LVL3>:
 19c:	ea cf       	rjmp	.-44     	; 0x172 <.L6>

0000019e <.L12>:
        if(serialOntvangen[1]==0x01)
 19e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <serialOntvangen+0x2>
 1a2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <serialOntvangen+0x3>
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	49 f0       	breq	.+18     	; 0x1bc <.L16>

000001aa <.L9>:
        if(serialOntvangen[1]==0x02)
 1aa:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <serialOntvangen+0x2>
 1ae:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <serialOntvangen+0x3>
 1b2:	02 97       	sbiw	r24, 0x02	; 2
 1b4:	61 f6       	brne	.-104    	; 0x14e <.L1>

000001b6 <.Loc.27>:
            rechtsom();
 1b6:	0e 94 c3 01 	call	0x386	; 0x386 <rechtsom>

000001ba <.LVL4>:
}
 1ba:	c9 cf       	rjmp	.-110    	; 0x14e <.L1>

000001bc <.L16>:
            linksom();
 1bc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <linksom>

000001c0 <.LVL5>:
 1c0:	f4 cf       	rjmp	.-24     	; 0x1aa <.L9>

000001c2 <main>:
#include "main.h"

int main(void)
{
    //initNoodstop();
    initStepper();
 1c2:	0e 94 9d 02 	call	0x53a	; 0x53a <initStepper>

000001c6 <.LBB4>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	87 ea       	ldi	r24, 0xA7	; 167
 1ca:	91 e6       	ldi	r25, 0x61	; 97

000001cc <.L1^B1>:
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <.L1^B1>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <L0^A>

000001d6 <L0^A>:
	...

000001d8 <.L2>:
    //init_ultrasoon();

    _delay_ms(2000);
    while(1){
        vooruit();
 1d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

000001dc <.LVL2>:
    while(1){
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <.L2>

000001de <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 1de:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 1e2:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>
 1e6:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <distance_right>
 1ea:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <distance_right+0x1>
 1ee:	82 0f       	add	r24, r18
 1f0:	93 1f       	adc	r25, r19

000001f2 <.Loc.3>:
 1f2:	0d 96       	adiw	r24, 0x0d	; 13

000001f4 <.Loc.4>:
 1f4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <padbreedte+0x1>
 1f8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <padbreedte>

000001fc <.Loc.5>:
}
 1fc:	08 95       	ret

000001fe <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(1150);
 1fe:	8e e7       	ldi	r24, 0x7E	; 126
 200:	94 e0       	ldi	r25, 0x04	; 4
 202:	0e 94 ab 02 	call	0x556	; 0x556 <speedStepperLeft>

00000206 <.LVL0>:
    speedStepperRight(1150);
 206:	8e e7       	ldi	r24, 0x7E	; 126
 208:	94 e0       	ldi	r25, 0x04	; 4
 20a:	0e 94 a4 02 	call	0x548	; 0x548 <speedStepperRight>

0000020e <.LVL1>:
}
 20e:	08 95       	ret

00000210 <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 ab 02 	call	0x556	; 0x556 <speedStepperLeft>

00000218 <.LVL2>:
    speedStepperRight(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 a4 02 	call	0x548	; 0x548 <speedStepperRight>

00000220 <.LVL3>:
}
 220:	08 95       	ret

00000222 <ramping>:

int ramping(int originalValue , int value){
 222:	26 2f       	mov	r18, r22
 224:	37 2f       	mov	r19, r23

00000226 <.Loc.16>:
    if(originalValue > value){
 226:	28 17       	cp	r18, r24
 228:	39 07       	cpc	r19, r25
 22a:	0c f4       	brge	.+2      	; 0x22e <.L5>

0000022c <.Loc.18>:
            originalValue --;
 22c:	01 97       	sbiw	r24, 0x01	; 1

0000022e <.L5>:
    }
    if(originalValue < value){
 22e:	82 17       	cp	r24, r18
 230:	93 07       	cpc	r25, r19
 232:	0c f4       	brge	.+2      	; 0x236 <.L6>

00000234 <.Loc.22>:
            originalValue ++;
 234:	01 96       	adiw	r24, 0x01	; 1

00000236 <.L6>:
    }
    return originalValue;
}
 236:	08 95       	ret

00000238 <rechtdoor>:

void rechtdoor(void){
    //while agv binnen het pad is
    if (distance_right==distance_left) {
 238:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <distance_right>
 23c:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <distance_right+0x1>
 240:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 244:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>

00000248 <.Loc.29>:
 248:	28 17       	cp	r18, r24
 24a:	39 07       	cpc	r19, r25
 24c:	b9 f0       	breq	.+46     	; 0x27c <.L11>

0000024e <.Loc.30>:
        speedStepperLeft(1150);
        speedStepperRight(1150);
    }
    else{
        if (distance_right < distance_left){
 24e:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <distance_right>
 252:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <distance_right+0x1>
 256:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 25a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>

0000025e <.Loc.32>:
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	ac f0       	brlt	.+42     	; 0x28e <.L12>

00000264 <.L10>:
            speedStepperLeft(ramping(1650, 1150));
            speedStepperRight(ramping(1150, 1650));
        }
        if(distance_left < distance_right){
 264:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <distance_left>
 268:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <distance_left+0x1>
 26c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <distance_right>
 270:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <distance_right+0x1>

00000274 <.Loc.35>:
 274:	28 17       	cp	r18, r24
 276:	39 07       	cpc	r19, r25
 278:	9c f0       	brlt	.+38     	; 0x2a0 <.L13>

0000027a <.L7>:
            speedStepperRight(ramping(1650, 1150));
            speedStepperLeft(ramping(1150, 1650));
        }
    }
    //stop driving
}
 27a:	08 95       	ret

0000027c <.L11>:
        speedStepperLeft(1150);
 27c:	8e e7       	ldi	r24, 0x7E	; 126
 27e:	94 e0       	ldi	r25, 0x04	; 4
 280:	0e 94 ab 02 	call	0x556	; 0x556 <speedStepperLeft>

00000284 <.LVL7>:
        speedStepperRight(1150);
 284:	8e e7       	ldi	r24, 0x7E	; 126
 286:	94 e0       	ldi	r25, 0x04	; 4
 288:	0e 94 a4 02 	call	0x548	; 0x548 <speedStepperRight>

0000028c <.LVL8>:
 28c:	08 95       	ret

0000028e <.L12>:
            speedStepperLeft(ramping(1650, 1150));
 28e:	81 e7       	ldi	r24, 0x71	; 113
 290:	96 e0       	ldi	r25, 0x06	; 6
 292:	0e 94 ab 02 	call	0x556	; 0x556 <speedStepperLeft>

00000296 <.LVL9>:
            speedStepperRight(ramping(1150, 1650));
 296:	8f e7       	ldi	r24, 0x7F	; 127
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	0e 94 a4 02 	call	0x548	; 0x548 <speedStepperRight>

0000029e <.LVL10>:
 29e:	e2 cf       	rjmp	.-60     	; 0x264 <.L10>

000002a0 <.L13>:
            speedStepperRight(ramping(1650, 1150));
 2a0:	81 e7       	ldi	r24, 0x71	; 113
 2a2:	96 e0       	ldi	r25, 0x06	; 6
 2a4:	0e 94 a4 02 	call	0x548	; 0x548 <speedStepperRight>

000002a8 <.LVL11>:
            speedStepperLeft(ramping(1150, 1650));
 2a8:	8f e7       	ldi	r24, 0x7F	; 127
 2aa:	94 e0       	ldi	r25, 0x04	; 4
 2ac:	0e 94 ab 02 	call	0x556	; 0x556 <speedStepperLeft>

000002b0 <.LVL12>:
}
 2b0:	e4 cf       	rjmp	.-56     	; 0x27a <.L7>

000002b2 <achteruit>:

void achteruit(void){

}
 2b2:	08 95       	ret

000002b4 <linksom>:

void linksom(void){
    enableStepCnt();
 2b4:	0e 94 0b 03 	call	0x616	; 0x616 <enableStepCnt>

000002b8 <.LVL13>:
    clearStepCnt();
 2b8:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

000002bc <.LVL14>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 2bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 2c0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 2c4:	84 30       	cpi	r24, 0x04	; 4
 2c6:	90 41       	sbci	r25, 0x10	; 16
 2c8:	48 f4       	brcc	.+18     	; 0x2dc <.L16>

000002ca <.L17>:
        vooruit();
 2ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

000002ce <.LVL15>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 2ce:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 2d2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	90 41       	sbci	r25, 0x10	; 16
 2da:	b8 f3       	brcs	.-18     	; 0x2ca <.L17>

000002dc <.L16>:
    }
    clearStepCnt();
 2dc:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

000002e0 <.LVL16>:
    toggleStepperDirectionRight();
 2e0:	0e 94 b2 02 	call	0x564	; 0x564 <toggleStepperDirectionRight>

000002e4 <.LVL17>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 2e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 2e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 2ec:	88 39       	cpi	r24, 0x98	; 152
 2ee:	98 40       	sbci	r25, 0x08	; 8
 2f0:	48 f4       	brcc	.+18     	; 0x304 <.L18>

000002f2 <.L19>:
        vooruit();
 2f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

000002f6 <.LVL18>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 2f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 2fa:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 2fe:	88 39       	cpi	r24, 0x98	; 152
 300:	98 40       	sbci	r25, 0x08	; 8
 302:	b8 f3       	brcs	.-18     	; 0x2f2 <.L19>

00000304 <.L18>:
    }
    toggleStepperDirectionRight();
 304:	0e 94 b2 02 	call	0x564	; 0x564 <toggleStepperDirectionRight>

00000308 <.LVL19>:
    clearStepCnt();
 308:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

0000030c <.LVL20>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 30c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 310:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 314:	8c 37       	cpi	r24, 0x7C	; 124
 316:	95 41       	sbci	r25, 0x15	; 21
 318:	48 f4       	brcc	.+18     	; 0x32c <.L20>

0000031a <.L21>:
        vooruit();
 31a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

0000031e <.LVL21>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 31e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 322:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 326:	8c 37       	cpi	r24, 0x7C	; 124
 328:	95 41       	sbci	r25, 0x15	; 21
 32a:	b8 f3       	brcs	.-18     	; 0x31a <.L21>

0000032c <.L20>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 32c:	0e 94 b2 02 	call	0x564	; 0x564 <toggleStepperDirectionRight>

00000330 <.LVL22>:
    clearStepCnt();
 330:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

00000334 <.LVL23>:
    while(stepCounterLeft<(2200)){
 334:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 338:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 33c:	88 39       	cpi	r24, 0x98	; 152
 33e:	98 40       	sbci	r25, 0x08	; 8
 340:	48 f4       	brcc	.+18     	; 0x354 <.L22>

00000342 <.L23>:
        vooruit();
 342:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

00000346 <.LVL24>:
    while(stepCounterLeft<(2200)){
 346:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 34a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 34e:	88 39       	cpi	r24, 0x98	; 152
 350:	98 40       	sbci	r25, 0x08	; 8
 352:	b8 f3       	brcs	.-18     	; 0x342 <.L23>

00000354 <.L22>:
    }
    toggleStepperDirectionRight();
 354:	0e 94 b2 02 	call	0x564	; 0x564 <toggleStepperDirectionRight>

00000358 <.LVL25>:
    clearStepCnt();
 358:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

0000035c <.LVL26>:
    vooruit();
 35c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

00000360 <.LVL27>:
    while(distance_left>15){           //agv is in het volgende pad
 360:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 364:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>
 368:	40 97       	sbiw	r24, 0x10	; 16
 36a:	44 f0       	brlt	.+16     	; 0x37c <.L24>

0000036c <.L25>:
        vooruit();
 36c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

00000370 <.LVL28>:
    while(distance_left>15){           //agv is in het volgende pad
 370:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 374:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>
 378:	40 97       	sbiw	r24, 0x10	; 16
 37a:	c4 f7       	brge	.-16     	; 0x36c <.L25>

0000037c <.L24>:
    }
    stop();
 37c:	0e 94 08 01 	call	0x210	; 0x210 <stop>

00000380 <.LVL29>:
    disableStepCnt();
 380:	0e 94 16 03 	call	0x62c	; 0x62c <disableStepCnt>

00000384 <.LVL30>:
}
 384:	08 95       	ret

00000386 <rechtsom>:

void rechtsom(void){
    enableStepCnt();
 386:	0e 94 0b 03 	call	0x616	; 0x616 <enableStepCnt>

0000038a <.LVL31>:
    clearStepCnt();
 38a:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

0000038e <.LVL32>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 38e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 392:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	90 41       	sbci	r25, 0x10	; 16
 39a:	48 f4       	brcc	.+18     	; 0x3ae <.L32>

0000039c <.L33>:
        vooruit();
 39c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

000003a0 <.LVL33>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 3a0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 3a4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	90 41       	sbci	r25, 0x10	; 16
 3ac:	b8 f3       	brcs	.-18     	; 0x39c <.L33>

000003ae <.L32>:
    }
    clearStepCnt();
 3ae:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

000003b2 <.LVL34>:
    toggleStepperDirectionLeft();
 3b2:	0e 94 c4 02 	call	0x588	; 0x588 <toggleStepperDirectionLeft>

000003b6 <.LVL35>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 3b6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 3ba:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 3be:	88 39       	cpi	r24, 0x98	; 152
 3c0:	98 40       	sbci	r25, 0x08	; 8
 3c2:	48 f4       	brcc	.+18     	; 0x3d6 <.L34>

000003c4 <.L35>:
        vooruit();
 3c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

000003c8 <.LVL36>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 3c8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 3cc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 3d0:	88 39       	cpi	r24, 0x98	; 152
 3d2:	98 40       	sbci	r25, 0x08	; 8
 3d4:	b8 f3       	brcs	.-18     	; 0x3c4 <.L35>

000003d6 <.L34>:
    }
    toggleStepperDirectionLeft();
 3d6:	0e 94 c4 02 	call	0x588	; 0x588 <toggleStepperDirectionLeft>

000003da <.LVL37>:
    clearStepCnt();
 3da:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

000003de <.LVL38>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 3de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 3e2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 3e6:	8c 37       	cpi	r24, 0x7C	; 124
 3e8:	95 41       	sbci	r25, 0x15	; 21
 3ea:	48 f4       	brcc	.+18     	; 0x3fe <.L36>

000003ec <.L37>:
        vooruit();
 3ec:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

000003f0 <.LVL39>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 3f0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 3f4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 3f8:	8c 37       	cpi	r24, 0x7C	; 124
 3fa:	95 41       	sbci	r25, 0x15	; 21
 3fc:	b8 f3       	brcs	.-18     	; 0x3ec <.L37>

000003fe <.L36>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 3fe:	0e 94 c4 02 	call	0x588	; 0x588 <toggleStepperDirectionLeft>

00000402 <.LVL40>:
    clearStepCnt();
 402:	0e 94 02 03 	call	0x604	; 0x604 <clearStepCnt>

00000406 <.LVL41>:
    while(stepCounterLeft<(2200)){
 406:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 40a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 40e:	88 39       	cpi	r24, 0x98	; 152
 410:	98 40       	sbci	r25, 0x08	; 8
 412:	48 f4       	brcc	.+18     	; 0x426 <.L38>

00000414 <.L39>:
        vooruit();
 414:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

00000418 <.LVL42>:
    while(stepCounterLeft<(2200)){
 418:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 41c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 420:	88 39       	cpi	r24, 0x98	; 152
 422:	98 40       	sbci	r25, 0x08	; 8
 424:	b8 f3       	brcs	.-18     	; 0x414 <.L39>

00000426 <.L38>:
    }
    toggleStepperDirectionLeft();
 426:	0e 94 c4 02 	call	0x588	; 0x588 <toggleStepperDirectionLeft>

0000042a <.LVL43>:
    disableStepCnt();
 42a:	0e 94 16 03 	call	0x62c	; 0x62c <disableStepCnt>

0000042e <.LVL44>:
    vooruit();
 42e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

00000432 <.LVL45>:
    while(distance_left>15){           //agv is in het volgende pad
 432:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 436:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>
 43a:	40 97       	sbiw	r24, 0x10	; 16
 43c:	44 f0       	brlt	.+16     	; 0x44e <.L40>

0000043e <.L41>:
        vooruit();
 43e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vooruit>

00000442 <.LVL46>:
    while(distance_left>15){           //agv is in het volgende pad
 442:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <distance_left>
 446:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <distance_left+0x1>
 44a:	40 97       	sbiw	r24, 0x10	; 16
 44c:	c4 f7       	brge	.-16     	; 0x43e <.L41>

0000044e <.L40>:
    }
    stop();
 44e:	0e 94 08 01 	call	0x210	; 0x210 <stop>

00000452 <.LVL47>:
}
 452:	08 95       	ret

00000454 <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 454:	50 98       	cbi	0x0a, 0	; 10

00000456 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 456:	58 9a       	sbi	0x0b, 0	; 11

00000458 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 458:	e8 9a       	sbi	0x1d, 0	; 29

0000045a <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 45a:	e9 e6       	ldi	r30, 0x69	; 105
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z

00000460 <.Loc.8>:
 460:	81 60       	ori	r24, 0x01	; 1
 462:	80 83       	st	Z, r24

00000464 <.Loc.9>:
    sei();
 464:	78 94       	sei

00000466 <.Loc.10>:
}
 466:	08 95       	ret

00000468 <__vector_1>:

ISR(INT0_vect){
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	0b b6       	in	r0, 0x3b	; 59
 474:	0f 92       	push	r0
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31

0000048e <.L5>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 48e:	48 9b       	sbis	0x09, 0	; 9
 490:	04 c0       	rjmp	.+8      	; 0x49a <.L3>

00000492 <.L4>:
            stop();
 492:	0e 94 08 01 	call	0x210	; 0x210 <stop>

00000496 <.LVL0>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 496:	48 99       	sbic	0x09, 0	; 9
 498:	fc cf       	rjmp	.-8      	; 0x492 <.L4>

0000049a <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 49a:	06 99       	sbic	0x00, 6	; 0
 49c:	f8 cf       	rjmp	.-16     	; 0x48e <.L5>

0000049e <.Loc.19>:
            //uitvoer();
            break;
        }
    }
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0b be       	out	0x3b, r0	; 59
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 4c4:	6b 9a       	sbi	0x0d, 3	; 13

000004c6 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 4c6:	e1 e0       	ldi	r30, 0x01	; 1
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	80 81       	ld	r24, Z

000004cc <.Loc.4>:
 4cc:	88 60       	ori	r24, 0x08	; 8
 4ce:	80 83       	st	Z, r24

000004d0 <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 4d0:	9d 9a       	sbi	0x13, 5	; 19

000004d2 <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 4d2:	80 81       	ld	r24, Z

000004d4 <.Loc.8>:
 4d4:	80 61       	ori	r24, 0x10	; 16
 4d6:	80 83       	st	Z, r24

000004d8 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 4d8:	73 98       	cbi	0x0e, 3	; 14

000004da <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 4da:	e2 e0       	ldi	r30, 0x02	; 2
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	80 81       	ld	r24, Z
 4e0:	87 7f       	andi	r24, 0xF7	; 247
 4e2:	80 83       	st	Z, r24

000004e4 <.Loc.13>:
	PORT_DIR_R |= (1<<DIRECTION_R);
 4e4:	a5 9a       	sbi	0x14, 5	; 20

000004e6 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 4e6:	80 81       	ld	r24, Z
 4e8:	8f 7e       	andi	r24, 0xEF	; 239
 4ea:	80 83       	st	Z, r24

000004ec <.Loc.17>:
}
 4ec:	08 95       	ret

000004ee <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
 4ee:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

000004f2 <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

000004f8 <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
 4f8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

000004fc <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 4fc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000500 <.Loc.27>:
}
 500:	08 95       	ret

00000502 <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
 502:	82 e8       	ldi	r24, 0x82	; 130
 504:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000508 <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 508:	8a e1       	ldi	r24, 0x1A	; 26
 50a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

0000050e <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 516:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

0000051a <.Loc.35>:
    sei();
 51a:	78 94       	sei

0000051c <.Loc.36>:
}
 51c:	08 95       	ret

0000051e <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
 51e:	82 e8       	ldi	r24, 0x82	; 130
 520:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000524 <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 524:	8a e1       	ldi	r24, 0x1A	; 26
 526:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000052a <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 532:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000536 <.Loc.44>:
    sei();
 536:	78 94       	sei

00000538 <.Loc.45>:
}
 538:	08 95       	ret

0000053a <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 53a:	0e 94 8f 02 	call	0x51e	; 0x51e <initTimer4Stepper>

0000053e <.LVL0>:
    initTimer3Stepper();
 53e:	0e 94 81 02 	call	0x502	; 0x502 <initTimer3Stepper>

00000542 <.LVL1>:
    initPinsStepper();
 542:	0e 94 62 02 	call	0x4c4	; 0x4c4 <initPinsStepper>

00000546 <.LVL2>:
}
 546:	08 95       	ret

00000548 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 548:	28 2f       	mov	r18, r24
 54a:	39 2f       	mov	r19, r25

0000054c <.Loc.53>:
    ICR3 = PWMRight;
 54c:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 550:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000554 <.Loc.55>:
}
 554:	08 95       	ret

00000556 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 556:	28 2f       	mov	r18, r24
 558:	39 2f       	mov	r19, r25

0000055a <.Loc.58>:
    ICR4 = PWMLeft;
 55a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 55e:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

00000562 <.Loc.60>:
}
 562:	08 95       	ret

00000564 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 564:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <state.1>
 568:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <state.1+0x1>
 56c:	89 2b       	or	r24, r25
 56e:	41 f4       	brne	.+16     	; 0x580 <.L9>

00000570 <.Loc.65>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 570:	a5 98       	cbi	0x14, 5	; 20

00000572 <.Loc.67>:
        state = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0

00000576 <.L10>:
 576:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <state.1+0x1>
 57a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <state.1>

0000057e <.Loc.69>:
    }
    else{
        PORT_DIR_R |= (1<<DIRECTION_R);
        state = 0;
    }
}
 57e:	08 95       	ret

00000580 <.L9>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 580:	a5 9a       	sbi	0x14, 5	; 20

00000582 <.Loc.72>:
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	f7 cf       	rjmp	.-18     	; 0x576 <.L10>

00000588 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 588:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <state.0>
 58c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <state.0+0x1>
 590:	89 2b       	or	r24, r25
 592:	61 f4       	brne	.+24     	; 0x5ac <.L12>

00000594 <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 594:	e2 e0       	ldi	r30, 0x02	; 2
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	80 81       	ld	r24, Z

0000059a <.Loc.79>:
 59a:	80 61       	ori	r24, 0x10	; 16
 59c:	80 83       	st	Z, r24

0000059e <.Loc.80>:
        state = 1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0

000005a2 <.L13>:
 5a2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <state.0+0x1>
 5a6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <state.0>

000005aa <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 5aa:	08 95       	ret

000005ac <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 5ac:	e2 e0       	ldi	r30, 0x02	; 2
 5ae:	f1 e0       	ldi	r31, 0x01	; 1
 5b0:	80 81       	ld	r24, Z
 5b2:	8f 7e       	andi	r24, 0xEF	; 239
 5b4:	80 83       	st	Z, r24

000005b6 <.Loc.85>:
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	f3 cf       	rjmp	.-26     	; 0x5a2 <.L13>

000005bc <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 5bc:	8f 93       	push	r24
 5be:	8f b7       	in	r24, 0x3f	; 63
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25

000005c4 <.Loc.88>:
    stepCounterLeft++;
 5c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 5c8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stepCounterLeft+0x1>
 5d2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stepCounterLeft>

000005d6 <.Loc.90>:
}
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	8f bf       	out	0x3f, r24	; 63
 5dc:	8f 91       	pop	r24
 5de:	18 95       	reti

000005e0 <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 5e0:	8f 93       	push	r24
 5e2:	8f b7       	in	r24, 0x3f	; 63
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25

000005e8 <.Loc.92>:
    stepCounterRight++;
 5e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterRight>
 5ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterRight+0x1>
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <stepCounterRight+0x1>
 5f6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <stepCounterRight>

000005fa <.Loc.94>:
}
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	8f bf       	out	0x3f, r24	; 63
 600:	8f 91       	pop	r24
 602:	18 95       	reti

00000604 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 604:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <stepCounterLeft+0x1>
 608:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <stepCounterLeft>

0000060c <.Loc.98>:
    stepCounterRight = 0;
 60c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <stepCounterRight+0x1>
 610:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <stepCounterRight>

00000614 <.Loc.100>:
}
 614:	08 95       	ret

00000616 <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
 616:	e2 e7       	ldi	r30, 0x72	; 114
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z

0000061c <.Loc.103>:
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	80 83       	st	Z, r24

00000620 <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
 620:	e1 e7       	ldi	r30, 0x71	; 113
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z

00000626 <.Loc.105>:
 626:	81 60       	ori	r24, 0x01	; 1
 628:	80 83       	st	Z, r24

0000062a <.Loc.106>:
}
 62a:	08 95       	ret

0000062c <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
 62c:	e2 e7       	ldi	r30, 0x72	; 114
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	8e 7f       	andi	r24, 0xFE	; 254
 634:	80 83       	st	Z, r24

00000636 <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
 636:	e1 e7       	ldi	r30, 0x71	; 113
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	8e 7f       	andi	r24, 0xFE	; 254
 63e:	80 83       	st	Z, r24

00000640 <.Loc.112>:
}
 640:	08 95       	ret

00000642 <initUsartReceive>:
#include <util/delay.h>

const uint16_t BRCR = 103; // BAUD rate 9600 omgerekent

void initUsartReceive(void) {   // initializeren USART 2
  UBRR2H = ((uint8_t)(BRCR >> 8));   // USART 1 BAUD RATE HIGH instellen
 642:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>

00000646 <.Loc.3>:
  UBRR2L = ((uint8_t)(BRCR & 0xFF)); // USART 1 BAUD RATE LOW instellen
 646:	87 e6       	ldi	r24, 0x67	; 103
 648:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>

0000064c <.Loc.5>:
  UCSR2B = (1 << RXEN2);    // ENABLE RX
 64c:	80 e1       	ldi	r24, 0x10	; 16
 64e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

00000652 <.Loc.7>:
  UCSR2C = (1 << UCSZ21) | (1 << UCSZ20);   // 8 bit (hex) sturen
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>

00000658 <.Loc.9>:
}
 658:	08 95       	ret

0000065a <flushUsart2Buffer>:

void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR2A & (1 << RXC2)) {
 65a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 65e:	88 23       	and	r24, r24
 660:	44 f4       	brge	.+16     	; 0x672 <.L2>

00000662 <.Loc.14>:
        dummy = UDR2; // Read and discard
 662:	a6 ed       	ldi	r26, 0xD6	; 214
 664:	b0 e0       	ldi	r27, 0x00	; 0

00000666 <.Loc.15>:
    while (UCSR2A & (1 << RXC2)) {
 666:	e0 ed       	ldi	r30, 0xD0	; 208
 668:	f0 e0       	ldi	r31, 0x00	; 0

0000066a <.L4>:
        dummy = UDR2; // Read and discard
 66a:	8c 91       	ld	r24, X

0000066c <.Loc.18>:
    while (UCSR2A & (1 << RXC2)) {
 66c:	80 81       	ld	r24, Z
 66e:	88 23       	and	r24, r24
 670:	e4 f3       	brlt	.-8      	; 0x66a <.L4>

00000672 <.L2>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 672:	08 95       	ret

00000674 <receiveByte>:

int receiveByte() { //ontvangen van 1 hex getal
    while ( !(UCSR2A & (1<<RXC2))); //Wait for data to be received
 674:	e0 ed       	ldi	r30, 0xD0	; 208
 676:	f0 e0       	ldi	r31, 0x00	; 0

00000678 <.L7>:
 678:	80 81       	ld	r24, Z

0000067a <.Loc.25>:
 67a:	88 23       	and	r24, r24
 67c:	ec f7       	brge	.-6      	; 0x678 <.L7>

0000067e <.Loc.26>:
    return UDR2;
 67e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>

00000682 <.Loc.28>:
}
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	08 95       	ret

00000686 <receiveCommand>:

unsigned int serialOntvangen[4];

void receiveCommand(){
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29

0000068e <.LBB2>:
    for(int i = 0; i<4; i++){
 68e:	cc e0       	ldi	r28, 0x0C	; 12
 690:	d2 e0       	ldi	r29, 0x02	; 2
 692:	04 e1       	ldi	r16, 0x14	; 20
 694:	12 e0       	ldi	r17, 0x02	; 2

00000696 <.L10>:
        serialOntvangen[i] = receiveByte();
 696:	0e 94 3a 03 	call	0x674	; 0x674 <receiveByte>

0000069a <.LVL2>:
 69a:	89 93       	st	Y+, r24
 69c:	99 93       	st	Y+, r25

0000069e <.Loc.36>:
    for(int i = 0; i<4; i++){
 69e:	c0 17       	cp	r28, r16
 6a0:	d1 07       	cpc	r29, r17
 6a2:	c9 f7       	brne	.-14     	; 0x696 <.L10>

000006a4 <.LBE2>:
    }
}
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	08 95       	ret

000006ae <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 6ae:	8b e2       	ldi	r24, 0x2B	; 43
 6b0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000006b4 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 6b4:	8a e5       	ldi	r24, 0x5A	; 90
 6b6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000006ba <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 6ba:	81 e2       	ldi	r24, 0x21	; 33
 6bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000006c0 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 6c0:	8f ef       	ldi	r24, 0xFF	; 255
 6c2:	9f ef       	ldi	r25, 0xFF	; 255
 6c4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 6c8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

000006cc <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 6cc:	84 e1       	ldi	r24, 0x14	; 20
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 6d4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

000006d8 <.Loc.11>:
    OCR5C = 20;
 6d8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 6dc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

000006e0 <.Loc.13>:
    //set enable interrupt
    sei();
 6e0:	78 94       	sei

000006e2 <.Loc.14>:
}
 6e2:	08 95       	ret

000006e4 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 6e4:	ea e0       	ldi	r30, 0x0A	; 10
 6e6:	f1 e0       	ldi	r31, 0x01	; 1
 6e8:	80 81       	ld	r24, Z

000006ea <.Loc.17>:
 6ea:	80 61       	ori	r24, 0x10	; 16
 6ec:	80 83       	st	Z, r24

000006ee <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 6ee:	80 81       	ld	r24, Z

000006f0 <.Loc.19>:
 6f0:	80 62       	ori	r24, 0x20	; 32
 6f2:	80 83       	st	Z, r24

000006f4 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 6f4:	ab e0       	ldi	r26, 0x0B	; 11
 6f6:	b1 e0       	ldi	r27, 0x01	; 1
 6f8:	8c 91       	ld	r24, X
 6fa:	8f 7e       	andi	r24, 0xEF	; 239
 6fc:	8c 93       	st	X, r24

000006fe <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 6fe:	8c 91       	ld	r24, X
 700:	8f 7d       	andi	r24, 0xDF	; 223
 702:	8c 93       	st	X, r24

00000704 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 704:	80 81       	ld	r24, Z
 706:	8d 7f       	andi	r24, 0xFD	; 253
 708:	80 83       	st	Z, r24

0000070a <.Loc.26>:
}
 70a:	08 95       	ret

0000070c <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 70c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <init_pins_ultrasoon>

00000710 <.LVL0>:
    init_timer5();
 710:	0e 94 57 03 	call	0x6ae	; 0x6ae <init_timer5>

00000714 <.LVL1>:
}
 714:	08 95       	ret

00000716 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 716:	8f 93       	push	r24
 718:	8f b7       	in	r24, 0x3f	; 63
 71a:	8f 93       	push	r24
 71c:	8b b7       	in	r24, 0x3b	; 59
 71e:	8f 93       	push	r24
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31

00000724 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 724:	e1 e2       	ldi	r30, 0x21	; 33
 726:	f1 e0       	ldi	r31, 0x01	; 1
 728:	80 81       	ld	r24, Z

0000072a <.Loc.33>:
 72a:	80 64       	ori	r24, 0x40	; 64
 72c:	80 83       	st	Z, r24

0000072e <.Loc.34>:
}
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	8f 91       	pop	r24
 734:	8b bf       	out	0x3b, r24	; 59
 736:	8f 91       	pop	r24
 738:	8f bf       	out	0x3f, r24	; 63
 73a:	8f 91       	pop	r24
 73c:	18 95       	reti

0000073e <__vector_46>:

ISR(TIMER5_CAPT_vect){
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	1f 92       	push	r1
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	2b b7       	in	r18, 0x3b	; 59
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31

00000760 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 760:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000764 <.Loc.39>:
 764:	86 ff       	sbrs	r24, 6
 766:	1e c0       	rjmp	.+60     	; 0x7a4 <.L6>

00000768 <.Loc.40>:
        start_time = ICR5;
 768:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 76c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000770 <.Loc.42>:
 770:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <start_time.0+0x1>
 774:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <start_time.0>

00000778 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 778:	e1 e2       	ldi	r30, 0x21	; 33
 77a:	f1 e0       	ldi	r31, 0x01	; 1
 77c:	80 81       	ld	r24, Z
 77e:	8f 7b       	andi	r24, 0xBF	; 191
 780:	80 83       	st	Z, r24

00000782 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	3f 91       	pop	r19
 794:	2f 91       	pop	r18
 796:	2b bf       	out	0x3b, r18	; 59
 798:	2f 91       	pop	r18
 79a:	1f 90       	pop	r1
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	18 95       	reti

000007a4 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 7a4:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 7a8:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000007ac <.Loc.48>:
 7ac:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <start_time.0>
 7b0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <start_time.0+0x1>
 7b4:	28 1b       	sub	r18, r24
 7b6:	39 0b       	sbc	r19, r25

000007b8 <.Loc.49>:
 7b8:	a9 e0       	ldi	r26, 0x09	; 9
 7ba:	bc e8       	ldi	r27, 0x8C	; 140
 7bc:	0e 94 1a 04 	call	0x834	; 0x834 <__umulhisi3>
 7c0:	00 24       	eor	r0, r0
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	00 1c       	adc	r0, r0
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	00 1c       	adc	r0, r0
 7ce:	89 2f       	mov	r24, r25
 7d0:	90 2d       	mov	r25, r0

000007d2 <.Loc.50>:
        if (current_sensor == 0) {
 7d2:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <current_sensor>
 7d6:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <current_sensor+0x1>

000007da <.Loc.52>:
 7da:	23 2b       	or	r18, r19
 7dc:	c9 f4       	brne	.+50     	; 0x810 <.L8>

000007de <.Loc.53>:
            distance_left = distance;  // Store distance for Sensor A
 7de:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <distance_left+0x1>
 7e2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <distance_left>

000007e6 <.L9>:
        if (current_sensor == 0) {
 7e6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <current_sensor>
 7ea:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <current_sensor+0x1>

000007ee <.Loc.57>:
 7ee:	89 2b       	or	r24, r25
 7f0:	a1 f4       	brne	.+40     	; 0x81a <.L10>

000007f2 <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <current_sensor+0x1>
 7fa:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <current_sensor>

000007fe <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 7fe:	e0 e2       	ldi	r30, 0x20	; 32
 800:	f1 e0       	ldi	r31, 0x01	; 1
 802:	80 81       	ld	r24, Z
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	80 83       	st	Z, r24

00000808 <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 808:	80 81       	ld	r24, Z

0000080a <.Loc.63>:
 80a:	80 62       	ori	r24, 0x20	; 32
 80c:	80 83       	st	Z, r24
 80e:	b9 cf       	rjmp	.-142    	; 0x782 <.L5>

00000810 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 810:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <distance_right+0x1>
 814:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <distance_right>
 818:	e6 cf       	rjmp	.-52     	; 0x7e6 <.L9>

0000081a <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 81a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <current_sensor+0x1>
 81e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <current_sensor>

00000822 <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 822:	e0 e2       	ldi	r30, 0x20	; 32
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	80 81       	ld	r24, Z
 828:	8f 7d       	andi	r24, 0xDF	; 223
 82a:	80 83       	st	Z, r24

0000082c <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 82c:	80 81       	ld	r24, Z

0000082e <.Loc.71>:
 82e:	88 60       	ori	r24, 0x08	; 8
 830:	80 83       	st	Z, r24

00000832 <.LBE2>:
}
 832:	a7 cf       	rjmp	.-178    	; 0x782 <.L5>

00000834 <__umulhisi3>:
 834:	a2 9f       	mul	r26, r18

00000836 <.Loc.1>:
 836:	b0 01       	movw	r22, r0

00000838 <.Loc.2>:
 838:	b3 9f       	mul	r27, r19

0000083a <.Loc.3>:
 83a:	c0 01       	movw	r24, r0

0000083c <.Loc.4>:
 83c:	a3 9f       	mul	r26, r19

0000083e <.Loc.5>:
 83e:	70 0d       	add	r23, r0

00000840 <.Loc.6>:
 840:	81 1d       	adc	r24, r1

00000842 <.Loc.7>:
 842:	11 24       	eor	r1, r1

00000844 <.Loc.8>:
 844:	91 1d       	adc	r25, r1

00000846 <.Loc.9>:
 846:	b2 9f       	mul	r27, r18

00000848 <.Loc.10>:
 848:	70 0d       	add	r23, r0

0000084a <.Loc.11>:
 84a:	81 1d       	adc	r24, r1

0000084c <.Loc.12>:
 84c:	11 24       	eor	r1, r1

0000084e <.Loc.13>:
 84e:	91 1d       	adc	r25, r1

00000850 <.Loc.14>:
 850:	08 95       	ret

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
