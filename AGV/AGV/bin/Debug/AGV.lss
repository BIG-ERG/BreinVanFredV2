
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000073a  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800200  00800200  000007ee  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00000848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000151f  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000f86  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000dfd  00000000  00000000  00002e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000002c8  00000000  00000000  00003c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000723  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001be  00000000  00000000  000045ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000004e  00000000  00000000  000047ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_1>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_35>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_45>
  b8:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_46>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_50>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a2 31       	cpi	r26, 0x12	; 18

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 88 00 	call	0x110	; 0x110 <main>
 108:	0c 94 9b 03 	jmp	0x736	; 0x736 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <main>:
int main(void)
{

    // Insert code

    while(1)
 110:	ff cf       	rjmp	.-2      	; 0x110 <main>

00000112 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 112:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 116:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>
 11a:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <distance_right>
 11e:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <distance_right+0x1>
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19

00000126 <.Loc.3>:
 126:	0d 96       	adiw	r24, 0x0d	; 13

00000128 <.Loc.4>:
 128:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <padbreedte+0x1>
 12c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <padbreedte>

00000130 <.Loc.5>:
}
 130:	08 95       	ret

00000132 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(1150);
 132:	8e e7       	ldi	r24, 0x7E	; 126
 134:	94 e0       	ldi	r25, 0x04	; 4
 136:	0e 94 53 02 	call	0x4a6	; 0x4a6 <speedStepperLeft>

0000013a <.LVL0>:
    speedStepperRight(1150);
 13a:	8e e7       	ldi	r24, 0x7E	; 126
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	0e 94 4c 02 	call	0x498	; 0x498 <speedStepperRight>

00000142 <.LVL1>:
}
 142:	08 95       	ret

00000144 <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 53 02 	call	0x4a6	; 0x4a6 <speedStepperLeft>

0000014c <.LVL2>:
    speedStepperRight(0);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 4c 02 	call	0x498	; 0x498 <speedStepperRight>

00000154 <.LVL3>:
}
 154:	08 95       	ret

00000156 <ramping>:

int ramping(int originalValue , int value){
 156:	26 2f       	mov	r18, r22
 158:	37 2f       	mov	r19, r23

0000015a <.Loc.16>:
    if(originalValue > value){
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	0c f4       	brge	.+2      	; 0x162 <.L5>

00000160 <.Loc.18>:
            originalValue --;
 160:	01 97       	sbiw	r24, 0x01	; 1

00000162 <.L5>:
    }
    if(originalValue < value){
 162:	82 17       	cp	r24, r18
 164:	93 07       	cpc	r25, r19
 166:	0c f4       	brge	.+2      	; 0x16a <.L6>

00000168 <.Loc.22>:
            originalValue ++;
 168:	01 96       	adiw	r24, 0x01	; 1

0000016a <.L6>:
    }
    return originalValue;
}
 16a:	08 95       	ret

0000016c <rechtdoor>:

void rechtdoor(void){
    //while agv binnen het pad is
    while((distance_right<30)||(distance_left<30)){
 16c:	21 c0       	rjmp	.+66     	; 0x1b0 <.L8>

0000016e <.L12>:
        if (distance_right==distance_left) {
 16e:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <distance_right>
 172:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <distance_right+0x1>
 176:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 17a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>

0000017e <.Loc.31>:
 17e:	28 17       	cp	r18, r24
 180:	39 07       	cpc	r19, r25
 182:	29 f1       	breq	.+74     	; 0x1ce <.L13>

00000184 <.Loc.32>:
                speedStepperLeft(1150);
                speedStepperRight(1150);
        }
        else{
            if (distance_right < distance_left){
 184:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <distance_right>
 188:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <distance_right+0x1>
 18c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 190:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>

00000194 <.Loc.34>:
 194:	28 17       	cp	r18, r24
 196:	39 07       	cpc	r19, r25
 198:	1c f1       	brlt	.+70     	; 0x1e0 <.L14>

0000019a <.L11>:
                speedStepperLeft(ramping(1650, 1150));
                speedStepperRight(ramping(1150, 1650));
            }
            if(distance_left < distance_right){
 19a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <distance_left>
 19e:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <distance_left+0x1>
 1a2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <distance_right>
 1a6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <distance_right+0x1>

000001aa <.Loc.37>:
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	0c f1       	brlt	.+66     	; 0x1f2 <.L15>

000001b0 <.L8>:
    while((distance_right<30)||(distance_left<30)){
 1b0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <distance_right>
 1b4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <distance_right+0x1>

000001b8 <.Loc.40>:
 1b8:	4e 97       	sbiw	r24, 0x1e	; 30
 1ba:	cc f2       	brlt	.-78     	; 0x16e <.L12>

000001bc <.Loc.41>:
 1bc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 1c0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>

000001c4 <.Loc.42>:
 1c4:	4e 97       	sbiw	r24, 0x1e	; 30
 1c6:	9c f2       	brlt	.-90     	; 0x16e <.L12>

000001c8 <.Loc.43>:
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    //stop driving
    stop();
 1c8:	0e 94 a2 00 	call	0x144	; 0x144 <stop>

000001cc <.LVL7>:
}
 1cc:	08 95       	ret

000001ce <.L13>:
                speedStepperLeft(1150);
 1ce:	8e e7       	ldi	r24, 0x7E	; 126
 1d0:	94 e0       	ldi	r25, 0x04	; 4
 1d2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <speedStepperLeft>

000001d6 <.LVL8>:
                speedStepperRight(1150);
 1d6:	8e e7       	ldi	r24, 0x7E	; 126
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	0e 94 4c 02 	call	0x498	; 0x498 <speedStepperRight>

000001de <.LVL9>:
 1de:	e8 cf       	rjmp	.-48     	; 0x1b0 <.L8>

000001e0 <.L14>:
                speedStepperLeft(ramping(1650, 1150));
 1e0:	81 e7       	ldi	r24, 0x71	; 113
 1e2:	96 e0       	ldi	r25, 0x06	; 6
 1e4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <speedStepperLeft>

000001e8 <.LVL10>:
                speedStepperRight(ramping(1150, 1650));
 1e8:	8f e7       	ldi	r24, 0x7F	; 127
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	0e 94 4c 02 	call	0x498	; 0x498 <speedStepperRight>

000001f0 <.LVL11>:
 1f0:	d4 cf       	rjmp	.-88     	; 0x19a <.L11>

000001f2 <.L15>:
                speedStepperRight(ramping(1650, 1150));
 1f2:	81 e7       	ldi	r24, 0x71	; 113
 1f4:	96 e0       	ldi	r25, 0x06	; 6
 1f6:	0e 94 4c 02 	call	0x498	; 0x498 <speedStepperRight>

000001fa <.LVL12>:
                speedStepperLeft(ramping(1150, 1650));
 1fa:	8f e7       	ldi	r24, 0x7F	; 127
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	0e 94 53 02 	call	0x4a6	; 0x4a6 <speedStepperLeft>

00000202 <.LVL13>:
 202:	d6 cf       	rjmp	.-84     	; 0x1b0 <.L8>

00000204 <linksom>:

void linksom(void){
    enableStepCnt();
 204:	0e 94 b3 02 	call	0x566	; 0x566 <enableStepCnt>

00000208 <.LVL14>:
    clearStepCnt();
 208:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

0000020c <.LVL15>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 20c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 210:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 214:	84 30       	cpi	r24, 0x04	; 4
 216:	90 41       	sbci	r25, 0x10	; 16
 218:	48 f4       	brcc	.+18     	; 0x22c <.L17>

0000021a <.L18>:
        vooruit();
 21a:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

0000021e <.LVL16>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 21e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 222:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	90 41       	sbci	r25, 0x10	; 16
 22a:	b8 f3       	brcs	.-18     	; 0x21a <.L18>

0000022c <.L17>:
    }
    clearStepCnt();
 22c:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

00000230 <.LVL17>:
    toggleStepperDirectionRight();
 230:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <toggleStepperDirectionRight>

00000234 <.LVL18>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 234:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 238:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 23c:	88 39       	cpi	r24, 0x98	; 152
 23e:	98 40       	sbci	r25, 0x08	; 8
 240:	48 f4       	brcc	.+18     	; 0x254 <.L19>

00000242 <.L20>:
        vooruit();
 242:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000246 <.LVL19>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 246:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 24a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 24e:	88 39       	cpi	r24, 0x98	; 152
 250:	98 40       	sbci	r25, 0x08	; 8
 252:	b8 f3       	brcs	.-18     	; 0x242 <.L20>

00000254 <.L19>:
    }
    toggleStepperDirectionRight();
 254:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <toggleStepperDirectionRight>

00000258 <.LVL20>:
    clearStepCnt();
 258:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

0000025c <.LVL21>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 25c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 260:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 264:	8c 37       	cpi	r24, 0x7C	; 124
 266:	95 41       	sbci	r25, 0x15	; 21
 268:	48 f4       	brcc	.+18     	; 0x27c <.L21>

0000026a <.L22>:
        vooruit();
 26a:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

0000026e <.LVL22>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 26e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 272:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 276:	8c 37       	cpi	r24, 0x7C	; 124
 278:	95 41       	sbci	r25, 0x15	; 21
 27a:	b8 f3       	brcs	.-18     	; 0x26a <.L22>

0000027c <.L21>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 27c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <toggleStepperDirectionRight>

00000280 <.LVL23>:
    clearStepCnt();
 280:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

00000284 <.LVL24>:
    while(stepCounterLeft<(2200)){
 284:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 288:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 28c:	88 39       	cpi	r24, 0x98	; 152
 28e:	98 40       	sbci	r25, 0x08	; 8
 290:	48 f4       	brcc	.+18     	; 0x2a4 <.L23>

00000292 <.L24>:
        vooruit();
 292:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000296 <.LVL25>:
    while(stepCounterLeft<(2200)){
 296:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 29a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 29e:	88 39       	cpi	r24, 0x98	; 152
 2a0:	98 40       	sbci	r25, 0x08	; 8
 2a2:	b8 f3       	brcs	.-18     	; 0x292 <.L24>

000002a4 <.L23>:
    }
    toggleStepperDirectionRight();
 2a4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <toggleStepperDirectionRight>

000002a8 <.LVL26>:
    clearStepCnt();
 2a8:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

000002ac <.LVL27>:
    vooruit();
 2ac:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

000002b0 <.LVL28>:
    while(distance_left>15){           //agv is in het volgende pad
 2b0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 2b4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>
 2b8:	40 97       	sbiw	r24, 0x10	; 16
 2ba:	44 f0       	brlt	.+16     	; 0x2cc <.L25>

000002bc <.L26>:
        vooruit();
 2bc:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

000002c0 <.LVL29>:
    while(distance_left>15){           //agv is in het volgende pad
 2c0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 2c4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>
 2c8:	40 97       	sbiw	r24, 0x10	; 16
 2ca:	c4 f7       	brge	.-16     	; 0x2bc <.L26>

000002cc <.L25>:
    }
    stop();
 2cc:	0e 94 a2 00 	call	0x144	; 0x144 <stop>

000002d0 <.LVL30>:
    disableStepCnt();
 2d0:	0e 94 be 02 	call	0x57c	; 0x57c <disableStepCnt>

000002d4 <.LVL31>:
}
 2d4:	08 95       	ret

000002d6 <rechtsom>:

void rechtsom(void){
    enableStepCnt();
 2d6:	0e 94 b3 02 	call	0x566	; 0x566 <enableStepCnt>

000002da <.LVL32>:
    clearStepCnt();
 2da:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

000002de <.LVL33>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 2de:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 2e2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 2e6:	84 30       	cpi	r24, 0x04	; 4
 2e8:	90 41       	sbci	r25, 0x10	; 16
 2ea:	48 f4       	brcc	.+18     	; 0x2fe <.L33>

000002ec <.L34>:
        vooruit();
 2ec:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

000002f0 <.LVL34>:
    while(stepCounterLeft<4100){      //agv rijdt ietsjes verder buiten het pad
 2f0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 2f4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 2f8:	84 30       	cpi	r24, 0x04	; 4
 2fa:	90 41       	sbci	r25, 0x10	; 16
 2fc:	b8 f3       	brcs	.-18     	; 0x2ec <.L34>

000002fe <.L33>:
    }
    clearStepCnt();
 2fe:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

00000302 <.LVL35>:
    toggleStepperDirectionLeft();
 302:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <toggleStepperDirectionLeft>

00000306 <.LVL36>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 306:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 30a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 30e:	88 39       	cpi	r24, 0x98	; 152
 310:	98 40       	sbci	r25, 0x08	; 8
 312:	48 f4       	brcc	.+18     	; 0x326 <.L35>

00000314 <.L36>:
        vooruit();
 314:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000318 <.LVL37>:
    while(stepCounterLeft<2200){   //agv draait 90 graden
 318:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 31c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 320:	88 39       	cpi	r24, 0x98	; 152
 322:	98 40       	sbci	r25, 0x08	; 8
 324:	b8 f3       	brcs	.-18     	; 0x314 <.L36>

00000326 <.L35>:
    }
    toggleStepperDirectionLeft();
 326:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <toggleStepperDirectionLeft>

0000032a <.LVL38>:
    clearStepCnt();
 32a:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

0000032e <.LVL39>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 32e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 332:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 336:	8c 37       	cpi	r24, 0x7C	; 124
 338:	95 41       	sbci	r25, 0x15	; 21
 33a:	48 f4       	brcc	.+18     	; 0x34e <.L37>

0000033c <.L38>:
        vooruit();
 33c:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000340 <.LVL40>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 340:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 344:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 348:	8c 37       	cpi	r24, 0x7C	; 124
 34a:	95 41       	sbci	r25, 0x15	; 21
 34c:	b8 f3       	brcs	.-18     	; 0x33c <.L38>

0000034e <.L37>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 34e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <toggleStepperDirectionLeft>

00000352 <.LVL41>:
    clearStepCnt();
 352:	0e 94 aa 02 	call	0x554	; 0x554 <clearStepCnt>

00000356 <.LVL42>:
    while(stepCounterLeft<(2200)){
 356:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 35a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 35e:	88 39       	cpi	r24, 0x98	; 152
 360:	98 40       	sbci	r25, 0x08	; 8
 362:	48 f4       	brcc	.+18     	; 0x376 <.L39>

00000364 <.L40>:
        vooruit();
 364:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000368 <.LVL43>:
    while(stepCounterLeft<(2200)){
 368:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 36c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 370:	88 39       	cpi	r24, 0x98	; 152
 372:	98 40       	sbci	r25, 0x08	; 8
 374:	b8 f3       	brcs	.-18     	; 0x364 <.L40>

00000376 <.L39>:
    }
    toggleStepperDirectionLeft();
 376:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <toggleStepperDirectionLeft>

0000037a <.LVL44>:
    disableStepCnt();
 37a:	0e 94 be 02 	call	0x57c	; 0x57c <disableStepCnt>

0000037e <.LVL45>:
    vooruit();
 37e:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000382 <.LVL46>:
    while(distance_left>15){           //agv is in het volgende pad
 382:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 386:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>
 38a:	40 97       	sbiw	r24, 0x10	; 16
 38c:	44 f0       	brlt	.+16     	; 0x39e <.L41>

0000038e <.L42>:
        vooruit();
 38e:	0e 94 99 00 	call	0x132	; 0x132 <vooruit>

00000392 <.LVL47>:
    while(distance_left>15){           //agv is in het volgende pad
 392:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <distance_left>
 396:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <distance_left+0x1>
 39a:	40 97       	sbiw	r24, 0x10	; 16
 39c:	c4 f7       	brge	.-16     	; 0x38e <.L42>

0000039e <.L41>:
    }
    stop();
 39e:	0e 94 a2 00 	call	0x144	; 0x144 <stop>

000003a2 <.LVL48>:
}
 3a2:	08 95       	ret

000003a4 <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 3a4:	50 98       	cbi	0x0a, 0	; 10

000003a6 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 3a6:	58 9a       	sbi	0x0b, 0	; 11

000003a8 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 3a8:	e8 9a       	sbi	0x1d, 0	; 29

000003aa <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 3aa:	e9 e6       	ldi	r30, 0x69	; 105
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z

000003b0 <.Loc.8>:
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	80 83       	st	Z, r24

000003b4 <.Loc.9>:
    sei();
 3b4:	78 94       	sei

000003b6 <.Loc.10>:
}
 3b6:	08 95       	ret

000003b8 <__vector_1>:

ISR(INT0_vect){
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	0b b6       	in	r0, 0x3b	; 59
 3c4:	0f 92       	push	r0
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31

000003de <.L5>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 3de:	48 9b       	sbis	0x09, 0	; 9
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <.L3>

000003e2 <.L4>:
            stop();
 3e2:	0e 94 a2 00 	call	0x144	; 0x144 <stop>

000003e6 <.LVL0>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 3e6:	48 99       	sbic	0x09, 0	; 9
 3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <.L4>

000003ea <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 3ea:	06 99       	sbic	0x00, 6	; 0
 3ec:	f8 cf       	rjmp	.-16     	; 0x3de <.L5>

000003ee <.Loc.19>:
            //uitvoer();
            break;
        }
    }
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0b be       	out	0x3b, r0	; 59
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 414:	6b 9a       	sbi	0x0d, 3	; 13

00000416 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 416:	e1 e0       	ldi	r30, 0x01	; 1
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	80 81       	ld	r24, Z

0000041c <.Loc.4>:
 41c:	88 60       	ori	r24, 0x08	; 8
 41e:	80 83       	st	Z, r24

00000420 <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 420:	9d 9a       	sbi	0x13, 5	; 19

00000422 <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 422:	80 81       	ld	r24, Z

00000424 <.Loc.8>:
 424:	80 61       	ori	r24, 0x10	; 16
 426:	80 83       	st	Z, r24

00000428 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 428:	73 98       	cbi	0x0e, 3	; 14

0000042a <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 42a:	e2 e0       	ldi	r30, 0x02	; 2
 42c:	f1 e0       	ldi	r31, 0x01	; 1
 42e:	80 81       	ld	r24, Z
 430:	87 7f       	andi	r24, 0xF7	; 247
 432:	80 83       	st	Z, r24

00000434 <.Loc.13>:
	PORT_DIR_R &= ~(1<<DIRECTION_R);
 434:	a5 98       	cbi	0x14, 5	; 20

00000436 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 436:	80 81       	ld	r24, Z
 438:	8f 7e       	andi	r24, 0xEF	; 239
 43a:	80 83       	st	Z, r24

0000043c <.Loc.17>:
}
 43c:	08 95       	ret

0000043e <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
 43e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000442 <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000448 <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
 448:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

0000044c <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 44c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000450 <.Loc.27>:
}
 450:	08 95       	ret

00000452 <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
 452:	82 e8       	ldi	r24, 0x82	; 130
 454:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000458 <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 458:	8a e1       	ldi	r24, 0x1A	; 26
 45a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

0000045e <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 466:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

0000046a <.Loc.35>:
    sei();
 46a:	78 94       	sei

0000046c <.Loc.36>:
}
 46c:	08 95       	ret

0000046e <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
 46e:	82 e8       	ldi	r24, 0x82	; 130
 470:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000474 <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 474:	8a e1       	ldi	r24, 0x1A	; 26
 476:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000047a <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 482:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000486 <.Loc.44>:
    sei();
 486:	78 94       	sei

00000488 <.Loc.45>:
}
 488:	08 95       	ret

0000048a <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 48a:	0e 94 37 02 	call	0x46e	; 0x46e <initTimer4Stepper>

0000048e <.LVL0>:
    initTimer3Stepper();
 48e:	0e 94 29 02 	call	0x452	; 0x452 <initTimer3Stepper>

00000492 <.LVL1>:
    initPinsStepper();
 492:	0e 94 0a 02 	call	0x414	; 0x414 <initPinsStepper>

00000496 <.LVL2>:
}
 496:	08 95       	ret

00000498 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 498:	28 2f       	mov	r18, r24
 49a:	39 2f       	mov	r19, r25

0000049c <.Loc.53>:
    ICR3 = PWMRight;
 49c:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 4a0:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

000004a4 <.Loc.55>:
}
 4a4:	08 95       	ret

000004a6 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 4a6:	28 2f       	mov	r18, r24
 4a8:	39 2f       	mov	r19, r25

000004aa <.Loc.58>:
    ICR4 = PWMLeft;
 4aa:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 4ae:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

000004b2 <.Loc.60>:
}
 4b2:	08 95       	ret

000004b4 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 4b4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <state.1>
 4b8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <state.1+0x1>
 4bc:	89 2b       	or	r24, r25
 4be:	41 f4       	brne	.+16     	; 0x4d0 <.L9>

000004c0 <.Loc.65>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 4c0:	a5 9a       	sbi	0x14, 5	; 20

000004c2 <.Loc.67>:
        state = 1;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0

000004c6 <.L10>:
 4c6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <state.1+0x1>
 4ca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <state.1>

000004ce <.Loc.69>:
    }
    else{
        PORT_DIR_R &= ~(1<<DIRECTION_R);
        state = 0;
    }
}
 4ce:	08 95       	ret

000004d0 <.L9>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 4d0:	a5 98       	cbi	0x14, 5	; 20

000004d2 <.Loc.72>:
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <.L10>

000004d8 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 4d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <state.0>
 4dc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <state.0+0x1>
 4e0:	89 2b       	or	r24, r25
 4e2:	61 f4       	brne	.+24     	; 0x4fc <.L12>

000004e4 <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 4e4:	e2 e0       	ldi	r30, 0x02	; 2
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	80 81       	ld	r24, Z

000004ea <.Loc.79>:
 4ea:	80 61       	ori	r24, 0x10	; 16
 4ec:	80 83       	st	Z, r24

000004ee <.Loc.80>:
        state = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0

000004f2 <.L13>:
 4f2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <state.0+0x1>
 4f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <state.0>

000004fa <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 4fa:	08 95       	ret

000004fc <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 4fc:	e2 e0       	ldi	r30, 0x02	; 2
 4fe:	f1 e0       	ldi	r31, 0x01	; 1
 500:	80 81       	ld	r24, Z
 502:	8f 7e       	andi	r24, 0xEF	; 239
 504:	80 83       	st	Z, r24

00000506 <.Loc.85>:
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	f3 cf       	rjmp	.-26     	; 0x4f2 <.L13>

0000050c <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 50c:	8f 93       	push	r24
 50e:	8f b7       	in	r24, 0x3f	; 63
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25

00000514 <.Loc.88>:
    stepCounterLeft++;
 514:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterLeft>
 518:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterLeft+0x1>
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <stepCounterLeft+0x1>
 522:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <stepCounterLeft>

00000526 <.Loc.90>:
}
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	8f bf       	out	0x3f, r24	; 63
 52c:	8f 91       	pop	r24
 52e:	18 95       	reti

00000530 <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 530:	8f 93       	push	r24
 532:	8f b7       	in	r24, 0x3f	; 63
 534:	8f 93       	push	r24
 536:	9f 93       	push	r25

00000538 <.Loc.92>:
    stepCounterRight++;
 538:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <stepCounterRight>
 53c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <stepCounterRight+0x1>
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <stepCounterRight+0x1>
 546:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <stepCounterRight>

0000054a <.Loc.94>:
}
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	8f bf       	out	0x3f, r24	; 63
 550:	8f 91       	pop	r24
 552:	18 95       	reti

00000554 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 554:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <stepCounterLeft+0x1>
 558:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <stepCounterLeft>

0000055c <.Loc.98>:
    stepCounterRight = 0;
 55c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <stepCounterRight+0x1>
 560:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <stepCounterRight>

00000564 <.Loc.100>:
}
 564:	08 95       	ret

00000566 <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
 566:	e2 e7       	ldi	r30, 0x72	; 114
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z

0000056c <.Loc.103>:
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	80 83       	st	Z, r24

00000570 <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
 570:	e1 e7       	ldi	r30, 0x71	; 113
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z

00000576 <.Loc.105>:
 576:	81 60       	ori	r24, 0x01	; 1
 578:	80 83       	st	Z, r24

0000057a <.Loc.106>:
}
 57a:	08 95       	ret

0000057c <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
 57c:	e2 e7       	ldi	r30, 0x72	; 114
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	8e 7f       	andi	r24, 0xFE	; 254
 584:	80 83       	st	Z, r24

00000586 <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
 586:	e1 e7       	ldi	r30, 0x71	; 113
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	8e 7f       	andi	r24, 0xFE	; 254
 58e:	80 83       	st	Z, r24

00000590 <.Loc.112>:
}
 590:	08 95       	ret

00000592 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 592:	8b e2       	ldi	r24, 0x2B	; 43
 594:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000598 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 598:	8a e5       	ldi	r24, 0x5A	; 90
 59a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

0000059e <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 59e:	81 e2       	ldi	r24, 0x21	; 33
 5a0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000005a4 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 5ac:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

000005b0 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 5b0:	84 e1       	ldi	r24, 0x14	; 20
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 5b8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

000005bc <.Loc.11>:
    OCR5C = 20;
 5bc:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 5c0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

000005c4 <.Loc.13>:
    //set enable interrupt
    sei();
 5c4:	78 94       	sei

000005c6 <.Loc.14>:
}
 5c6:	08 95       	ret

000005c8 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 5c8:	ea e0       	ldi	r30, 0x0A	; 10
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	80 81       	ld	r24, Z

000005ce <.Loc.17>:
 5ce:	80 61       	ori	r24, 0x10	; 16
 5d0:	80 83       	st	Z, r24

000005d2 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 5d2:	80 81       	ld	r24, Z

000005d4 <.Loc.19>:
 5d4:	80 62       	ori	r24, 0x20	; 32
 5d6:	80 83       	st	Z, r24

000005d8 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 5d8:	ab e0       	ldi	r26, 0x0B	; 11
 5da:	b1 e0       	ldi	r27, 0x01	; 1
 5dc:	8c 91       	ld	r24, X
 5de:	8f 7e       	andi	r24, 0xEF	; 239
 5e0:	8c 93       	st	X, r24

000005e2 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 5e2:	8c 91       	ld	r24, X
 5e4:	8f 7d       	andi	r24, 0xDF	; 223
 5e6:	8c 93       	st	X, r24

000005e8 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 5e8:	80 81       	ld	r24, Z
 5ea:	8d 7f       	andi	r24, 0xFD	; 253
 5ec:	80 83       	st	Z, r24

000005ee <.Loc.26>:
}
 5ee:	08 95       	ret

000005f0 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 5f0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <init_pins_ultrasoon>

000005f4 <.LVL0>:
    init_timer5();
 5f4:	0e 94 c9 02 	call	0x592	; 0x592 <init_timer5>

000005f8 <.LVL1>:
}
 5f8:	08 95       	ret

000005fa <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 5fa:	8f 93       	push	r24
 5fc:	8f b7       	in	r24, 0x3f	; 63
 5fe:	8f 93       	push	r24
 600:	8b b7       	in	r24, 0x3b	; 59
 602:	8f 93       	push	r24
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31

00000608 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 608:	e1 e2       	ldi	r30, 0x21	; 33
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	80 81       	ld	r24, Z

0000060e <.Loc.33>:
 60e:	80 64       	ori	r24, 0x40	; 64
 610:	80 83       	st	Z, r24

00000612 <.Loc.34>:
}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	8f 91       	pop	r24
 618:	8b bf       	out	0x3b, r24	; 59
 61a:	8f 91       	pop	r24
 61c:	8f bf       	out	0x3f, r24	; 63
 61e:	8f 91       	pop	r24
 620:	18 95       	reti

00000622 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	1f 92       	push	r1
 62a:	11 24       	eor	r1, r1
 62c:	2f 93       	push	r18
 62e:	2b b7       	in	r18, 0x3b	; 59
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	6f 93       	push	r22
 636:	7f 93       	push	r23
 638:	8f 93       	push	r24
 63a:	9f 93       	push	r25
 63c:	af 93       	push	r26
 63e:	bf 93       	push	r27
 640:	ef 93       	push	r30
 642:	ff 93       	push	r31

00000644 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 644:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000648 <.Loc.39>:
 648:	86 ff       	sbrs	r24, 6
 64a:	1e c0       	rjmp	.+60     	; 0x688 <.L6>

0000064c <.Loc.40>:
        start_time = ICR5;
 64c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 650:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000654 <.Loc.42>:
 654:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <start_time.0+0x1>
 658:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <start_time.0>

0000065c <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 65c:	e1 e2       	ldi	r30, 0x21	; 33
 65e:	f1 e0       	ldi	r31, 0x01	; 1
 660:	80 81       	ld	r24, Z
 662:	8f 7b       	andi	r24, 0xBF	; 191
 664:	80 83       	st	Z, r24

00000666 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	2b bf       	out	0x3b, r18	; 59
 67c:	2f 91       	pop	r18
 67e:	1f 90       	pop	r1
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	18 95       	reti

00000688 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 688:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 68c:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000690 <.Loc.48>:
 690:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <start_time.0>
 694:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <start_time.0+0x1>
 698:	28 1b       	sub	r18, r24
 69a:	39 0b       	sbc	r19, r25

0000069c <.Loc.49>:
 69c:	a9 e0       	ldi	r26, 0x09	; 9
 69e:	bc e8       	ldi	r27, 0x8C	; 140
 6a0:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 6a4:	00 24       	eor	r0, r0
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	00 1c       	adc	r0, r0
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	00 1c       	adc	r0, r0
 6b2:	89 2f       	mov	r24, r25
 6b4:	90 2d       	mov	r25, r0

000006b6 <.Loc.50>:
        if (current_sensor == 0) {
 6b6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <current_sensor>
 6ba:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <current_sensor+0x1>

000006be <.Loc.52>:
 6be:	23 2b       	or	r18, r19
 6c0:	c9 f4       	brne	.+50     	; 0x6f4 <.L8>

000006c2 <.Loc.53>:
            distance_left = distance;  // Store distance for Sensor A
 6c2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <distance_left+0x1>
 6c6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <distance_left>

000006ca <.L9>:
        if (current_sensor == 0) {
 6ca:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <current_sensor>
 6ce:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <current_sensor+0x1>

000006d2 <.Loc.57>:
 6d2:	89 2b       	or	r24, r25
 6d4:	a1 f4       	brne	.+40     	; 0x6fe <.L10>

000006d6 <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <current_sensor+0x1>
 6de:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <current_sensor>

000006e2 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 6e2:	e0 e2       	ldi	r30, 0x20	; 32
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	80 81       	ld	r24, Z
 6e8:	87 7f       	andi	r24, 0xF7	; 247
 6ea:	80 83       	st	Z, r24

000006ec <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 6ec:	80 81       	ld	r24, Z

000006ee <.Loc.63>:
 6ee:	80 62       	ori	r24, 0x20	; 32
 6f0:	80 83       	st	Z, r24
 6f2:	b9 cf       	rjmp	.-142    	; 0x666 <.L5>

000006f4 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 6f4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <distance_right+0x1>
 6f8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <distance_right>
 6fc:	e6 cf       	rjmp	.-52     	; 0x6ca <.L9>

000006fe <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 6fe:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <current_sensor+0x1>
 702:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <current_sensor>

00000706 <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 706:	e0 e2       	ldi	r30, 0x20	; 32
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	80 81       	ld	r24, Z
 70c:	8f 7d       	andi	r24, 0xDF	; 223
 70e:	80 83       	st	Z, r24

00000710 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 710:	80 81       	ld	r24, Z

00000712 <.Loc.71>:
 712:	88 60       	ori	r24, 0x08	; 8
 714:	80 83       	st	Z, r24

00000716 <.LBE2>:
}
 716:	a7 cf       	rjmp	.-178    	; 0x666 <.L5>

00000718 <__umulhisi3>:
 718:	a2 9f       	mul	r26, r18

0000071a <.Loc.1>:
 71a:	b0 01       	movw	r22, r0

0000071c <.Loc.2>:
 71c:	b3 9f       	mul	r27, r19

0000071e <.Loc.3>:
 71e:	c0 01       	movw	r24, r0

00000720 <.Loc.4>:
 720:	a3 9f       	mul	r26, r19

00000722 <.Loc.5>:
 722:	70 0d       	add	r23, r0

00000724 <.Loc.6>:
 724:	81 1d       	adc	r24, r1

00000726 <.Loc.7>:
 726:	11 24       	eor	r1, r1

00000728 <.Loc.8>:
 728:	91 1d       	adc	r25, r1

0000072a <.Loc.9>:
 72a:	b2 9f       	mul	r27, r18

0000072c <.Loc.10>:
 72c:	70 0d       	add	r23, r0

0000072e <.Loc.11>:
 72e:	81 1d       	adc	r24, r1

00000730 <.Loc.12>:
 730:	11 24       	eor	r1, r1

00000732 <.Loc.13>:
 732:	91 1d       	adc	r25, r1

00000734 <.Loc.14>:
 734:	08 95       	ret

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
