
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000e12  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e12  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800222  00800222  00000ee8  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001d8  00000000  00000000  00000f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000242f  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000012fe  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001bd8  00000000  00000000  00004845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000005b8  00000000  00000000  00006420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000948  00000000  00000000  000069d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001df  00000000  00000000  00007320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000210  00000000  00000000  000074ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001f  00000000  00000000  0000770f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__vector_35>
  90:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_45>
  b8:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e2 e1       	ldi	r30, 0x12	; 18

000000fc <.Loc.4>:
  fc:	fe e0       	ldi	r31, 0x0E	; 14

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	ac 33       	cpi	r26, 0x3C	; 60

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 91 02 	call	0x522	; 0x522 <main>
 122:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 12a:	ea e0       	ldi	r30, 0x0A	; 10
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
 130:	80 68       	ori	r24, 0x80	; 128
 132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 134:	eb e0       	ldi	r30, 0x0B	; 11
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z

0000013a <.Loc.4>:
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24

0000013e <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 13e:	80 81       	ld	r24, Z

00000140 <.Loc.6>:
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24

00000144 <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 144:	80 81       	ld	r24, Z
 146:	8f 77       	andi	r24, 0x7F	; 127
 148:	80 83       	st	Z, r24

0000014a <.Loc.9>:
}
 14a:	08 95       	ret

0000014c <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 14c:	ea e0       	ldi	r30, 0x0A	; 10
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	80 81       	ld	r24, Z

00000152 <.Loc.12>:
 152:	80 68       	ori	r24, 0x80	; 128
 154:	80 83       	st	Z, r24

00000156 <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 156:	eb e0       	ldi	r30, 0x0B	; 11
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	80 81       	ld	r24, Z
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	80 83       	st	Z, r24

00000160 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 160:	80 81       	ld	r24, Z

00000162 <.Loc.16>:
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24

00000166 <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 166:	80 81       	ld	r24, Z

00000168 <.Loc.18>:
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24

0000016c <.Loc.19>:
}
 16c:	08 95       	ret

0000016e <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 16e:	ea e0       	ldi	r30, 0x0A	; 10
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	90 81       	ld	r25, Z

00000174 <.Loc.22>:
 174:	90 68       	ori	r25, 0x80	; 128
 176:	90 83       	st	Z, r25

00000178 <.Loc.23>:
 178:	28 e0       	ldi	r18, 0x08	; 8
 17a:	30 e0       	ldi	r19, 0x00	; 0

0000017c <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 17c:	eb e0       	ldi	r30, 0x0B	; 11
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	0c c0       	rjmp	.+24     	; 0x19a <.L6>

00000182 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 182:	90 81       	ld	r25, Z
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	90 83       	st	Z, r25

00000188 <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 188:	90 81       	ld	r25, Z

0000018a <.Loc.31>:
 18a:	90 64       	ori	r25, 0x40	; 64
 18c:	90 83       	st	Z, r25

0000018e <.Loc.32>:
        data >>= 1;
 18e:	86 95       	lsr	r24

00000190 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 190:	21 50       	subi	r18, 0x01	; 1
 192:	31 09       	sbc	r19, r1

00000194 <.Loc.36>:
 194:	21 15       	cp	r18, r1
 196:	31 05       	cpc	r19, r1
 198:	49 f0       	breq	.+18     	; 0x1ac <.L8>

0000019a <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 19a:	90 81       	ld	r25, Z
 19c:	9f 7b       	andi	r25, 0xBF	; 191
 19e:	90 83       	st	Z, r25

000001a0 <.Loc.39>:
        if(data & 0x01){
 1a0:	80 ff       	sbrs	r24, 0
 1a2:	ef cf       	rjmp	.-34     	; 0x182 <.L4>

000001a4 <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 1a4:	90 81       	ld	r25, Z

000001a6 <.Loc.42>:
 1a6:	90 68       	ori	r25, 0x80	; 128
 1a8:	90 83       	st	Z, r25
 1aa:	ee cf       	rjmp	.-36     	; 0x188 <.L5>

000001ac <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 1ac:	eb e0       	ldi	r30, 0x0B	; 11
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	80 81       	ld	r24, Z

000001b2 <.Loc.46>:
 1b2:	8f 7b       	andi	r24, 0xBF	; 191
 1b4:	80 83       	st	Z, r24

000001b6 <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 1b6:	80 81       	ld	r24, Z

000001b8 <.Loc.48>:
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24

000001bc <.Loc.49>:
}
 1bc:	08 95       	ret

000001be <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24

000001c2 <.Loc.52>:
    display_start();
 1c2:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

000001c6 <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 1c6:	8c 2f       	mov	r24, r28
 1c8:	87 70       	andi	r24, 0x07	; 7
 1ca:	88 68       	ori	r24, 0x88	; 136
 1cc:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

000001d0 <.LVL9>:
    display_stop();
 1d0:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

000001d4 <.LVL10>:
}
 1d4:	cf 91       	pop	r28

000001d6 <.Loc.56>:
 1d6:	08 95       	ret

000001d8 <display_number>:

// Display 4 digit integer
void display_number(int number){
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	d8 2f       	mov	r29, r24
 1e4:	c9 2f       	mov	r28, r25

000001e6 <.Loc.59>:
    display_start();
 1e6:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

000001ea <.LVL13>:
    display_sendbyte(0x40);
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

000001f0 <.LVL14>:
    display_stop();
 1f0:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

000001f4 <.LVL15>:
 1f4:	13 ec       	ldi	r17, 0xC3	; 195

000001f6 <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 1f6:	0f 2e       	mov	r0, r31
 1f8:	fa e0       	ldi	r31, 0x0A	; 10
 1fa:	ef 2e       	mov	r14, r31
 1fc:	f1 2c       	mov	r15, r1
 1fe:	f0 2d       	mov	r31, r0

00000200 <.L11>:
        display_start();
 200:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

00000204 <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 204:	81 2f       	mov	r24, r17
 206:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

0000020a <.LVL18>:
        display_sendbyte(digits[number%10]);
 20a:	8d 2f       	mov	r24, r29
 20c:	9c 2f       	mov	r25, r28
 20e:	b7 01       	movw	r22, r14
 210:	0e 94 d0 06 	call	0xda0	; 0xda0 <__divmodhi4>
 214:	d6 2f       	mov	r29, r22

00000216 <.Loc.71>:
 216:	c7 2f       	mov	r28, r23

00000218 <.Loc.72>:
 218:	fc 01       	movw	r30, r24
 21a:	eb 5e       	subi	r30, 0xEB	; 235
 21c:	fd 4f       	sbci	r31, 0xFD	; 253

0000021e <.Loc.73>:
 21e:	80 81       	ld	r24, Z
 220:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

00000224 <.LVL20>:
        number /= 10;
        display_stop();
 224:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

00000228 <.LVL21>:
    for (int i = 0; i < 4; i++) {
 228:	11 50       	subi	r17, 0x01	; 1
 22a:	1f 3b       	cpi	r17, 0xBF	; 191
 22c:	49 f7       	brne	.-46     	; 0x200 <.L11>

0000022e <.Loc.78>:
    }
}
 22e:	df 91       	pop	r29

00000230 <.Loc.79>:
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	c8 2f       	mov	r28, r24
 242:	d9 2f       	mov	r29, r25
 244:	16 2f       	mov	r17, r22

00000246 <.Loc.82>:
    display_start();
 246:	0e 94 95 00 	call	0x12a	; 0x12a <display_start>

0000024a <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	81 0f       	add	r24, r17
 24e:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

00000252 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	dd 4f       	sbci	r29, 0xFD	; 253

00000256 <.Loc.86>:
 256:	88 81       	ld	r24, Y
 258:	0e 94 b7 00 	call	0x16e	; 0x16e <display_sendbyte>

0000025c <.LVL26>:
    display_stop();
 25c:	0e 94 a6 00 	call	0x14c	; 0x14c <display_stop>

00000260 <.LVL27>:
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17

00000266 <.Loc.89>:
 266:	08 95       	ret

00000268 <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 268:	ea e0       	ldi	r30, 0x0A	; 10
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	80 81       	ld	r24, Z

0000026e <.Loc.92>:
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	80 83       	st	Z, r24

00000272 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 272:	80 81       	ld	r24, Z

00000274 <.Loc.94>:
 274:	80 64       	ori	r24, 0x40	; 64
 276:	80 83       	st	Z, r24

00000278 <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 278:	eb e0       	ldi	r30, 0x0B	; 11
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	80 81       	ld	r24, Z

0000027e <.Loc.96>:
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	80 83       	st	Z, r24

00000282 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 282:	80 81       	ld	r24, Z

00000284 <.Loc.98>:
 284:	80 64       	ori	r24, 0x40	; 64
 286:	80 83       	st	Z, r24

00000288 <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 288:	87 e0       	ldi	r24, 0x07	; 7
 28a:	0e 94 df 00 	call	0x1be	; 0x1be <display_brightness>

0000028e <.LVL29>:
}
 28e:	08 95       	ret

00000290 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	83 e1       	ldi	r24, 0x13	; 19
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000029a <.LVL30>:
    display_letter(3, 1);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002a4 <.LVL31>:
    display_letter(6, 2);
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002ae <.LVL32>:
    display_letter(7, 3);
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002b8 <.LVL33>:
}
 2b8:	08 95       	ret

000002ba <display_fol>:

void display_fol(void){
    display_letter(19, 0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	83 e1       	ldi	r24, 0x13	; 19
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002c4 <.LVL34>:
    display_letter(6, 1);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002ce <.LVL35>:
    display_letter(13, 2);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002d8 <.LVL36>:
    display_letter(11, 3);
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	8b e0       	ldi	r24, 0x0B	; 11
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002e2 <.LVL37>:
}
 2e2:	08 95       	ret

000002e4 <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	83 e1       	ldi	r24, 0x13	; 19
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002ee <.LVL38>:
    display_letter(3, 1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000002f8 <.LVL39>:
    display_letter(12, 2);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000302 <.LVL40>:
    display_letter(17, 3);
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	81 e1       	ldi	r24, 0x11	; 17
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000030c <.LVL41>:
}
 30c:	08 95       	ret

0000030e <display_turn>:

void display_turn(void){
    display_letter(17, 0);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	81 e1       	ldi	r24, 0x11	; 17
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000318 <.LVL42>:
    display_letter(18, 1);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	82 e1       	ldi	r24, 0x12	; 18
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000322 <.LVL43>:
    display_letter(15, 2);
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000032c <.LVL44>:
    display_letter(12, 3);
 32c:	63 e0       	ldi	r22, 0x03	; 3
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000336 <.LVL45>:
}
 336:	08 95       	ret

00000338 <display_dist>:

void display_dist(void){
    display_letter(4, 0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000342 <.LVL46>:
    display_letter(9, 1);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	89 e0       	ldi	r24, 0x09	; 9
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000034c <.LVL47>:
    display_letter(16, 2);
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000356 <.LVL48>:
    display_letter(17, 3);
 356:	63 e0       	ldi	r22, 0x03	; 3
 358:	81 e1       	ldi	r24, 0x11	; 17
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000360 <.LVL49>:
}
 360:	08 95       	ret

00000362 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	83 e1       	ldi	r24, 0x13	; 19
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000036c <.LVL50>:
    display_letter(14, 1);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	8e e0       	ldi	r24, 0x0E	; 14
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000376 <.LVL51>:
    display_letter(1, 2);
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000380 <.LVL52>:
    display_letter(3, 3);
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000038a <.LVL53>:
}
 38a:	08 95       	ret

0000038c <display_mode>:
    if(mode){
 38c:	88 23       	and	r24, r24
 38e:	19 f0       	breq	.+6      	; 0x396 <.L22>

00000390 <.Loc.140>:
        display_fol();
 390:	0e 94 5d 01 	call	0x2ba	; 0x2ba <display_fol>

00000394 <.LVL55>:
 394:	08 95       	ret

00000396 <.L22>:
        display_pac();
 396:	0e 94 b1 01 	call	0x362	; 0x362 <display_pac>

0000039a <.LVL57>:
}
 39a:	08 95       	ret

0000039c <display_left>:

void display_left(void){
    display_letter(11, 0);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8b e0       	ldi	r24, 0x0B	; 11
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003a6 <.LVL58>:
    display_letter(5, 1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003b0 <.LVL59>:
    display_letter(6, 2);
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003ba <.LVL60>:
    display_letter(17, 3);
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e1       	ldi	r24, 0x11	; 17
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003c4 <.LVL61>:
}
 3c4:	08 95       	ret

000003c6 <display_rght>:

void display_rght(void){
    display_letter(15, 0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003d0 <.LVL62>:
    display_letter(7, 1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	87 e0       	ldi	r24, 0x07	; 7
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003da <.LVL63>:
    display_letter(8, 2);
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	88 e0       	ldi	r24, 0x08	; 8
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003e4 <.LVL64>:
    display_letter(17, 3);
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e1       	ldi	r24, 0x11	; 17
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000003ee <.LVL65>:
}
 3ee:	08 95       	ret

000003f0 <display_direction>:
    if(dir){
 3f0:	88 23       	and	r24, r24
 3f2:	19 f0       	breq	.+6      	; 0x3fa <.L27>

000003f4 <.Loc.159>:
        display_rght();
 3f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <display_rght>

000003f8 <.LVL67>:
 3f8:	08 95       	ret

000003fa <.L27>:
        display_left();
 3fa:	0e 94 ce 01 	call	0x39c	; 0x39c <display_left>

000003fe <.LVL69>:
}
 3fe:	08 95       	ret

00000400 <display_go>:

void display_go(void){
    display_letter(19, 0);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	83 e1       	ldi	r24, 0x13	; 19
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000040a <.LVL70>:
    display_letter(19, 1);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	83 e1       	ldi	r24, 0x13	; 19
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000414 <.LVL71>:
    display_letter(7, 2);
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	87 e0       	ldi	r24, 0x07	; 7
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000041e <.LVL72>:
    display_letter(13, 3);
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000428 <.LVL73>:
}
 428:	08 95       	ret

0000042a <display_end>:

void display_end(void){
    display_letter(19, 0);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	83 e1       	ldi	r24, 0x13	; 19
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000434 <.LVL74>:
    display_letter(5, 1);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	85 e0       	ldi	r24, 0x05	; 5
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000043e <.LVL75>:
    display_letter(12, 2);
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000448 <.LVL76>:
    display_letter(4, 3);
 448:	63 e0       	ldi	r22, 0x03	; 3
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000452 <.LVL77>:
}
 452:	08 95       	ret

00000454 <display_srch>:

void display_srch(void){
    display_letter(16, 0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 e1       	ldi	r24, 0x10	; 16
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000045e <.LVL78>:
    display_letter(15, 1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	8f e0       	ldi	r24, 0x0F	; 15
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000468 <.LVL79>:
    display_letter(3, 2);
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000472 <.LVL80>:
    display_letter(8, 3);
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000047c <.LVL81>:
}
 47c:	08 95       	ret

0000047e <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	80 e1       	ldi	r24, 0x10	; 16
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000488 <.LVL82>:
    display_letter(17, 1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	81 e1       	ldi	r24, 0x11	; 17
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

00000492 <.LVL83>:
    display_letter(13, 2);
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	8d e0       	ldi	r24, 0x0D	; 13
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

0000049c <.LVL84>:
    display_letter(14, 3);
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 1d 01 	call	0x23a	; 0x23a <display_letter>

000004a6 <.LVL85>:
}
 4a6:	08 95       	ret

000004a8 <interpreter>:
Signaal omhoog (vanuit AGV naar Module)
0x01: Klaar met opdracht, einde pad of einde bocht geen parameters nodig.
*/

void interpreter(){
    if(serialOntvangen[0]==0x01){    //commmando bewegen
 4a8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <serialOntvangen>
 4ac:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <serialOntvangen+0x1>
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <.L7>

000004b4 <.L2>:
            if(serialOntvangen[1]<0x7F)
                achteruit();
            if(serialOntvangen[1]==0x7F)
                stop();
    }
    if(serialOntvangen[0]==0x02){
 4b4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <serialOntvangen>
 4b8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <serialOntvangen+0x1>
 4bc:	02 97       	sbiw	r24, 0x02	; 2
 4be:	f9 f0       	breq	.+62     	; 0x4fe <.L8>

000004c0 <.L1>:
        if(serialOntvangen[1]==0x01)
            linksom();
        if(serialOntvangen[1]==0x02)
            rechtsom();
    }
}
 4c0:	08 95       	ret

000004c2 <.L7>:
            if(serialOntvangen[1]>0x7F)
 4c2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <serialOntvangen+0x2>
 4c6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <serialOntvangen+0x3>
 4ca:	80 38       	cpi	r24, 0x80	; 128
 4cc:	91 05       	cpc	r25, r1
 4ce:	88 f4       	brcc	.+34     	; 0x4f2 <.L9>

000004d0 <.L3>:
            if(serialOntvangen[1]<0x7F)
 4d0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <serialOntvangen+0x2>
 4d4:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <serialOntvangen+0x3>
 4d8:	8f 37       	cpi	r24, 0x7F	; 127
 4da:	91 05       	cpc	r25, r1
 4dc:	68 f0       	brcs	.+26     	; 0x4f8 <.L10>

000004de <.L4>:
            if(serialOntvangen[1]==0x7F)
 4de:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <serialOntvangen+0x2>
 4e2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <serialOntvangen+0x3>
 4e6:	8f 37       	cpi	r24, 0x7F	; 127
 4e8:	91 05       	cpc	r25, r1
 4ea:	21 f7       	brne	.-56     	; 0x4b4 <.L2>

000004ec <.Loc.12>:
                stop();
 4ec:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000004f0 <.LVL0>:
 4f0:	e1 cf       	rjmp	.-62     	; 0x4b4 <.L2>

000004f2 <.L9>:
                rechtdoor();
 4f2:	0e 94 c8 02 	call	0x590	; 0x590 <rechtdoor>

000004f6 <.LVL1>:
 4f6:	ec cf       	rjmp	.-40     	; 0x4d0 <.L3>

000004f8 <.L10>:
                achteruit();
 4f8:	0e 94 1e 03 	call	0x63c	; 0x63c <achteruit>

000004fc <.LVL2>:
 4fc:	f0 cf       	rjmp	.-32     	; 0x4de <.L4>

000004fe <.L8>:
        if(serialOntvangen[1]==0x01)
 4fe:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <serialOntvangen+0x2>
 502:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <serialOntvangen+0x3>
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	49 f0       	breq	.+18     	; 0x51c <.L11>

0000050a <.L6>:
        if(serialOntvangen[1]==0x02)
 50a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <serialOntvangen+0x2>
 50e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <serialOntvangen+0x3>
 512:	02 97       	sbiw	r24, 0x02	; 2
 514:	a9 f6       	brne	.-86     	; 0x4c0 <.L1>

00000516 <.Loc.19>:
            rechtsom();
 516:	0e 94 e7 03 	call	0x7ce	; 0x7ce <rechtsom>

0000051a <.LVL3>:
}
 51a:	d2 cf       	rjmp	.-92     	; 0x4c0 <.L1>

0000051c <.L11>:
            linksom();
 51c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <linksom>

00000520 <.LVL4>:
 520:	f4 cf       	rjmp	.-24     	; 0x50a <.L6>

00000522 <main>:
#include "main.h"

int main(void)
{
    //initNoodstop();
    initStepper();
 522:	0e 94 cb 04 	call	0x996	; 0x996 <initStepper>

00000526 <.LVL0>:
    init_ultrasoon();
 526:	0e 94 3c 06 	call	0xc78	; 0xc78 <init_ultrasoon>

0000052a <.LVL1>:
    initUsart();
 52a:	0e 94 5d 05 	call	0xaba	; 0xaba <initUsart>

0000052e <.LVL2>:
    flushUsart2Buffer();
 52e:	0e 94 a2 05 	call	0xb44	; 0xb44 <flushUsart2Buffer>

00000532 <.LVL3>:
    sei();
 532:	78 94       	sei

00000534 <.L2>:


    while(1);    //everything is automated using interrupts so no need for a main loop
 534:	ff cf       	rjmp	.-2      	; 0x534 <.L2>

00000536 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 536:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 53a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>
 53e:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_right>
 542:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_right+0x1>
 546:	82 0f       	add	r24, r18
 548:	93 1f       	adc	r25, r19

0000054a <.Loc.3>:
 54a:	0d 96       	adiw	r24, 0x0d	; 13

0000054c <.Loc.4>:
 54c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <padbreedte+0x1>
 550:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <padbreedte>

00000554 <.Loc.5>:
}
 554:	08 95       	ret

00000556 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(1150);
 556:	8e e7       	ldi	r24, 0x7E	; 126
 558:	94 e0       	ldi	r25, 0x04	; 4
 55a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

0000055e <.LVL0>:
    speedStepperRight(1150);
 55e:	8e e7       	ldi	r24, 0x7E	; 126
 560:	94 e0       	ldi	r25, 0x04	; 4
 562:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

00000566 <.LVL1>:
}
 566:	08 95       	ret

00000568 <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

00000570 <.LVL2>:
    speedStepperRight(0);
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

00000578 <.LVL3>:
}
 578:	08 95       	ret

0000057a <ramping>:

int ramping(int originalValue , int value){
 57a:	26 2f       	mov	r18, r22
 57c:	37 2f       	mov	r19, r23

0000057e <.Loc.16>:
    if(originalValue > value){
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	0c f4       	brge	.+2      	; 0x586 <.L5>

00000584 <.Loc.18>:
            originalValue --;
 584:	01 97       	sbiw	r24, 0x01	; 1

00000586 <.L5>:
    }
    if(originalValue < value){
 586:	82 17       	cp	r24, r18
 588:	93 07       	cpc	r25, r19
 58a:	0c f4       	brge	.+2      	; 0x58e <.L6>

0000058c <.Loc.22>:
            originalValue ++;
 58c:	01 96       	adiw	r24, 0x01	; 1

0000058e <.L6>:
    }
    return originalValue;
}
 58e:	08 95       	ret

00000590 <rechtdoor>:

void rechtdoor(void){
    stepperForward();
 590:	0e 94 56 05 	call	0xaac	; 0xaac <stepperForward>

00000594 <.LVL7>:
    while((distance_right<30)||(distance_left<30)){ //while agv binnen pad
 594:	21 c0       	rjmp	.+66     	; 0x5d8 <.L8>

00000596 <.L12>:
        if (distance_right==distance_left) {
 596:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_right>
 59a:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_right+0x1>
 59e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 5a2:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>

000005a6 <.Loc.32>:
 5a6:	28 17       	cp	r18, r24
 5a8:	39 07       	cpc	r19, r25
 5aa:	69 f1       	breq	.+90     	; 0x606 <.L13>

000005ac <.Loc.33>:
            speedStepperLeft(1150);
            speedStepperRight(1150);
        }
        else{
            if (distance_right > distance_left){
 5ac:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_right>
 5b0:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_right+0x1>
 5b4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 5b8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>

000005bc <.Loc.35>:
 5bc:	82 17       	cp	r24, r18
 5be:	93 07       	cpc	r25, r19
 5c0:	5c f1       	brlt	.+86     	; 0x618 <.L14>

000005c2 <.L11>:
                speedStepperLeft(ramping(1650, 1150));
                speedStepperRight(ramping(1150, 1650));
            }
            if(distance_left > distance_right){
 5c2:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <distance_left>
 5c6:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <distance_left+0x1>
 5ca:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_right>
 5ce:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_right+0x1>

000005d2 <.Loc.38>:
 5d2:	82 17       	cp	r24, r18
 5d4:	93 07       	cpc	r25, r19
 5d6:	4c f1       	brlt	.+82     	; 0x62a <.L15>

000005d8 <.L8>:
    while((distance_right<30)||(distance_left<30)){ //while agv binnen pad
 5d8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_right>
 5dc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_right+0x1>

000005e0 <.Loc.41>:
 5e0:	4e 97       	sbiw	r24, 0x1e	; 30
 5e2:	cc f2       	brlt	.-78     	; 0x596 <.L12>

000005e4 <.Loc.42>:
 5e4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 5e8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>

000005ec <.Loc.43>:
 5ec:	4e 97       	sbiw	r24, 0x1e	; 30
 5ee:	9c f2       	brlt	.-90     	; 0x596 <.L12>

000005f0 <.Loc.44>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 71 05 	call	0xae2	; 0xae2 <sendCommand>

00000604 <.LVL8>:
}
 604:	08 95       	ret

00000606 <.L13>:
            speedStepperLeft(1150);
 606:	8e e7       	ldi	r24, 0x7E	; 126
 608:	94 e0       	ldi	r25, 0x04	; 4
 60a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

0000060e <.LVL9>:
            speedStepperRight(1150);
 60e:	8e e7       	ldi	r24, 0x7E	; 126
 610:	94 e0       	ldi	r25, 0x04	; 4
 612:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

00000616 <.LVL10>:
 616:	e0 cf       	rjmp	.-64     	; 0x5d8 <.L8>

00000618 <.L14>:
                speedStepperLeft(ramping(1650, 1150));
 618:	81 e7       	ldi	r24, 0x71	; 113
 61a:	96 e0       	ldi	r25, 0x06	; 6
 61c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

00000620 <.LVL11>:
                speedStepperRight(ramping(1150, 1650));
 620:	8f e7       	ldi	r24, 0x7F	; 127
 622:	94 e0       	ldi	r25, 0x04	; 4
 624:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

00000628 <.LVL12>:
 628:	cc cf       	rjmp	.-104    	; 0x5c2 <.L11>

0000062a <.L15>:
                speedStepperRight(ramping(1650, 1150));
 62a:	81 e7       	ldi	r24, 0x71	; 113
 62c:	96 e0       	ldi	r25, 0x06	; 6
 62e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

00000632 <.LVL13>:
                speedStepperLeft(ramping(1150, 1650));
 632:	8f e7       	ldi	r24, 0x7F	; 127
 634:	94 e0       	ldi	r25, 0x04	; 4
 636:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

0000063a <.LVL14>:
 63a:	ce cf       	rjmp	.-100    	; 0x5d8 <.L8>

0000063c <achteruit>:

void achteruit(void){
    stepperBackward();
 63c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <stepperBackward>

00000640 <.LVL15>:
    while((distance_right<20)||(distance_left<20)){ //while agv binnen pad
 640:	21 c0       	rjmp	.+66     	; 0x684 <.L17>

00000642 <.L21>:
        if (distance_right==distance_left) {
 642:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_right>
 646:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_right+0x1>
 64a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 64e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>

00000652 <.Loc.58>:
 652:	28 17       	cp	r18, r24
 654:	39 07       	cpc	r19, r25
 656:	69 f1       	breq	.+90     	; 0x6b2 <.L22>

00000658 <.Loc.59>:
            speedStepperLeft(1150);
            speedStepperRight(1150);
        }
        else{
            if (distance_right < distance_left){
 658:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_right>
 65c:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_right+0x1>
 660:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 664:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>

00000668 <.Loc.61>:
 668:	28 17       	cp	r18, r24
 66a:	39 07       	cpc	r19, r25
 66c:	5c f1       	brlt	.+86     	; 0x6c4 <.L23>

0000066e <.L20>:
                speedStepperLeft(ramping(1650, 1150));
                speedStepperRight(ramping(1150, 1650));
            }
            if(distance_left < distance_right){
 66e:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <distance_left>
 672:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <distance_left+0x1>
 676:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_right>
 67a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_right+0x1>

0000067e <.Loc.64>:
 67e:	28 17       	cp	r18, r24
 680:	39 07       	cpc	r19, r25
 682:	4c f1       	brlt	.+82     	; 0x6d6 <.L24>

00000684 <.L17>:
    while((distance_right<20)||(distance_left<20)){ //while agv binnen pad
 684:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_right>
 688:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_right+0x1>

0000068c <.Loc.67>:
 68c:	44 97       	sbiw	r24, 0x14	; 20
 68e:	cc f2       	brlt	.-78     	; 0x642 <.L21>

00000690 <.Loc.68>:
 690:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 694:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>

00000698 <.Loc.69>:
 698:	44 97       	sbiw	r24, 0x14	; 20
 69a:	9c f2       	brlt	.-90     	; 0x642 <.L21>

0000069c <.Loc.70>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 71 05 	call	0xae2	; 0xae2 <sendCommand>

000006b0 <.LVL16>:
}
 6b0:	08 95       	ret

000006b2 <.L22>:
            speedStepperLeft(1150);
 6b2:	8e e7       	ldi	r24, 0x7E	; 126
 6b4:	94 e0       	ldi	r25, 0x04	; 4
 6b6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

000006ba <.LVL17>:
            speedStepperRight(1150);
 6ba:	8e e7       	ldi	r24, 0x7E	; 126
 6bc:	94 e0       	ldi	r25, 0x04	; 4
 6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

000006c2 <.LVL18>:
 6c2:	e0 cf       	rjmp	.-64     	; 0x684 <.L17>

000006c4 <.L23>:
                speedStepperLeft(ramping(1650, 1150));
 6c4:	81 e7       	ldi	r24, 0x71	; 113
 6c6:	96 e0       	ldi	r25, 0x06	; 6
 6c8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

000006cc <.LVL19>:
                speedStepperRight(ramping(1150, 1650));
 6cc:	8f e7       	ldi	r24, 0x7F	; 127
 6ce:	94 e0       	ldi	r25, 0x04	; 4
 6d0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

000006d4 <.LVL20>:
 6d4:	cc cf       	rjmp	.-104    	; 0x66e <.L20>

000006d6 <.L24>:
                speedStepperRight(ramping(1650, 1150));
 6d6:	81 e7       	ldi	r24, 0x71	; 113
 6d8:	96 e0       	ldi	r25, 0x06	; 6
 6da:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <speedStepperRight>

000006de <.LVL21>:
                speedStepperLeft(ramping(1150, 1650));
 6de:	8f e7       	ldi	r24, 0x7F	; 127
 6e0:	94 e0       	ldi	r25, 0x04	; 4
 6e2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <speedStepperLeft>

000006e6 <.LVL22>:
 6e6:	ce cf       	rjmp	.-100    	; 0x684 <.L17>

000006e8 <linksom>:

void linksom(void){
    enableStepCnt();
 6e8:	0e 94 39 05 	call	0xa72	; 0xa72 <enableStepCnt>

000006ec <.LVL23>:
    clearStepCnt();
 6ec:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

000006f0 <.LVL24>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 6f0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 6f4:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 6f8:	84 3d       	cpi	r24, 0xD4	; 212
 6fa:	97 41       	sbci	r25, 0x17	; 23
 6fc:	48 f4       	brcc	.+18     	; 0x710 <.L26>

000006fe <.L27>:
        vooruit();
 6fe:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000702 <.LVL25>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 702:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 706:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 70a:	84 3d       	cpi	r24, 0xD4	; 212
 70c:	97 41       	sbci	r25, 0x17	; 23
 70e:	b8 f3       	brcs	.-18     	; 0x6fe <.L27>

00000710 <.L26>:
    }
    clearStepCnt();
 710:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

00000714 <.LVL26>:
    toggleStepperDirectionRight();
 714:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <toggleStepperDirectionRight>

00000718 <.LVL27>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 718:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 71c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 720:	8e 32       	cpi	r24, 0x2E	; 46
 722:	99 40       	sbci	r25, 0x09	; 9
 724:	48 f4       	brcc	.+18     	; 0x738 <.L28>

00000726 <.L29>:
        vooruit();
 726:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

0000072a <.LVL28>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 72a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 72e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 732:	8e 32       	cpi	r24, 0x2E	; 46
 734:	99 40       	sbci	r25, 0x09	; 9
 736:	b8 f3       	brcs	.-18     	; 0x726 <.L29>

00000738 <.L28>:
    }
    toggleStepperDirectionRight();
 738:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <toggleStepperDirectionRight>

0000073c <.LVL29>:
    clearStepCnt();
 73c:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

00000740 <.LVL30>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 740:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 744:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 748:	8c 37       	cpi	r24, 0x7C	; 124
 74a:	95 41       	sbci	r25, 0x15	; 21
 74c:	48 f4       	brcc	.+18     	; 0x760 <.L30>

0000074e <.L31>:
        vooruit();
 74e:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000752 <.LVL31>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 752:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 756:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 75a:	8c 37       	cpi	r24, 0x7C	; 124
 75c:	95 41       	sbci	r25, 0x15	; 21
 75e:	b8 f3       	brcs	.-18     	; 0x74e <.L31>

00000760 <.L30>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 760:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <toggleStepperDirectionRight>

00000764 <.LVL32>:
    clearStepCnt();
 764:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

00000768 <.LVL33>:
    while(stepCounterLeft<(2350)){
 768:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 76c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 770:	8e 32       	cpi	r24, 0x2E	; 46
 772:	99 40       	sbci	r25, 0x09	; 9
 774:	48 f4       	brcc	.+18     	; 0x788 <.L32>

00000776 <.L33>:
        vooruit();
 776:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

0000077a <.LVL34>:
    while(stepCounterLeft<(2350)){
 77a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 77e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 782:	8e 32       	cpi	r24, 0x2E	; 46
 784:	99 40       	sbci	r25, 0x09	; 9
 786:	b8 f3       	brcs	.-18     	; 0x776 <.L33>

00000788 <.L32>:
    }
    toggleStepperDirectionRight();
 788:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <toggleStepperDirectionRight>

0000078c <.LVL35>:
    clearStepCnt();
 78c:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

00000790 <.LVL36>:
    vooruit();
 790:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000794 <.LVL37>:
    while(distance_left>15){           //agv is in het volgende pad
 794:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 798:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>
 79c:	40 97       	sbiw	r24, 0x10	; 16
 79e:	44 f0       	brlt	.+16     	; 0x7b0 <.L34>

000007a0 <.L35>:
        vooruit();
 7a0:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000007a4 <.LVL38>:
    while(distance_left>15){           //agv is in het volgende pad
 7a4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 7a8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>
 7ac:	40 97       	sbiw	r24, 0x10	; 16
 7ae:	c4 f7       	brge	.-16     	; 0x7a0 <.L35>

000007b0 <.L34>:
    }
    stop();
 7b0:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000007b4 <.LVL39>:
    disableStepCnt();
 7b4:	0e 94 44 05 	call	0xa88	; 0xa88 <disableStepCnt>

000007b8 <.LVL40>:
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 7b8:	20 e0       	ldi	r18, 0x00	; 0
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 71 05 	call	0xae2	; 0xae2 <sendCommand>

000007cc <.LVL41>:
}
 7cc:	08 95       	ret

000007ce <rechtsom>:

void rechtsom(void){
    enableStepCnt();
 7ce:	0e 94 39 05 	call	0xa72	; 0xa72 <enableStepCnt>

000007d2 <.LVL42>:
    clearStepCnt();
 7d2:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

000007d6 <.LVL43>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 7d6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 7da:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 7de:	84 3d       	cpi	r24, 0xD4	; 212
 7e0:	97 41       	sbci	r25, 0x17	; 23
 7e2:	48 f4       	brcc	.+18     	; 0x7f6 <.L42>

000007e4 <.L43>:
        vooruit();
 7e4:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

000007e8 <.LVL44>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 7e8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 7ec:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 7f0:	84 3d       	cpi	r24, 0xD4	; 212
 7f2:	97 41       	sbci	r25, 0x17	; 23
 7f4:	b8 f3       	brcs	.-18     	; 0x7e4 <.L43>

000007f6 <.L42>:
    }
    clearStepCnt();
 7f6:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

000007fa <.LVL45>:
    toggleStepperDirectionLeft();
 7fa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <toggleStepperDirectionLeft>

000007fe <.LVL46>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 7fe:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 802:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 806:	8e 32       	cpi	r24, 0x2E	; 46
 808:	99 40       	sbci	r25, 0x09	; 9
 80a:	48 f4       	brcc	.+18     	; 0x81e <.L44>

0000080c <.L45>:
        vooruit();
 80c:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000810 <.LVL47>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 810:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 814:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 818:	8e 32       	cpi	r24, 0x2E	; 46
 81a:	99 40       	sbci	r25, 0x09	; 9
 81c:	b8 f3       	brcs	.-18     	; 0x80c <.L45>

0000081e <.L44>:
    }
    toggleStepperDirectionLeft();
 81e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <toggleStepperDirectionLeft>

00000822 <.LVL48>:
    clearStepCnt();
 822:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

00000826 <.LVL49>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 826:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 82a:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 82e:	8c 37       	cpi	r24, 0x7C	; 124
 830:	95 41       	sbci	r25, 0x15	; 21
 832:	48 f4       	brcc	.+18     	; 0x846 <.L46>

00000834 <.L47>:
        vooruit();
 834:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000838 <.LVL50>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 838:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 83c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 840:	8c 37       	cpi	r24, 0x7C	; 124
 842:	95 41       	sbci	r25, 0x15	; 21
 844:	b8 f3       	brcs	.-18     	; 0x834 <.L47>

00000846 <.L46>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 846:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <toggleStepperDirectionLeft>

0000084a <.LVL51>:
    clearStepCnt();
 84a:	0e 94 30 05 	call	0xa60	; 0xa60 <clearStepCnt>

0000084e <.LVL52>:
    while(stepCounterLeft<(2350)){
 84e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 852:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 856:	8e 32       	cpi	r24, 0x2E	; 46
 858:	99 40       	sbci	r25, 0x09	; 9
 85a:	48 f4       	brcc	.+18     	; 0x86e <.L48>

0000085c <.L49>:
        vooruit();
 85c:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

00000860 <.LVL53>:
    while(stepCounterLeft<(2350)){
 860:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 864:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 868:	8e 32       	cpi	r24, 0x2E	; 46
 86a:	99 40       	sbci	r25, 0x09	; 9
 86c:	b8 f3       	brcs	.-18     	; 0x85c <.L49>

0000086e <.L48>:
    }
    toggleStepperDirectionLeft();
 86e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <toggleStepperDirectionLeft>

00000872 <.LVL54>:
    disableStepCnt();
 872:	0e 94 44 05 	call	0xa88	; 0xa88 <disableStepCnt>

00000876 <.LVL55>:
    vooruit();
 876:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

0000087a <.LVL56>:
    while(distance_left>15){           //agv is in het volgende pad
 87a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 87e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>
 882:	40 97       	sbiw	r24, 0x10	; 16
 884:	44 f0       	brlt	.+16     	; 0x896 <.L50>

00000886 <.L51>:
        vooruit();
 886:	0e 94 ab 02 	call	0x556	; 0x556 <vooruit>

0000088a <.LVL57>:
    while(distance_left>15){           //agv is in het volgende pad
 88a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <distance_left>
 88e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <distance_left+0x1>
 892:	40 97       	sbiw	r24, 0x10	; 16
 894:	c4 f7       	brge	.-16     	; 0x886 <.L51>

00000896 <.L50>:
    }
    stop();
 896:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

0000089a <.LVL58>:
    sendCommand(0x01,0x00,0x00,0x00);   //send klaar met opdracht
 89a:	20 e0       	ldi	r18, 0x00	; 0
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 71 05 	call	0xae2	; 0xae2 <sendCommand>

000008ae <.LVL59>:
}
 8ae:	08 95       	ret

000008b0 <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 8b0:	50 98       	cbi	0x0a, 0	; 10

000008b2 <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 8b2:	58 9a       	sbi	0x0b, 0	; 11

000008b4 <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 8b4:	e8 9a       	sbi	0x1d, 0	; 29

000008b6 <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 8b6:	e9 e6       	ldi	r30, 0x69	; 105
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z

000008bc <.Loc.8>:
 8bc:	81 60       	ori	r24, 0x01	; 1
 8be:	80 83       	st	Z, r24

000008c0 <.Loc.9>:
    sei();
 8c0:	78 94       	sei

000008c2 <.Loc.10>:
}
 8c2:	08 95       	ret

000008c4 <__vector_1>:

ISR(INT0_vect){
 8c4:	1f 92       	push	r1
 8c6:	0f 92       	push	r0
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	0f 92       	push	r0
 8cc:	11 24       	eor	r1, r1
 8ce:	0b b6       	in	r0, 0x3b	; 59
 8d0:	0f 92       	push	r0
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31

000008ea <.L5>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 8ea:	48 9b       	sbis	0x09, 0	; 9
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <.L3>

000008ee <.L4>:
            stop();
 8ee:	0e 94 b4 02 	call	0x568	; 0x568 <stop>

000008f2 <.LVL0>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 8f2:	48 99       	sbic	0x09, 0	; 9
 8f4:	fc cf       	rjmp	.-8      	; 0x8ee <.L4>

000008f6 <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 8f6:	06 99       	sbic	0x00, 6	; 0
 8f8:	f8 cf       	rjmp	.-16     	; 0x8ea <.L5>

000008fa <.Loc.19>:
            //uitvoer();
            break;
        }
    }
}
 8fa:	ff 91       	pop	r31
 8fc:	ef 91       	pop	r30
 8fe:	bf 91       	pop	r27
 900:	af 91       	pop	r26
 902:	9f 91       	pop	r25
 904:	8f 91       	pop	r24
 906:	7f 91       	pop	r23
 908:	6f 91       	pop	r22
 90a:	5f 91       	pop	r21
 90c:	4f 91       	pop	r20
 90e:	3f 91       	pop	r19
 910:	2f 91       	pop	r18
 912:	0f 90       	pop	r0
 914:	0b be       	out	0x3b, r0	; 59
 916:	0f 90       	pop	r0
 918:	0f be       	out	0x3f, r0	; 63
 91a:	0f 90       	pop	r0
 91c:	1f 90       	pop	r1
 91e:	18 95       	reti

00000920 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 920:	6b 9a       	sbi	0x0d, 3	; 13

00000922 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 922:	e1 e0       	ldi	r30, 0x01	; 1
 924:	f1 e0       	ldi	r31, 0x01	; 1
 926:	80 81       	ld	r24, Z

00000928 <.Loc.4>:
 928:	88 60       	ori	r24, 0x08	; 8
 92a:	80 83       	st	Z, r24

0000092c <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 92c:	9d 9a       	sbi	0x13, 5	; 19

0000092e <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 92e:	80 81       	ld	r24, Z

00000930 <.Loc.8>:
 930:	80 61       	ori	r24, 0x10	; 16
 932:	80 83       	st	Z, r24

00000934 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 934:	73 98       	cbi	0x0e, 3	; 14

00000936 <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 936:	e2 e0       	ldi	r30, 0x02	; 2
 938:	f1 e0       	ldi	r31, 0x01	; 1
 93a:	80 81       	ld	r24, Z
 93c:	87 7f       	andi	r24, 0xF7	; 247
 93e:	80 83       	st	Z, r24

00000940 <.Loc.13>:
	PORT_DIR_R |= (1<<DIRECTION_R);
 940:	a5 9a       	sbi	0x14, 5	; 20

00000942 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 942:	80 81       	ld	r24, Z
 944:	8f 7e       	andi	r24, 0xEF	; 239
 946:	80 83       	st	Z, r24

00000948 <.Loc.17>:
}
 948:	08 95       	ret

0000094a <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
 94a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

0000094e <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 94e:	82 e0       	ldi	r24, 0x02	; 2
 950:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000954 <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
 954:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000958 <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 958:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000095c <.Loc.27>:
}
 95c:	08 95       	ret

0000095e <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
 95e:	82 e8       	ldi	r24, 0x82	; 130
 960:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000964 <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 964:	8a e1       	ldi	r24, 0x1A	; 26
 966:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

0000096a <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 972:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000976 <.Loc.35>:
    sei();
 976:	78 94       	sei

00000978 <.Loc.36>:
}
 978:	08 95       	ret

0000097a <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
 97a:	82 e8       	ldi	r24, 0x82	; 130
 97c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000980 <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 980:	8a e1       	ldi	r24, 0x1A	; 26
 982:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000986 <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 98e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000992 <.Loc.44>:
    sei();
 992:	78 94       	sei

00000994 <.Loc.45>:
}
 994:	08 95       	ret

00000996 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 996:	0e 94 bd 04 	call	0x97a	; 0x97a <initTimer4Stepper>

0000099a <.LVL0>:
    initTimer3Stepper();
 99a:	0e 94 af 04 	call	0x95e	; 0x95e <initTimer3Stepper>

0000099e <.LVL1>:
    initPinsStepper();
 99e:	0e 94 90 04 	call	0x920	; 0x920 <initPinsStepper>

000009a2 <.LVL2>:
}
 9a2:	08 95       	ret

000009a4 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 9a4:	28 2f       	mov	r18, r24
 9a6:	39 2f       	mov	r19, r25

000009a8 <.Loc.53>:
    ICR3 = PWMRight;
 9a8:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 9ac:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

000009b0 <.Loc.55>:
}
 9b0:	08 95       	ret

000009b2 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 9b2:	28 2f       	mov	r18, r24
 9b4:	39 2f       	mov	r19, r25

000009b6 <.Loc.58>:
    ICR4 = PWMLeft;
 9b6:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 9ba:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

000009be <.Loc.60>:
}
 9be:	08 95       	ret

000009c0 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 9c0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <state.1>
 9c4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <state.1+0x1>
 9c8:	89 2b       	or	r24, r25
 9ca:	41 f4       	brne	.+16     	; 0x9dc <.L9>

000009cc <.Loc.65>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 9cc:	a5 98       	cbi	0x14, 5	; 20

000009ce <.Loc.67>:
        state = 1;
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	90 e0       	ldi	r25, 0x00	; 0

000009d2 <.L10>:
 9d2:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <state.1+0x1>
 9d6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <state.1>

000009da <.Loc.69>:
    }
    else{
        PORT_DIR_R |= (1<<DIRECTION_R);
        state = 0;
    }
}
 9da:	08 95       	ret

000009dc <.L9>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 9dc:	a5 9a       	sbi	0x14, 5	; 20

000009de <.Loc.72>:
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	f7 cf       	rjmp	.-18     	; 0x9d2 <.L10>

000009e4 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 9e4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <state.0>
 9e8:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <state.0+0x1>
 9ec:	89 2b       	or	r24, r25
 9ee:	61 f4       	brne	.+24     	; 0xa08 <.L12>

000009f0 <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 9f0:	e2 e0       	ldi	r30, 0x02	; 2
 9f2:	f1 e0       	ldi	r31, 0x01	; 1
 9f4:	80 81       	ld	r24, Z

000009f6 <.Loc.79>:
 9f6:	80 61       	ori	r24, 0x10	; 16
 9f8:	80 83       	st	Z, r24

000009fa <.Loc.80>:
        state = 1;
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	90 e0       	ldi	r25, 0x00	; 0

000009fe <.L13>:
 9fe:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <state.0+0x1>
 a02:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <state.0>

00000a06 <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 a06:	08 95       	ret

00000a08 <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 a08:	e2 e0       	ldi	r30, 0x02	; 2
 a0a:	f1 e0       	ldi	r31, 0x01	; 1
 a0c:	80 81       	ld	r24, Z
 a0e:	8f 7e       	andi	r24, 0xEF	; 239
 a10:	80 83       	st	Z, r24

00000a12 <.Loc.85>:
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	f3 cf       	rjmp	.-26     	; 0x9fe <.L13>

00000a18 <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 a18:	8f 93       	push	r24
 a1a:	8f b7       	in	r24, 0x3f	; 63
 a1c:	8f 93       	push	r24
 a1e:	9f 93       	push	r25

00000a20 <.Loc.88>:
    stepCounterLeft++;
 a20:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 a24:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 a28:	01 96       	adiw	r24, 0x01	; 1
 a2a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <stepCounterLeft+0x1>
 a2e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <stepCounterLeft>

00000a32 <.Loc.90>:
}
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	8f bf       	out	0x3f, r24	; 63
 a38:	8f 91       	pop	r24
 a3a:	18 95       	reti

00000a3c <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 a3c:	8f 93       	push	r24
 a3e:	8f b7       	in	r24, 0x3f	; 63
 a40:	8f 93       	push	r24
 a42:	9f 93       	push	r25

00000a44 <.Loc.92>:
    stepCounterRight++;
 a44:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <stepCounterRight>
 a48:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <stepCounterRight+0x1>
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <stepCounterRight+0x1>
 a52:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <stepCounterRight>

00000a56 <.Loc.94>:
}
 a56:	9f 91       	pop	r25
 a58:	8f 91       	pop	r24
 a5a:	8f bf       	out	0x3f, r24	; 63
 a5c:	8f 91       	pop	r24
 a5e:	18 95       	reti

00000a60 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 a60:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <stepCounterLeft+0x1>
 a64:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <stepCounterLeft>

00000a68 <.Loc.98>:
    stepCounterRight = 0;
 a68:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <stepCounterRight+0x1>
 a6c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <stepCounterRight>

00000a70 <.Loc.100>:
}
 a70:	08 95       	ret

00000a72 <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
 a72:	e2 e7       	ldi	r30, 0x72	; 114
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	80 81       	ld	r24, Z

00000a78 <.Loc.103>:
 a78:	81 60       	ori	r24, 0x01	; 1
 a7a:	80 83       	st	Z, r24

00000a7c <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
 a7c:	e1 e7       	ldi	r30, 0x71	; 113
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z

00000a82 <.Loc.105>:
 a82:	81 60       	ori	r24, 0x01	; 1
 a84:	80 83       	st	Z, r24

00000a86 <.Loc.106>:
}
 a86:	08 95       	ret

00000a88 <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
 a88:	e2 e7       	ldi	r30, 0x72	; 114
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
 a8e:	8e 7f       	andi	r24, 0xFE	; 254
 a90:	80 83       	st	Z, r24

00000a92 <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
 a92:	e1 e7       	ldi	r30, 0x71	; 113
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	8e 7f       	andi	r24, 0xFE	; 254
 a9a:	80 83       	st	Z, r24

00000a9c <.Loc.112>:
}
 a9c:	08 95       	ret

00000a9e <stepperBackward>:

void stepperBackward(void){
    PORT_DIR_R &= ~(1<<DIRECTION_R);
 a9e:	a5 98       	cbi	0x14, 5	; 20

00000aa0 <.Loc.116>:
	PORT_DIR_L |= (1<<DIRECTION_L);
 aa0:	e2 e0       	ldi	r30, 0x02	; 2
 aa2:	f1 e0       	ldi	r31, 0x01	; 1
 aa4:	80 81       	ld	r24, Z

00000aa6 <.Loc.117>:
 aa6:	80 61       	ori	r24, 0x10	; 16
 aa8:	80 83       	st	Z, r24

00000aaa <.Loc.118>:
}
 aaa:	08 95       	ret

00000aac <stepperForward>:

void stepperForward(void){
    PORT_DIR_R |= (1<<DIRECTION_R);
 aac:	a5 9a       	sbi	0x14, 5	; 20

00000aae <.Loc.122>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 aae:	e2 e0       	ldi	r30, 0x02	; 2
 ab0:	f1 e0       	ldi	r31, 0x01	; 1
 ab2:	80 81       	ld	r24, Z
 ab4:	8f 7e       	andi	r24, 0xEF	; 239
 ab6:	80 83       	st	Z, r24

00000ab8 <.Loc.124>:
}
 ab8:	08 95       	ret

00000aba <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 aba:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

00000abe <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 abe:	87 e6       	ldi	r24, 0x67	; 103
 ac0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

00000ac4 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 ac4:	88 e9       	ldi	r24, 0x98	; 152
 ac6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

00000aca <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 aca:	86 e0       	ldi	r24, 0x06	; 6
 acc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

00000ad0 <.Loc.9>:
}
 ad0:	08 95       	ret

00000ad2 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 ad2:	e8 ec       	ldi	r30, 0xC8	; 200
 ad4:	f0 e0       	ldi	r31, 0x00	; 0

00000ad6 <.L3>:
 ad6:	90 81       	ld	r25, Z
 ad8:	95 ff       	sbrs	r25, 5
 ada:	fd cf       	rjmp	.-6      	; 0xad6 <.L3>

00000adc <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 adc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000ae0 <.Loc.17>:
}
 ae0:	08 95       	ret

00000ae2 <sendCommand>:

void sendCommand(int command, int parameter, int snelheid, int acceleratie){
 ae2:	ef 92       	push	r14
 ae4:	ff 92       	push	r15
 ae6:	0f 93       	push	r16
 ae8:	1f 93       	push	r17
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
 aee:	00 d0       	rcall	.+0      	; 0xaf0 <L0^A>

00000af0 <L0^A>:
 af0:	00 d0       	rcall	.+0      	; 0xaf2 <L0^A>

00000af2 <L0^A>:
 af2:	0f 92       	push	r0
 af4:	0f 92       	push	r0
 af6:	cd b7       	in	r28, 0x3d	; 61
 af8:	de b7       	in	r29, 0x3e	; 62

00000afa <.Loc.20>:
    int serialschrijven[4] = {command, parameter, snelheid, acceleratie}; // array serieel schrijven 0,1,2,3 (4 hex totaal)
 afa:	9a 83       	std	Y+2, r25	; 0x02
 afc:	89 83       	std	Y+1, r24	; 0x01
 afe:	7c 83       	std	Y+4, r23	; 0x04
 b00:	6b 83       	std	Y+3, r22	; 0x03
 b02:	5e 83       	std	Y+6, r21	; 0x06
 b04:	4d 83       	std	Y+5, r20	; 0x05
 b06:	38 87       	std	Y+8, r19	; 0x08
 b08:	2f 83       	std	Y+7, r18	; 0x07

00000b0a <.LBB2>:
    for(int i = 0; i<4; i++){
 b0a:	8e 01       	movw	r16, r28
 b0c:	0f 5f       	subi	r16, 0xFF	; 255
 b0e:	1f 4f       	sbci	r17, 0xFF	; 255
 b10:	7e 01       	movw	r14, r28
 b12:	89 e0       	ldi	r24, 0x09	; 9
 b14:	e8 0e       	add	r14, r24
 b16:	f1 1c       	adc	r15, r1

00000b18 <.L6>:
        sendByte(serialschrijven[i]);
 b18:	f8 01       	movw	r30, r16
 b1a:	81 91       	ld	r24, Z+
 b1c:	91 91       	ld	r25, Z+
 b1e:	8f 01       	movw	r16, r30
 b20:	0e 94 69 05 	call	0xad2	; 0xad2 <sendByte>

00000b24 <.LVL4>:
    for(int i = 0; i<4; i++){
 b24:	0e 15       	cp	r16, r14
 b26:	1f 05       	cpc	r17, r15
 b28:	b9 f7       	brne	.-18     	; 0xb18 <.L6>

00000b2a <.LBE2>:
    }
}
 b2a:	28 96       	adiw	r28, 0x08	; 8
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	ff 90       	pop	r15
 b40:	ef 90       	pop	r14
 b42:	08 95       	ret

00000b44 <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 b44:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 b48:	88 23       	and	r24, r24
 b4a:	44 f4       	brge	.+16     	; 0xb5c <.L8>

00000b4c <.Loc.33>:
        dummy = UDR1; // Read and discard
 b4c:	ae ec       	ldi	r26, 0xCE	; 206
 b4e:	b0 e0       	ldi	r27, 0x00	; 0

00000b50 <.Loc.34>:
    while (UCSR1A & (1 << RXC1)) {
 b50:	e8 ec       	ldi	r30, 0xC8	; 200
 b52:	f0 e0       	ldi	r31, 0x00	; 0

00000b54 <.L10>:
        dummy = UDR1; // Read and discard
 b54:	8c 91       	ld	r24, X

00000b56 <.Loc.37>:
    while (UCSR1A & (1 << RXC1)) {
 b56:	80 81       	ld	r24, Z
 b58:	88 23       	and	r24, r24
 b5a:	e4 f3       	brlt	.-8      	; 0xb54 <.L10>

00000b5c <.L8>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 b5c:	08 95       	ret

00000b5e <receiveByte>:

int receiveByte() { //ontvangen van 1 hex getal
    while ( !(UCSR1A & (1<<RXC1))); //Wait for data to be received
 b5e:	e8 ec       	ldi	r30, 0xC8	; 200
 b60:	f0 e0       	ldi	r31, 0x00	; 0

00000b62 <.L13>:
 b62:	80 81       	ld	r24, Z

00000b64 <.Loc.44>:
 b64:	88 23       	and	r24, r24
 b66:	ec f7       	brge	.-6      	; 0xb62 <.L13>

00000b68 <.Loc.45>:
    return UDR1;
 b68:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000b6c <.Loc.47>:
}
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	08 95       	ret

00000b70 <receiveCommand>:

unsigned int serialOntvangen[4];

void receiveCommand(){
 b70:	0f 93       	push	r16
 b72:	1f 93       	push	r17
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29

00000b78 <.LBB3>:
    for(int i = 0; i<4; i++){
 b78:	cc e2       	ldi	r28, 0x2C	; 44
 b7a:	d2 e0       	ldi	r29, 0x02	; 2
 b7c:	04 e3       	ldi	r16, 0x34	; 52
 b7e:	12 e0       	ldi	r17, 0x02	; 2

00000b80 <.L16>:
        serialOntvangen[i] = receiveByte();
 b80:	0e 94 af 05 	call	0xb5e	; 0xb5e <receiveByte>

00000b84 <.LVL7>:
 b84:	89 93       	st	Y+, r24
 b86:	99 93       	st	Y+, r25

00000b88 <.Loc.55>:
    for(int i = 0; i<4; i++){
 b88:	c0 17       	cp	r28, r16
 b8a:	d1 07       	cpc	r29, r17
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <.L16>

00000b8e <.LBE3>:
    }
    flushUsart2Buffer();
 b8e:	0e 94 a2 05 	call	0xb44	; 0xb44 <flushUsart2Buffer>

00000b92 <.LVL8>:
}
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	1f 91       	pop	r17
 b98:	0f 91       	pop	r16
 b9a:	08 95       	ret

00000b9c <__vector_36>:

volatile uint8_t serialIndex = -1;

ISR(USART1_RX_vect) {
 b9c:	1f 92       	push	r1
 b9e:	0f 92       	push	r0
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	0f 92       	push	r0
 ba4:	11 24       	eor	r1, r1
 ba6:	0b b6       	in	r0, 0x3b	; 59
 ba8:	0f 92       	push	r0
 baa:	2f 93       	push	r18
 bac:	3f 93       	push	r19
 bae:	4f 93       	push	r20
 bb0:	5f 93       	push	r21
 bb2:	6f 93       	push	r22
 bb4:	7f 93       	push	r23
 bb6:	8f 93       	push	r24
 bb8:	9f 93       	push	r25
 bba:	af 93       	push	r26
 bbc:	bf 93       	push	r27
 bbe:	ef 93       	push	r30
 bc0:	ff 93       	push	r31

00000bc2 <.Loc.60>:
    uint8_t data = UDR1;
 bc2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000bc6 <.Loc.62>:

    serialOntvangen[serialIndex++] = data;
 bc6:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <serialIndex>
 bca:	91 e0       	ldi	r25, 0x01	; 1
 bcc:	9e 0f       	add	r25, r30
 bce:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <serialIndex>
 bd2:	f0 e0       	ldi	r31, 0x00	; 0

00000bd4 <.Loc.64>:
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	e4 5d       	subi	r30, 0xD4	; 212
 bda:	fd 4f       	sbci	r31, 0xFD	; 253
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	91 83       	std	Z+1, r25	; 0x01
 be0:	80 83       	st	Z, r24

00000be2 <.Loc.65>:
    if(serialIndex>=4){
 be2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <serialIndex>

00000be6 <.Loc.67>:
 be6:	84 30       	cpi	r24, 0x04	; 4
 be8:	98 f4       	brcc	.+38     	; 0xc10 <.L20>

00000bea <.L18>:
        serialIndex = 0;
        interpreter();
    }
}
 bea:	ff 91       	pop	r31
 bec:	ef 91       	pop	r30
 bee:	bf 91       	pop	r27
 bf0:	af 91       	pop	r26
 bf2:	9f 91       	pop	r25
 bf4:	8f 91       	pop	r24
 bf6:	7f 91       	pop	r23
 bf8:	6f 91       	pop	r22
 bfa:	5f 91       	pop	r21
 bfc:	4f 91       	pop	r20
 bfe:	3f 91       	pop	r19
 c00:	2f 91       	pop	r18
 c02:	0f 90       	pop	r0
 c04:	0b be       	out	0x3b, r0	; 59
 c06:	0f 90       	pop	r0
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	0f 90       	pop	r0
 c0c:	1f 90       	pop	r1
 c0e:	18 95       	reti

00000c10 <.L20>:
        serialIndex = 0;
 c10:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <serialIndex>

00000c14 <.Loc.71>:
        interpreter();
 c14:	0e 94 54 02 	call	0x4a8	; 0x4a8 <interpreter>

00000c18 <.LVL11>:
}
 c18:	e8 cf       	rjmp	.-48     	; 0xbea <.L18>

00000c1a <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 c1a:	8b e2       	ldi	r24, 0x2B	; 43
 c1c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000c20 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 c20:	8a e5       	ldi	r24, 0x5A	; 90
 c22:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000c26 <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 c26:	81 e2       	ldi	r24, 0x21	; 33
 c28:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000c2c <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 c2c:	8f ef       	ldi	r24, 0xFF	; 255
 c2e:	9f ef       	ldi	r25, 0xFF	; 255
 c30:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 c34:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

00000c38 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 c38:	84 e1       	ldi	r24, 0x14	; 20
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 c40:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000c44 <.Loc.11>:
    OCR5C = 20;
 c44:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 c48:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000c4c <.Loc.13>:
    //set enable interrupt
    sei();
 c4c:	78 94       	sei

00000c4e <.Loc.14>:
}
 c4e:	08 95       	ret

00000c50 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 c50:	ea e0       	ldi	r30, 0x0A	; 10
 c52:	f1 e0       	ldi	r31, 0x01	; 1
 c54:	80 81       	ld	r24, Z

00000c56 <.Loc.17>:
 c56:	80 61       	ori	r24, 0x10	; 16
 c58:	80 83       	st	Z, r24

00000c5a <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 c5a:	80 81       	ld	r24, Z

00000c5c <.Loc.19>:
 c5c:	80 62       	ori	r24, 0x20	; 32
 c5e:	80 83       	st	Z, r24

00000c60 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 c60:	ab e0       	ldi	r26, 0x0B	; 11
 c62:	b1 e0       	ldi	r27, 0x01	; 1
 c64:	8c 91       	ld	r24, X
 c66:	8f 7e       	andi	r24, 0xEF	; 239
 c68:	8c 93       	st	X, r24

00000c6a <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 c6a:	8c 91       	ld	r24, X
 c6c:	8f 7d       	andi	r24, 0xDF	; 223
 c6e:	8c 93       	st	X, r24

00000c70 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 c70:	80 81       	ld	r24, Z
 c72:	8d 7f       	andi	r24, 0xFD	; 253
 c74:	80 83       	st	Z, r24

00000c76 <.Loc.26>:
}
 c76:	08 95       	ret

00000c78 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 c78:	0e 94 28 06 	call	0xc50	; 0xc50 <init_pins_ultrasoon>

00000c7c <.LVL0>:
    init_timer5();
 c7c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <init_timer5>

00000c80 <.LVL1>:
}
 c80:	08 95       	ret

00000c82 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 c82:	8f 93       	push	r24
 c84:	8f b7       	in	r24, 0x3f	; 63
 c86:	8f 93       	push	r24
 c88:	8b b7       	in	r24, 0x3b	; 59
 c8a:	8f 93       	push	r24
 c8c:	ef 93       	push	r30
 c8e:	ff 93       	push	r31

00000c90 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 c90:	e1 e2       	ldi	r30, 0x21	; 33
 c92:	f1 e0       	ldi	r31, 0x01	; 1
 c94:	80 81       	ld	r24, Z

00000c96 <.Loc.33>:
 c96:	80 64       	ori	r24, 0x40	; 64
 c98:	80 83       	st	Z, r24

00000c9a <.Loc.34>:
}
 c9a:	ff 91       	pop	r31
 c9c:	ef 91       	pop	r30
 c9e:	8f 91       	pop	r24
 ca0:	8b bf       	out	0x3b, r24	; 59
 ca2:	8f 91       	pop	r24
 ca4:	8f bf       	out	0x3f, r24	; 63
 ca6:	8f 91       	pop	r24
 ca8:	18 95       	reti

00000caa <__vector_46>:

ISR(TIMER5_CAPT_vect){
 caa:	0f 92       	push	r0
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	0f 92       	push	r0
 cb0:	1f 92       	push	r1
 cb2:	11 24       	eor	r1, r1
 cb4:	2f 93       	push	r18
 cb6:	2b b7       	in	r18, 0x3b	; 59
 cb8:	2f 93       	push	r18
 cba:	3f 93       	push	r19
 cbc:	6f 93       	push	r22
 cbe:	7f 93       	push	r23
 cc0:	8f 93       	push	r24
 cc2:	9f 93       	push	r25
 cc4:	af 93       	push	r26
 cc6:	bf 93       	push	r27
 cc8:	ef 93       	push	r30
 cca:	ff 93       	push	r31

00000ccc <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 ccc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000cd0 <.Loc.39>:
 cd0:	86 ff       	sbrs	r24, 6
 cd2:	1e c0       	rjmp	.+60     	; 0xd10 <.L6>

00000cd4 <.Loc.40>:
        start_time = ICR5;
 cd4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 cd8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000cdc <.Loc.42>:
 cdc:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <start_time.0+0x1>
 ce0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <start_time.0>

00000ce4 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 ce4:	e1 e2       	ldi	r30, 0x21	; 33
 ce6:	f1 e0       	ldi	r31, 0x01	; 1
 ce8:	80 81       	ld	r24, Z
 cea:	8f 7b       	andi	r24, 0xBF	; 191
 cec:	80 83       	st	Z, r24

00000cee <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 cee:	ff 91       	pop	r31
 cf0:	ef 91       	pop	r30
 cf2:	bf 91       	pop	r27
 cf4:	af 91       	pop	r26
 cf6:	9f 91       	pop	r25
 cf8:	8f 91       	pop	r24
 cfa:	7f 91       	pop	r23
 cfc:	6f 91       	pop	r22
 cfe:	3f 91       	pop	r19
 d00:	2f 91       	pop	r18
 d02:	2b bf       	out	0x3b, r18	; 59
 d04:	2f 91       	pop	r18
 d06:	1f 90       	pop	r1
 d08:	0f 90       	pop	r0
 d0a:	0f be       	out	0x3f, r0	; 63
 d0c:	0f 90       	pop	r0
 d0e:	18 95       	reti

00000d10 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 d10:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 d14:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000d18 <.Loc.48>:
 d18:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <start_time.0>
 d1c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <start_time.0+0x1>
 d20:	28 1b       	sub	r18, r24
 d22:	39 0b       	sbc	r19, r25

00000d24 <.Loc.49>:
 d24:	a9 e0       	ldi	r26, 0x09	; 9
 d26:	bc e8       	ldi	r27, 0x8C	; 140
 d28:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__umulhisi3>
 d2c:	00 24       	eor	r0, r0
 d2e:	88 0f       	add	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	00 1c       	adc	r0, r0
 d34:	88 0f       	add	r24, r24
 d36:	99 1f       	adc	r25, r25
 d38:	00 1c       	adc	r0, r0
 d3a:	89 2f       	mov	r24, r25
 d3c:	90 2d       	mov	r25, r0

00000d3e <.Loc.50>:
        if (current_sensor == 0) {
 d3e:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <current_sensor>
 d42:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <current_sensor+0x1>

00000d46 <.Loc.52>:
 d46:	23 2b       	or	r18, r19
 d48:	c9 f4       	brne	.+50     	; 0xd7c <.L8>

00000d4a <.Loc.53>:
            distance_right = distance;  // Store distance for Sensor A
 d4a:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <distance_right+0x1>
 d4e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <distance_right>

00000d52 <.L9>:
        if (current_sensor == 0) {
 d52:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <current_sensor>
 d56:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <current_sensor+0x1>

00000d5a <.Loc.57>:
 d5a:	89 2b       	or	r24, r25
 d5c:	a1 f4       	brne	.+40     	; 0xd86 <.L10>

00000d5e <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 d5e:	81 e0       	ldi	r24, 0x01	; 1
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <current_sensor+0x1>
 d66:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <current_sensor>

00000d6a <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 d6a:	e0 e2       	ldi	r30, 0x20	; 32
 d6c:	f1 e0       	ldi	r31, 0x01	; 1
 d6e:	80 81       	ld	r24, Z
 d70:	87 7f       	andi	r24, 0xF7	; 247
 d72:	80 83       	st	Z, r24

00000d74 <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 d74:	80 81       	ld	r24, Z

00000d76 <.Loc.63>:
 d76:	80 62       	ori	r24, 0x20	; 32
 d78:	80 83       	st	Z, r24
 d7a:	b9 cf       	rjmp	.-142    	; 0xcee <.L5>

00000d7c <.L8>:
            distance_left = distance;  // Store distance for Sensor B
 d7c:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <distance_left+0x1>
 d80:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <distance_left>
 d84:	e6 cf       	rjmp	.-52     	; 0xd52 <.L9>

00000d86 <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 d86:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <current_sensor+0x1>
 d8a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <current_sensor>

00000d8e <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 d8e:	e0 e2       	ldi	r30, 0x20	; 32
 d90:	f1 e0       	ldi	r31, 0x01	; 1
 d92:	80 81       	ld	r24, Z
 d94:	8f 7d       	andi	r24, 0xDF	; 223
 d96:	80 83       	st	Z, r24

00000d98 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 d98:	80 81       	ld	r24, Z

00000d9a <.Loc.71>:
 d9a:	88 60       	ori	r24, 0x08	; 8
 d9c:	80 83       	st	Z, r24

00000d9e <.LBE2>:
}
 d9e:	a7 cf       	rjmp	.-178    	; 0xcee <.L5>

00000da0 <__divmodhi4>:
 da0:	97 fb       	bst	r25, 7

00000da2 <.Loc.1>:
 da2:	07 2e       	mov	r0, r23

00000da4 <.Loc.2>:
 da4:	16 f4       	brtc	.+4      	; 0xdaa <.L^B1>

00000da6 <.Loc.3>:
 da6:	00 94       	com	r0

00000da8 <.Loc.4>:
 da8:	07 d0       	rcall	.+14     	; 0xdb8 <__divmodhi4_neg1>

00000daa <.L^B1>:
 daa:	77 fd       	sbrc	r23, 7

00000dac <.Loc.6>:
 dac:	09 d0       	rcall	.+18     	; 0xdc0 <__divmodhi4_neg2>

00000dae <.Loc.7>:
 dae:	0e 94 f3 06 	call	0xde6	; 0xde6 <__udivmodhi4>

00000db2 <.Loc.8>:
 db2:	07 fc       	sbrc	r0, 7

00000db4 <.Loc.9>:
 db4:	05 d0       	rcall	.+10     	; 0xdc0 <__divmodhi4_neg2>

00000db6 <.Loc.10>:
 db6:	3e f4       	brtc	.+14     	; 0xdc6 <__divmodhi4_exit>

00000db8 <__divmodhi4_neg1>:
 db8:	90 95       	com	r25

00000dba <.Loc.12>:
 dba:	81 95       	neg	r24

00000dbc <.Loc.13>:
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255

00000dbe <.Loc.14>:
 dbe:	08 95       	ret

00000dc0 <__divmodhi4_neg2>:
 dc0:	70 95       	com	r23

00000dc2 <.Loc.16>:
 dc2:	61 95       	neg	r22

00000dc4 <.Loc.17>:
 dc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000dc6 <__divmodhi4_exit>:
 dc6:	08 95       	ret

00000dc8 <__umulhisi3>:
 dc8:	a2 9f       	mul	r26, r18

00000dca <.Loc.1>:
 dca:	b0 01       	movw	r22, r0

00000dcc <.Loc.2>:
 dcc:	b3 9f       	mul	r27, r19

00000dce <.Loc.3>:
 dce:	c0 01       	movw	r24, r0

00000dd0 <.Loc.4>:
 dd0:	a3 9f       	mul	r26, r19

00000dd2 <.Loc.5>:
 dd2:	70 0d       	add	r23, r0

00000dd4 <.Loc.6>:
 dd4:	81 1d       	adc	r24, r1

00000dd6 <.Loc.7>:
 dd6:	11 24       	eor	r1, r1

00000dd8 <.Loc.8>:
 dd8:	91 1d       	adc	r25, r1

00000dda <.Loc.9>:
 dda:	b2 9f       	mul	r27, r18

00000ddc <.Loc.10>:
 ddc:	70 0d       	add	r23, r0

00000dde <.Loc.11>:
 dde:	81 1d       	adc	r24, r1

00000de0 <.Loc.12>:
 de0:	11 24       	eor	r1, r1

00000de2 <.Loc.13>:
 de2:	91 1d       	adc	r25, r1

00000de4 <.Loc.14>:
 de4:	08 95       	ret

00000de6 <__udivmodhi4>:
 de6:	aa 1b       	sub	r26, r26

00000de8 <.Loc.1>:
 de8:	bb 1b       	sub	r27, r27

00000dea <.Loc.2>:
 dea:	51 e1       	ldi	r21, 0x11	; 17

00000dec <.Loc.3>:
 dec:	07 c0       	rjmp	.+14     	; 0xdfc <__udivmodhi4_ep>

00000dee <__udivmodhi4_loop>:
 dee:	aa 1f       	adc	r26, r26

00000df0 <.Loc.5>:
 df0:	bb 1f       	adc	r27, r27

00000df2 <.Loc.6>:
 df2:	a6 17       	cp	r26, r22

00000df4 <.Loc.7>:
 df4:	b7 07       	cpc	r27, r23

00000df6 <.Loc.8>:
 df6:	10 f0       	brcs	.+4      	; 0xdfc <__udivmodhi4_ep>

00000df8 <.Loc.9>:
 df8:	a6 1b       	sub	r26, r22

00000dfa <.Loc.10>:
 dfa:	b7 0b       	sbc	r27, r23

00000dfc <__udivmodhi4_ep>:
 dfc:	88 1f       	adc	r24, r24

00000dfe <.Loc.12>:
 dfe:	99 1f       	adc	r25, r25

00000e00 <.Loc.13>:
 e00:	5a 95       	dec	r21

00000e02 <.Loc.14>:
 e02:	a9 f7       	brne	.-22     	; 0xdee <__udivmodhi4_loop>

00000e04 <.Loc.15>:
 e04:	80 95       	com	r24

00000e06 <.Loc.16>:
 e06:	90 95       	com	r25

00000e08 <.Loc.17>:
 e08:	bc 01       	movw	r22, r24

00000e0a <.Loc.18>:
 e0a:	cd 01       	movw	r24, r26

00000e0c <.Loc.19>:
 e0c:	08 95       	ret

00000e0e <_exit>:
 e0e:	f8 94       	cli

00000e10 <__stop_program>:
 e10:	ff cf       	rjmp	.-2      	; 0xe10 <__stop_program>
