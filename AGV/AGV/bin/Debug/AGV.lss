
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000f0e  00000fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800222  00800222  00000fe4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000218  00000000  00000000  00001040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00002636  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001384  00000000  00000000  0000388e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00002063  00000000  00000000  00004c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000005e4  00000000  00000000  00006c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000997  00000000  00000000  0000725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000214  00000000  00000000  00007bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000001e0  00000000  00000000  00007e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001f  00000000  00000000  00007fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_35>
  90:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_36>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_45>
  b8:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ee e0       	ldi	r30, 0x0E	; 14

000000fc <.Loc.4>:
  fc:	ff e0       	ldi	r31, 0x0F	; 15

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e2       	ldi	r26, 0x22	; 34

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	ae 33       	cpi	r26, 0x3E	; 62

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 0c 03 	call	0x618	; 0x618 <main>
 122:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initSerialCom>:
#include "Debugging.h"

///serial com for debugging
void initSerialCom(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr >> 8);
 12a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

0000012e <.Loc.3>:
    UBRR0L = (unsigned char)ubrr;
 12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

00000132 <.Loc.5>:

    // Enable transmitter
    UCSR0B = (1 << TXEN0);
 132:	88 e0       	ldi	r24, 0x08	; 8

00000134 <.Loc.7>:
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

00000138 <.Loc.8>:

    // Set frame format: 8data, 1stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

0000013e <.Loc.10>:
}
 13e:	08 95       	ret

00000140 <SerialComTransmit>:

void SerialComTransmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)));
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0

00000144 <.L3>:
 144:	90 81       	ld	r25, Z

00000146 <.Loc.16>:
 146:	95 ff       	sbrs	r25, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <.L3>

0000014a <.Loc.17>:
    // Put data into buffer, sends the data
    UDR0 = data;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

0000014e <.Loc.19>:
}
 14e:	08 95       	ret

00000150 <Serialprint>:

void Serialprint(const char *s) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	c8 2f       	mov	r28, r24
 156:	d9 2f       	mov	r29, r25

00000158 <.Loc.22>:
    while (*s) {
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <.L5>
 15e:	21 96       	adiw	r28, 0x01	; 1

00000160 <.L7>:
        SerialComTransmit(*s++);
 160:	0e 94 a0 00 	call	0x140	; 0x140 <SerialComTransmit>

00000164 <.LVL6>:
    while (*s) {
 164:	89 91       	ld	r24, Y+

00000166 <.Loc.27>:
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <.L7>

0000016a <.L5>:
    }
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <display_start>:
    0b00000000      // BLANK 19
};

// Start Condition
void display_start(void){
    DDR_DIO |= (1<<PIN_DIO);
 170:	ea e0       	ldi	r30, 0x0A	; 10
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z

00000176 <.Loc.2>:
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24

0000017a <.Loc.3>:
    PORT_DIO |= (1<<PIN_DIO);
 17a:	eb e0       	ldi	r30, 0x0B	; 11
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z

00000180 <.Loc.4>:
 180:	80 68       	ori	r24, 0x80	; 128
 182:	80 83       	st	Z, r24

00000184 <.Loc.5>:
    PORT_CLK |= (1<<PIN_CLK);
 184:	80 81       	ld	r24, Z

00000186 <.Loc.6>:
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24

0000018a <.Loc.7>:
    PORT_DIO &= ~(1<<PIN_DIO);
 18a:	80 81       	ld	r24, Z
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	80 83       	st	Z, r24

00000190 <.Loc.9>:
}
 190:	08 95       	ret

00000192 <display_stop>:

// Stop Condition
void display_stop(void){
    DDR_DIO |= (1<<PIN_DIO);
 192:	ea e0       	ldi	r30, 0x0A	; 10
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	80 81       	ld	r24, Z

00000198 <.Loc.12>:
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 83       	st	Z, r24

0000019c <.Loc.13>:
    PORT_CLK &= ~(1<<PIN_CLK);
 19c:	eb e0       	ldi	r30, 0x0B	; 11
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 7b       	andi	r24, 0xBF	; 191
 1a4:	80 83       	st	Z, r24

000001a6 <.Loc.15>:
    PORT_CLK |= (1<<PIN_CLK);
 1a6:	80 81       	ld	r24, Z

000001a8 <.Loc.16>:
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24

000001ac <.Loc.17>:
    PORT_DIO |= (1<<PIN_DIO);
 1ac:	80 81       	ld	r24, Z

000001ae <.Loc.18>:
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	80 83       	st	Z, r24

000001b2 <.Loc.19>:
}
 1b2:	08 95       	ret

000001b4 <display_sendbyte>:

// Write One Byte (LSB first)
void display_sendbyte(unsigned char data){
    DDR_DIO |= (1<<PIN_DIO);
 1b4:	ea e0       	ldi	r30, 0x0A	; 10
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	90 81       	ld	r25, Z

000001ba <.Loc.22>:
 1ba:	90 68       	ori	r25, 0x80	; 128
 1bc:	90 83       	st	Z, r25

000001be <.Loc.23>:
 1be:	28 e0       	ldi	r18, 0x08	; 8
 1c0:	30 e0       	ldi	r19, 0x00	; 0

000001c2 <.Loc.27>:
    for(int i = 0; i < 8; i++){
        PORT_CLK &= ~(1<<PIN_CLK);
 1c2:	eb e0       	ldi	r30, 0x0B	; 11
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <.L6>

000001c8 <.L4>:
        if(data & 0x01){
            PORT_DIO |= (1<<PIN_DIO);
        }
        else{
            PORT_DIO &= ~(1<<PIN_DIO);
 1c8:	90 81       	ld	r25, Z
 1ca:	9f 77       	andi	r25, 0x7F	; 127
 1cc:	90 83       	st	Z, r25

000001ce <.L5>:
        }
        PORT_CLK |= (1<<PIN_CLK);
 1ce:	90 81       	ld	r25, Z

000001d0 <.Loc.31>:
 1d0:	90 64       	ori	r25, 0x40	; 64
 1d2:	90 83       	st	Z, r25

000001d4 <.Loc.32>:
        data >>= 1;
 1d4:	86 95       	lsr	r24

000001d6 <.Loc.34>:
    for(int i = 0; i < 8; i++){
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1

000001da <.Loc.36>:
 1da:	21 15       	cp	r18, r1
 1dc:	31 05       	cpc	r19, r1
 1de:	49 f0       	breq	.+18     	; 0x1f2 <.L8>

000001e0 <.L6>:
        PORT_CLK &= ~(1<<PIN_CLK);
 1e0:	90 81       	ld	r25, Z
 1e2:	9f 7b       	andi	r25, 0xBF	; 191
 1e4:	90 83       	st	Z, r25

000001e6 <.Loc.39>:
        if(data & 0x01){
 1e6:	80 ff       	sbrs	r24, 0
 1e8:	ef cf       	rjmp	.-34     	; 0x1c8 <.L4>

000001ea <.Loc.41>:
            PORT_DIO |= (1<<PIN_DIO);
 1ea:	90 81       	ld	r25, Z

000001ec <.Loc.42>:
 1ec:	90 68       	ori	r25, 0x80	; 128
 1ee:	90 83       	st	Z, r25
 1f0:	ee cf       	rjmp	.-36     	; 0x1ce <.L5>

000001f2 <.L8>:
    }
    // Let IC ACK without polling
    PORT_CLK &= ~(1<<PIN_CLK);
 1f2:	eb e0       	ldi	r30, 0x0B	; 11
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	80 81       	ld	r24, Z

000001f8 <.Loc.46>:
 1f8:	8f 7b       	andi	r24, 0xBF	; 191
 1fa:	80 83       	st	Z, r24

000001fc <.Loc.47>:
    PORT_CLK |= (1<<PIN_CLK);
 1fc:	80 81       	ld	r24, Z

000001fe <.Loc.48>:
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24

00000202 <.Loc.49>:
}
 202:	08 95       	ret

00000204 <display_brightness>:

// Set Brightness
void display_brightness(unsigned char brightness){
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24

00000208 <.Loc.52>:
    display_start();
 208:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

0000020c <.LVL8>:
    display_sendbyte(0x88 | (brightness & 0x07));
 20c:	8c 2f       	mov	r24, r28
 20e:	87 70       	andi	r24, 0x07	; 7
 210:	88 68       	ori	r24, 0x88	; 136
 212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000216 <.LVL9>:
    display_stop();
 216:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000021a <.LVL10>:
}
 21a:	cf 91       	pop	r28

0000021c <.Loc.56>:
 21c:	08 95       	ret

0000021e <display_number>:

// Display 4 digit integer
void display_number(int number){
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	d8 2f       	mov	r29, r24
 22a:	c9 2f       	mov	r28, r25

0000022c <.Loc.59>:
    display_start();
 22c:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

00000230 <.LVL13>:
    display_sendbyte(0x40);
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000236 <.LVL14>:
    display_stop();
 236:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000023a <.LVL15>:
 23a:	13 ec       	ldi	r17, 0xC3	; 195

0000023c <.Loc.66>:
    // Write each digit separate
    for (int i = 0; i < 4; i++) {
        display_start();
        display_sendbyte(0xC0 + (3 - i));
        display_sendbyte(digits[number%10]);
 23c:	0f 2e       	mov	r0, r31
 23e:	fa e0       	ldi	r31, 0x0A	; 10
 240:	ef 2e       	mov	r14, r31
 242:	f1 2c       	mov	r15, r1
 244:	f0 2d       	mov	r31, r0

00000246 <.L11>:
        display_start();
 246:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

0000024a <.LVL17>:
        display_sendbyte(0xC0 + (3 - i));
 24a:	81 2f       	mov	r24, r17
 24c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000250 <.LVL18>:
        display_sendbyte(digits[number%10]);
 250:	8d 2f       	mov	r24, r29
 252:	9c 2f       	mov	r25, r28
 254:	b7 01       	movw	r22, r14
 256:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__divmodhi4>
 25a:	d6 2f       	mov	r29, r22

0000025c <.Loc.71>:
 25c:	c7 2f       	mov	r28, r23

0000025e <.Loc.72>:
 25e:	fc 01       	movw	r30, r24
 260:	ec 5e       	subi	r30, 0xEC	; 236
 262:	fd 4f       	sbci	r31, 0xFD	; 253

00000264 <.Loc.73>:
 264:	80 81       	ld	r24, Z
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

0000026a <.LVL20>:
        number /= 10;
        display_stop();
 26a:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

0000026e <.LVL21>:
    for (int i = 0; i < 4; i++) {
 26e:	11 50       	subi	r17, 0x01	; 1
 270:	1f 3b       	cpi	r17, 0xBF	; 191
 272:	49 f7       	brne	.-46     	; 0x246 <.L11>

00000274 <.Loc.78>:
    }
}
 274:	df 91       	pop	r29

00000276 <.Loc.79>:
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <display_letter>:
// Write a single letter
void display_letter(unsigned int letter, unsigned char position){
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	c8 2f       	mov	r28, r24
 288:	d9 2f       	mov	r29, r25
 28a:	16 2f       	mov	r17, r22

0000028c <.Loc.82>:
    display_start();
 28c:	0e 94 b8 00 	call	0x170	; 0x170 <display_start>

00000290 <.LVL24>:
    // Send command before writing
    display_sendbyte(0xC0 + position);
 290:	80 ec       	ldi	r24, 0xC0	; 192
 292:	81 0f       	add	r24, r17
 294:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

00000298 <.LVL25>:
    // Send letter
    display_sendbyte(letters[letter]);
 298:	c0 50       	subi	r28, 0x00	; 0
 29a:	de 4f       	sbci	r29, 0xFE	; 254

0000029c <.Loc.86>:
 29c:	88 81       	ld	r24, Y
 29e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display_sendbyte>

000002a2 <.LVL26>:
    display_stop();
 2a2:	0e 94 c9 00 	call	0x192	; 0x192 <display_stop>

000002a6 <.LVL27>:
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17

000002ac <.Loc.89>:
 2ac:	08 95       	ret

000002ae <display_init>:



// **Initialize TM1637**
void display_init(void){
    DDR_DIO |= (1<<PIN_DIO);
 2ae:	ea e0       	ldi	r30, 0x0A	; 10
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	80 81       	ld	r24, Z

000002b4 <.Loc.92>:
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	80 83       	st	Z, r24

000002b8 <.Loc.93>:
    DDR_CLK |= (1<<PIN_CLK);
 2b8:	80 81       	ld	r24, Z

000002ba <.Loc.94>:
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	80 83       	st	Z, r24

000002be <.Loc.95>:
    PORT_DIO |= (1<<PIN_DIO);
 2be:	eb e0       	ldi	r30, 0x0B	; 11
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	80 81       	ld	r24, Z

000002c4 <.Loc.96>:
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24

000002c8 <.Loc.97>:
    PORT_CLK |= (1<<PIN_CLK);
 2c8:	80 81       	ld	r24, Z

000002ca <.Loc.98>:
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24

000002ce <.Loc.99>:
    display_brightness(NORMAL_BRIGHTNESS); // 7 is max brightness
 2ce:	87 e0       	ldi	r24, 0x07	; 7
 2d0:	0e 94 02 01 	call	0x204	; 0x204 <display_brightness>

000002d4 <.LVL29>:
}
 2d4:	08 95       	ret

000002d6 <display_cfg>:
        display_left();
    }
}
// --- Various things to display --- //
void display_cfg(void){
    display_letter(19, 0);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	83 e1       	ldi	r24, 0x13	; 19
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002e0 <.LVL30>:
    display_letter(3, 1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002ea <.LVL31>:
    display_letter(6, 2);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002f4 <.LVL32>:
    display_letter(7, 3);
 2f4:	63 e0       	ldi	r22, 0x03	; 3
 2f6:	87 e0       	ldi	r24, 0x07	; 7
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000002fe <.LVL33>:
}
 2fe:	08 95       	ret

00000300 <display_fol>:

void display_fol(void){
    display_letter(19, 0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	83 e1       	ldi	r24, 0x13	; 19
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000030a <.LVL34>:
    display_letter(6, 1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000314 <.LVL35>:
    display_letter(13, 2);
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000031e <.LVL36>:
    display_letter(11, 3);
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	8b e0       	ldi	r24, 0x0B	; 11
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000328 <.LVL37>:
}
 328:	08 95       	ret

0000032a <display_cnt>:

void display_cnt(void){
    display_letter(19, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	83 e1       	ldi	r24, 0x13	; 19
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000334 <.LVL38>:
    display_letter(3, 1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000033e <.LVL39>:
    display_letter(12, 2);
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000348 <.LVL40>:
    display_letter(17, 3);
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	81 e1       	ldi	r24, 0x11	; 17
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000352 <.LVL41>:
}
 352:	08 95       	ret

00000354 <display_turn>:

void display_turn(void){
    display_letter(17, 0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	81 e1       	ldi	r24, 0x11	; 17
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000035e <.LVL42>:
    display_letter(18, 1);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	82 e1       	ldi	r24, 0x12	; 18
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000368 <.LVL43>:
    display_letter(15, 2);
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000372 <.LVL44>:
    display_letter(12, 3);
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	8c e0       	ldi	r24, 0x0C	; 12
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000037c <.LVL45>:
}
 37c:	08 95       	ret

0000037e <display_dist>:

void display_dist(void){
    display_letter(4, 0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000388 <.LVL46>:
    display_letter(9, 1);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	89 e0       	ldi	r24, 0x09	; 9
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000392 <.LVL47>:
    display_letter(16, 2);
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	80 e1       	ldi	r24, 0x10	; 16
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000039c <.LVL48>:
    display_letter(17, 3);
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	81 e1       	ldi	r24, 0x11	; 17
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003a6 <.LVL49>:
}
 3a6:	08 95       	ret

000003a8 <display_pac>:

void display_pac(void){
    display_letter(19, 0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	83 e1       	ldi	r24, 0x13	; 19
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003b2 <.LVL50>:
    display_letter(14, 1);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	8e e0       	ldi	r24, 0x0E	; 14
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003bc <.LVL51>:
    display_letter(1, 2);
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003c6 <.LVL52>:
    display_letter(3, 3);
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003d0 <.LVL53>:
}
 3d0:	08 95       	ret

000003d2 <display_mode>:
    if(mode){
 3d2:	88 23       	and	r24, r24
 3d4:	19 f0       	breq	.+6      	; 0x3dc <.L22>

000003d6 <.Loc.140>:
        display_fol();
 3d6:	0e 94 80 01 	call	0x300	; 0x300 <display_fol>

000003da <.LVL55>:
 3da:	08 95       	ret

000003dc <.L22>:
        display_pac();
 3dc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <display_pac>

000003e0 <.LVL57>:
}
 3e0:	08 95       	ret

000003e2 <display_left>:

void display_left(void){
    display_letter(11, 0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	8b e0       	ldi	r24, 0x0B	; 11
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003ec <.LVL58>:
    display_letter(5, 1);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000003f6 <.LVL59>:
    display_letter(6, 2);
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000400 <.LVL60>:
    display_letter(17, 3);
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	81 e1       	ldi	r24, 0x11	; 17
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000040a <.LVL61>:
}
 40a:	08 95       	ret

0000040c <display_rght>:

void display_rght(void){
    display_letter(15, 0);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	8f e0       	ldi	r24, 0x0F	; 15
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000416 <.LVL62>:
    display_letter(7, 1);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	87 e0       	ldi	r24, 0x07	; 7
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000420 <.LVL63>:
    display_letter(8, 2);
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000042a <.LVL64>:
    display_letter(17, 3);
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	81 e1       	ldi	r24, 0x11	; 17
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000434 <.LVL65>:
}
 434:	08 95       	ret

00000436 <display_direction>:
    if(dir){
 436:	88 23       	and	r24, r24
 438:	19 f0       	breq	.+6      	; 0x440 <.L27>

0000043a <.Loc.159>:
        display_rght();
 43a:	0e 94 06 02 	call	0x40c	; 0x40c <display_rght>

0000043e <.LVL67>:
 43e:	08 95       	ret

00000440 <.L27>:
        display_left();
 440:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <display_left>

00000444 <.LVL69>:
}
 444:	08 95       	ret

00000446 <display_go>:

void display_go(void){
    display_letter(19, 0);
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	83 e1       	ldi	r24, 0x13	; 19
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000450 <.LVL70>:
    display_letter(19, 1);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	83 e1       	ldi	r24, 0x13	; 19
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000045a <.LVL71>:
    display_letter(7, 2);
 45a:	62 e0       	ldi	r22, 0x02	; 2
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000464 <.LVL72>:
    display_letter(13, 3);
 464:	63 e0       	ldi	r22, 0x03	; 3
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000046e <.LVL73>:
}
 46e:	08 95       	ret

00000470 <display_end>:

void display_end(void){
    display_letter(19, 0);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	83 e1       	ldi	r24, 0x13	; 19
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000047a <.LVL74>:
    display_letter(5, 1);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000484 <.LVL75>:
    display_letter(12, 2);
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

0000048e <.LVL76>:
    display_letter(4, 3);
 48e:	63 e0       	ldi	r22, 0x03	; 3
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

00000498 <.LVL77>:
}
 498:	08 95       	ret

0000049a <display_srch>:

void display_srch(void){
    display_letter(16, 0);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	80 e1       	ldi	r24, 0x10	; 16
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004a4 <.LVL78>:
    display_letter(15, 1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ae <.LVL79>:
    display_letter(3, 2);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004b8 <.LVL80>:
    display_letter(8, 3);
 4b8:	63 e0       	ldi	r22, 0x03	; 3
 4ba:	88 e0       	ldi	r24, 0x08	; 8
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004c2 <.LVL81>:
}
 4c2:	08 95       	ret

000004c4 <display_txt_stop>:

void display_txt_stop(void){
    display_letter(16, 0);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ce <.LVL82>:
    display_letter(17, 1);
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	81 e1       	ldi	r24, 0x11	; 17
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004d8 <.LVL83>:
    display_letter(13, 2);
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004e2 <.LVL84>:
    display_letter(14, 3);
 4e2:	63 e0       	ldi	r22, 0x03	; 3
 4e4:	8e e0       	ldi	r24, 0x0E	; 14
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 40 01 	call	0x280	; 0x280 <display_letter>

000004ec <.LVL85>:
}
 4ec:	08 95       	ret

000004ee <interpreter>:
*/



void interpreter(){
    if(serialData==0x01){    //commmando bewegen
 4ee:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 4f2:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	91 f1       	breq	.+100    	; 0x55e <.L10>

000004fa <.L2>:
        rechtdoor();
    }
    if(serialData==0xA1){
 4fa:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 4fe:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 502:	81 3a       	cpi	r24, 0xA1	; 161
 504:	91 05       	cpc	r25, r1
 506:	71 f1       	breq	.+92     	; 0x564 <.L11>

00000508 <.L3>:
        achteruit();
    }
    if(serialData==0xB1){
 508:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 50c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 510:	81 3b       	cpi	r24, 0xB1	; 177
 512:	91 05       	cpc	r25, r1
 514:	51 f1       	breq	.+84     	; 0x56a <.L12>

00000516 <.L4>:
        rechtsom();
    }
    if(serialData==0xB2){
 516:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 51a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 51e:	82 3b       	cpi	r24, 0xB2	; 178
 520:	91 05       	cpc	r25, r1
 522:	31 f1       	breq	.+76     	; 0x570 <.L13>

00000524 <.L5>:
        linksom();
    }
    if(serialData==0xD1){
 524:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 528:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 52c:	81 3d       	cpi	r24, 0xD1	; 209
 52e:	91 05       	cpc	r25, r1
 530:	11 f1       	breq	.+68     	; 0x576 <.L14>

00000532 <.L6>:
        kwartslagDraaienRechts();
    }
    if(serialData==0xD2){
 532:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 536:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 53a:	82 3d       	cpi	r24, 0xD2	; 210
 53c:	91 05       	cpc	r25, r1
 53e:	f1 f0       	breq	.+60     	; 0x57c <.L15>

00000540 <.L7>:
        kwartslagDraaienLinks();
    }
    if(serialData==0xD3){
 540:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 544:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 548:	83 3d       	cpi	r24, 0xD3	; 211
 54a:	91 05       	cpc	r25, r1
 54c:	d1 f0       	breq	.+52     	; 0x582 <.L16>

0000054e <.L8>:
        Pirouette();
    }
    if(serialData==0xFF){
 54e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <serialData>
 552:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <serialData+0x1>
 556:	8f 3f       	cpi	r24, 0xFF	; 255
 558:	91 05       	cpc	r25, r1
 55a:	b1 f0       	breq	.+44     	; 0x588 <.L17>

0000055c <.L1>:
        stop();
    }
}
 55c:	08 95       	ret

0000055e <.L10>:
        rechtdoor();
 55e:	0e 94 49 03 	call	0x692	; 0x692 <rechtdoor>

00000562 <.LVL0>:
 562:	cb cf       	rjmp	.-106    	; 0x4fa <.L2>

00000564 <.L11>:
        achteruit();
 564:	0e 94 b0 03 	call	0x760	; 0x760 <achteruit>

00000568 <.LVL1>:
 568:	cf cf       	rjmp	.-98     	; 0x508 <.L3>

0000056a <.L12>:
        rechtsom();
 56a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rechtsom>

0000056e <.LVL2>:
 56e:	d3 cf       	rjmp	.-90     	; 0x516 <.L4>

00000570 <.L13>:
        linksom();
 570:	0e 94 0c 04 	call	0x818	; 0x818 <linksom>

00000574 <.LVL3>:
 574:	d7 cf       	rjmp	.-82     	; 0x524 <.L5>

00000576 <.L14>:
        kwartslagDraaienRechts();
 576:	0e 94 e7 04 	call	0x9ce	; 0x9ce <kwartslagDraaienRechts>

0000057a <.LVL4>:
 57a:	db cf       	rjmp	.-74     	; 0x532 <.L6>

0000057c <.L15>:
        kwartslagDraaienLinks();
 57c:	0e 94 06 05 	call	0xa0c	; 0xa0c <kwartslagDraaienLinks>

00000580 <.LVL5>:
 580:	df cf       	rjmp	.-66     	; 0x540 <.L7>

00000582 <.L16>:
        Pirouette();
 582:	0e 94 25 05 	call	0xa4a	; 0xa4a <Pirouette>

00000586 <.LVL6>:
 586:	e3 cf       	rjmp	.-58     	; 0x54e <.L8>

00000588 <.L17>:
        stop();
 588:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

0000058c <.LVL7>:
}
 58c:	e7 cf       	rjmp	.-50     	; 0x55c <.L1>

0000058e <initKnipperLicht>:
#define LAR PC3
#define LAL PC7
#define PORTLED PORTC
#define DDRLED  DDRC
void initKnipperLicht(void){
    DDRLED |= (1<<LVR);
 58e:	39 9a       	sbi	0x07, 1	; 7

00000590 <.Loc.3>:
    DDRLED |= (1<<LVL);
 590:	3d 9a       	sbi	0x07, 5	; 7

00000592 <.Loc.5>:
    DDRLED |= (1<<LAR);
 592:	3b 9a       	sbi	0x07, 3	; 7

00000594 <.Loc.7>:
    DDRLED |= (1<<LAL);
 594:	3f 9a       	sbi	0x07, 7	; 7

00000596 <.Loc.9>:
}
 596:	08 95       	ret

00000598 <toggleKnipperRechts>:

void toggleKnipperRechts(void){
    static int state = 0;
    if(state == 0){
 598:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <state.2>
 59c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <state.2+0x1>
 5a0:	89 2b       	or	r24, r25
 5a2:	49 f4       	brne	.+18     	; 0x5b6 <.L3>

000005a4 <.Loc.14>:
        PORTLED |= (1<<LVR);
 5a4:	41 9a       	sbi	0x08, 1	; 8

000005a6 <.Loc.16>:
        PORTLED |= (1<<LAR);
 5a6:	43 9a       	sbi	0x08, 3	; 8

000005a8 <.Loc.18>:
        state = 1;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0

000005ac <.L4>:
 5ac:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <state.2+0x1>
 5b0:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <state.2>

000005b4 <.Loc.20>:
    else{
        PORTLED &= ~(1<<LVR);
        PORTLED &= ~(1<<LAR);
        state = 0;
    }
}
 5b4:	08 95       	ret

000005b6 <.L3>:
        PORTLED &= ~(1<<LVR);
 5b6:	41 98       	cbi	0x08, 1	; 8

000005b8 <.Loc.23>:
        PORTLED &= ~(1<<LAR);
 5b8:	43 98       	cbi	0x08, 3	; 8

000005ba <.Loc.25>:
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	f6 cf       	rjmp	.-20     	; 0x5ac <.L4>

000005c0 <toggleKnipperLinks>:

void toggleKnipperLinks(void){
    static int state = 0;
    if(state == 0){
 5c0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <state.1>
 5c4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <state.1+0x1>
 5c8:	89 2b       	or	r24, r25
 5ca:	49 f4       	brne	.+18     	; 0x5de <.L6>

000005cc <.Loc.31>:
        PORTLED |= (1<<LVL);
 5cc:	45 9a       	sbi	0x08, 5	; 8

000005ce <.Loc.33>:
        PORTLED |= (1<<LAL);
 5ce:	47 9a       	sbi	0x08, 7	; 8

000005d0 <.Loc.35>:
        state = 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0

000005d4 <.L7>:
 5d4:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <state.1+0x1>
 5d8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <state.1>

000005dc <.Loc.37>:
    else{
        PORTLED &= ~(1<<LVL);
        PORTLED &= ~(1<<LAL);
        state = 0;
    }
}
 5dc:	08 95       	ret

000005de <.L6>:
        PORTLED &= ~(1<<LVL);
 5de:	45 98       	cbi	0x08, 5	; 8

000005e0 <.Loc.40>:
        PORTLED &= ~(1<<LAL);
 5e0:	47 98       	cbi	0x08, 7	; 8

000005e2 <.Loc.42>:
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	f6 cf       	rjmp	.-20     	; 0x5d4 <.L7>

000005e8 <toggleKnipperNood>:

void toggleKnipperNood(void){
    static int state = 0;
    if(state == 0){
 5e8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <state.0>
 5ec:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <state.0+0x1>
 5f0:	89 2b       	or	r24, r25
 5f2:	59 f4       	brne	.+22     	; 0x60a <.L9>

000005f4 <.Loc.48>:
        PORTLED |= (1<<LVL);
 5f4:	45 9a       	sbi	0x08, 5	; 8

000005f6 <.Loc.50>:
        PORTLED |= (1<<LAL);
 5f6:	47 9a       	sbi	0x08, 7	; 8

000005f8 <.Loc.52>:
        PORTLED |= (1<<LVR);
 5f8:	41 9a       	sbi	0x08, 1	; 8

000005fa <.Loc.54>:
        PORTLED |= (1<<LAR);
 5fa:	43 9a       	sbi	0x08, 3	; 8

000005fc <.Loc.56>:
        state = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0

00000600 <.L10>:
 600:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <state.0+0x1>
 604:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <state.0>

00000608 <.Loc.58>:
        PORTLED &= ~(1<<LAL);
        PORTLED &= ~(1<<LVR);
        PORTLED &= ~(1<<LAR);
        state = 0;
    }
}
 608:	08 95       	ret

0000060a <.L9>:
        PORTLED &= ~(1<<LVL);
 60a:	45 98       	cbi	0x08, 5	; 8

0000060c <.Loc.61>:
        PORTLED &= ~(1<<LAL);
 60c:	47 98       	cbi	0x08, 7	; 8

0000060e <.Loc.63>:
        PORTLED &= ~(1<<LVR);
 60e:	41 98       	cbi	0x08, 1	; 8

00000610 <.Loc.65>:
        PORTLED &= ~(1<<LAR);
 610:	43 98       	cbi	0x08, 3	; 8

00000612 <.Loc.67>:
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	f4 cf       	rjmp	.-24     	; 0x600 <.L10>

00000618 <main>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1

int main(void)
{
    initNoodstop();
 618:	0e 94 44 05 	call	0xa88	; 0xa88 <initNoodstop>

0000061c <.LVL0>:
    initStepper();
 61c:	0e 94 bb 05 	call	0xb76	; 0xb76 <initStepper>

00000620 <.LVL1>:
    init_ultrasoon();
 620:	0e 94 ba 06 	call	0xd74	; 0xd74 <init_ultrasoon>

00000624 <.LVL2>:
    initUsart();
 624:	0e 94 4d 06 	call	0xc9a	; 0xc9a <initUsart>

00000628 <.LVL3>:
    flushUsart2Buffer();
 628:	0e 94 61 06 	call	0xcc2	; 0xcc2 <flushUsart2Buffer>

0000062c <.LVL4>:
    initKnipperLicht();
 62c:	0e 94 c7 02 	call	0x58e	; 0x58e <initKnipperLicht>

00000630 <.LVL5>:
    sei();
 630:	78 94       	sei

00000632 <.L2>:

    while(1){
        interpreter();
 632:	0e 94 77 02 	call	0x4ee	; 0x4ee <interpreter>

00000636 <.LVL6>:
    while(1){
 636:	fd cf       	rjmp	.-6      	; 0x632 <.L2>

00000638 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 638:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 63c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
 640:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 644:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 648:	82 0f       	add	r24, r18
 64a:	93 1f       	adc	r25, r19

0000064c <.Loc.3>:
 64c:	0d 96       	adiw	r24, 0x0d	; 13

0000064e <.Loc.4>:
 64e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <padbreedte+0x1>
 652:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <padbreedte>

00000656 <.Loc.5>:
}
 656:	08 95       	ret

00000658 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(1150);
 658:	8e e7       	ldi	r24, 0x7E	; 126
 65a:	94 e0       	ldi	r25, 0x04	; 4
 65c:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

00000660 <.LVL0>:
    speedStepperRight(1150);
 660:	8e e7       	ldi	r24, 0x7E	; 126
 662:	94 e0       	ldi	r25, 0x04	; 4
 664:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

00000668 <.LVL1>:
}
 668:	08 95       	ret

0000066a <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

00000672 <.LVL2>:
    speedStepperRight(0);
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

0000067a <.LVL3>:
}
 67a:	08 95       	ret

0000067c <ramping>:

int ramping(int originalValue , int value){
 67c:	26 2f       	mov	r18, r22
 67e:	37 2f       	mov	r19, r23

00000680 <.Loc.16>:
    if(originalValue > value){
 680:	28 17       	cp	r18, r24
 682:	39 07       	cpc	r19, r25
 684:	0c f4       	brge	.+2      	; 0x688 <.L5>

00000686 <.Loc.18>:
            originalValue --;
 686:	01 97       	sbiw	r24, 0x01	; 1

00000688 <.L5>:
    }
    if(originalValue < value){
 688:	82 17       	cp	r24, r18
 68a:	93 07       	cpc	r25, r19
 68c:	0c f4       	brge	.+2      	; 0x690 <.L6>

0000068e <.Loc.22>:
            originalValue ++;
 68e:	01 96       	adiw	r24, 0x01	; 1

00000690 <.L6>:
    }
    return originalValue;
}
 690:	08 95       	ret

00000692 <rechtdoor>:

void rechtdoor(void){
    stepperForward();
 692:	0e 94 46 06 	call	0xc8c	; 0xc8c <stepperForward>

00000696 <.LVL7>:
    while((stopRequest==0)){
 696:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 69a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
 69e:	89 2b       	or	r24, r25
 6a0:	b9 f0       	breq	.+46     	; 0x6d0 <.L14>

000006a2 <.L8>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
 6a2:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

000006a6 <.LVL8>:
    stopRequest=0;
 6a6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
 6aa:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

000006ae <.Loc.33>:
}
 6ae:	08 95       	ret

000006b0 <.L9>:
            sendByte(0x01); //stuur klaar met opdracht
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <sendByte>

000006b8 <.LVL9>:
            stopRequest=1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
 6c0:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

000006c4 <.L11>:
    while((stopRequest==0)){
 6c4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 6c8:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>
 6cc:	89 2b       	or	r24, r25
 6ce:	49 f7       	brne	.-46     	; 0x6a2 <.L8>

000006d0 <.L14>:
        if((distance_left>25)||(distance_right>25)){  //als agv buiten pad is
 6d0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 6d4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000006d8 <.Loc.40>:
 6d8:	4a 97       	sbiw	r24, 0x1a	; 26
 6da:	54 f7       	brge	.-44     	; 0x6b0 <.L9>

000006dc <.Loc.41>:
 6dc:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 6e0:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000006e4 <.Loc.42>:
 6e4:	4a 97       	sbiw	r24, 0x1a	; 26
 6e6:	24 f7       	brge	.-56     	; 0x6b0 <.L9>

000006e8 <.Loc.43>:
            if (distance_right==distance_left) {
 6e8:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 6ec:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 6f0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 6f4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000006f8 <.Loc.45>:
 6f8:	28 17       	cp	r18, r24
 6fa:	39 07       	cpc	r19, r25
 6fc:	f9 f0       	breq	.+62     	; 0x73c <.L16>

000006fe <.L12>:
            if (distance_right > distance_left){
 6fe:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 702:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 706:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 70a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

0000070e <.Loc.48>:
 70e:	82 17       	cp	r24, r18
 710:	93 07       	cpc	r25, r19
 712:	ec f0       	brlt	.+58     	; 0x74e <.L17>

00000714 <.L13>:
            if(distance_left > distance_right){
 714:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
 718:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
 71c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 720:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

00000724 <.Loc.51>:
 724:	82 17       	cp	r24, r18
 726:	93 07       	cpc	r25, r19
 728:	6c f6       	brge	.-102    	; 0x6c4 <.L11>

0000072a <.Loc.52>:
                speedStepperRight(ramping(1650, 1150));
 72a:	81 e7       	ldi	r24, 0x71	; 113
 72c:	96 e0       	ldi	r25, 0x06	; 6
 72e:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

00000732 <.LVL10>:
                speedStepperLeft(ramping(1150, 1650));
 732:	8f e7       	ldi	r24, 0x7F	; 127
 734:	94 e0       	ldi	r25, 0x04	; 4
 736:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

0000073a <.LVL11>:
 73a:	c4 cf       	rjmp	.-120    	; 0x6c4 <.L11>

0000073c <.L16>:
            speedStepperLeft(1150);
 73c:	8e e7       	ldi	r24, 0x7E	; 126
 73e:	94 e0       	ldi	r25, 0x04	; 4
 740:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

00000744 <.LVL12>:
            speedStepperRight(1150);
 744:	8e e7       	ldi	r24, 0x7E	; 126
 746:	94 e0       	ldi	r25, 0x04	; 4
 748:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

0000074c <.LVL13>:
 74c:	d8 cf       	rjmp	.-80     	; 0x6fe <.L12>

0000074e <.L17>:
                speedStepperLeft(ramping(1650, 1150));
 74e:	81 e7       	ldi	r24, 0x71	; 113
 750:	96 e0       	ldi	r25, 0x06	; 6
 752:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

00000756 <.LVL14>:
                speedStepperRight(ramping(1150, 1650));
 756:	8f e7       	ldi	r24, 0x7F	; 127
 758:	94 e0       	ldi	r25, 0x04	; 4
 75a:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

0000075e <.LVL15>:
 75e:	da cf       	rjmp	.-76     	; 0x714 <.L13>

00000760 <achteruit>:

void achteruit(void){
    stepperBackward();
 760:	0e 94 3f 06 	call	0xc7e	; 0xc7e <stepperBackward>

00000764 <.LVL16>:
    while(((distance_right<30)||(distance_left<30))||(stopRequest==0)){ //while agv binnen pad
 764:	21 c0       	rjmp	.+66     	; 0x7a8 <.L19>

00000766 <.L23>:
        if (distance_right==distance_left) {
 766:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 76a:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 76e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 772:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

00000776 <.Loc.64>:
 776:	28 17       	cp	r18, r24
 778:	39 07       	cpc	r19, r25
 77a:	99 f1       	breq	.+102    	; 0x7e2 <.L24>

0000077c <.Loc.65>:
            speedStepperLeft(1150);
            speedStepperRight(1150);
        }
        else{
            if (distance_right < distance_left){
 77c:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <distance_right>
 780:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <distance_right+0x1>
 784:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 788:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

0000078c <.Loc.67>:
 78c:	28 17       	cp	r18, r24
 78e:	39 07       	cpc	r19, r25
 790:	8c f1       	brlt	.+98     	; 0x7f4 <.L25>

00000792 <.L22>:
                speedStepperLeft(ramping(1650, 1150));
                speedStepperRight(ramping(1150, 1650));
            }
            if(distance_left < distance_right){
 792:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <distance_left>
 796:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <distance_left+0x1>
 79a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 79e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000007a2 <.Loc.70>:
 7a2:	28 17       	cp	r18, r24
 7a4:	39 07       	cpc	r19, r25
 7a6:	7c f1       	brlt	.+94     	; 0x806 <.L26>

000007a8 <.L19>:
    while(((distance_right<30)||(distance_left<30))||(stopRequest==0)){ //while agv binnen pad
 7a8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <distance_right>
 7ac:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <distance_right+0x1>

000007b0 <.Loc.73>:
 7b0:	4e 97       	sbiw	r24, 0x1e	; 30
 7b2:	cc f2       	brlt	.-78     	; 0x766 <.L23>

000007b4 <.Loc.74>:
 7b4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 7b8:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000007bc <.Loc.75>:
 7bc:	4e 97       	sbiw	r24, 0x1e	; 30
 7be:	9c f2       	brlt	.-90     	; 0x766 <.L23>

000007c0 <.Loc.76>:
 7c0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <stopRequest>
 7c4:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <stopRequest+0x1>

000007c8 <.Loc.77>:
 7c8:	89 2b       	or	r24, r25
 7ca:	69 f2       	breq	.-102    	; 0x766 <.L23>

000007cc <.Loc.78>:
                speedStepperRight(ramping(1650, 1150));
                speedStepperLeft(ramping(1150, 1650));
            }
        }
    }
    stop();
 7cc:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

000007d0 <.LVL17>:
    stopRequest=0;
 7d0:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <stopRequest+0x1>
 7d4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <stopRequest>

000007d8 <.Loc.81>:
    sendByte(0x01);   //send klaar met opdracht
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <sendByte>

000007e0 <.LVL18>:
}
 7e0:	08 95       	ret

000007e2 <.L24>:
            speedStepperLeft(1150);
 7e2:	8e e7       	ldi	r24, 0x7E	; 126
 7e4:	94 e0       	ldi	r25, 0x04	; 4
 7e6:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

000007ea <.LVL19>:
            speedStepperRight(1150);
 7ea:	8e e7       	ldi	r24, 0x7E	; 126
 7ec:	94 e0       	ldi	r25, 0x04	; 4
 7ee:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

000007f2 <.LVL20>:
 7f2:	da cf       	rjmp	.-76     	; 0x7a8 <.L19>

000007f4 <.L25>:
                speedStepperLeft(ramping(1650, 1150));
 7f4:	81 e7       	ldi	r24, 0x71	; 113
 7f6:	96 e0       	ldi	r25, 0x06	; 6
 7f8:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

000007fc <.LVL21>:
                speedStepperRight(ramping(1150, 1650));
 7fc:	8f e7       	ldi	r24, 0x7F	; 127
 7fe:	94 e0       	ldi	r25, 0x04	; 4
 800:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

00000804 <.LVL22>:
 804:	c6 cf       	rjmp	.-116    	; 0x792 <.L22>

00000806 <.L26>:
                speedStepperRight(ramping(1650, 1150));
 806:	81 e7       	ldi	r24, 0x71	; 113
 808:	96 e0       	ldi	r25, 0x06	; 6
 80a:	0e 94 c2 05 	call	0xb84	; 0xb84 <speedStepperRight>

0000080e <.LVL23>:
                speedStepperLeft(ramping(1150, 1650));
 80e:	8f e7       	ldi	r24, 0x7F	; 127
 810:	94 e0       	ldi	r25, 0x04	; 4
 812:	0e 94 c9 05 	call	0xb92	; 0xb92 <speedStepperLeft>

00000816 <.LVL24>:
 816:	c8 cf       	rjmp	.-112    	; 0x7a8 <.L19>

00000818 <linksom>:

void linksom(void){
    toggleKnipperRechts();
 818:	0e 94 cc 02 	call	0x598	; 0x598 <toggleKnipperRechts>

0000081c <.LVL25>:
    enableStepCnt();
 81c:	0e 94 29 06 	call	0xc52	; 0xc52 <enableStepCnt>

00000820 <.LVL26>:
    clearStepCnt();
 820:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000824 <.LVL27>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 824:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 828:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 82c:	84 3d       	cpi	r24, 0xD4	; 212
 82e:	97 41       	sbci	r25, 0x17	; 23
 830:	48 f4       	brcc	.+18     	; 0x844 <.L28>

00000832 <.L29>:
        vooruit();
 832:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000836 <.LVL28>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 836:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 83a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 83e:	84 3d       	cpi	r24, 0xD4	; 212
 840:	97 41       	sbci	r25, 0x17	; 23
 842:	b8 f3       	brcs	.-18     	; 0x832 <.L29>

00000844 <.L28>:
    }
    clearStepCnt();
 844:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000848 <.LVL29>:
    toggleStepperDirectionRight();
 848:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

0000084c <.LVL30>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 84c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 850:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 854:	8e 32       	cpi	r24, 0x2E	; 46
 856:	99 40       	sbci	r25, 0x09	; 9
 858:	48 f4       	brcc	.+18     	; 0x86c <.L30>

0000085a <.L31>:
        vooruit();
 85a:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

0000085e <.LVL31>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 85e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 862:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 866:	8e 32       	cpi	r24, 0x2E	; 46
 868:	99 40       	sbci	r25, 0x09	; 9
 86a:	b8 f3       	brcs	.-18     	; 0x85a <.L31>

0000086c <.L30>:
    }
    toggleStepperDirectionRight();
 86c:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

00000870 <.LVL32>:
    clearStepCnt();
 870:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000874 <.LVL33>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 874:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 878:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 87c:	8c 37       	cpi	r24, 0x7C	; 124
 87e:	95 41       	sbci	r25, 0x15	; 21
 880:	48 f4       	brcc	.+18     	; 0x894 <.L32>

00000882 <.L33>:
        vooruit();
 882:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000886 <.LVL34>:
    while(stepCounterLeft<(5500)){    //agv rijdt naar volgende pad
 886:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 88a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 88e:	8c 37       	cpi	r24, 0x7C	; 124
 890:	95 41       	sbci	r25, 0x15	; 21
 892:	b8 f3       	brcs	.-18     	; 0x882 <.L33>

00000894 <.L32>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 894:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

00000898 <.LVL35>:
    clearStepCnt();
 898:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

0000089c <.LVL36>:
    while(stepCounterLeft<(2350)){
 89c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 8a0:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 8a4:	8e 32       	cpi	r24, 0x2E	; 46
 8a6:	99 40       	sbci	r25, 0x09	; 9
 8a8:	48 f4       	brcc	.+18     	; 0x8bc <.L34>

000008aa <.L35>:
        vooruit();
 8aa:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

000008ae <.LVL37>:
    while(stepCounterLeft<(2350)){
 8ae:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 8b2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 8b6:	8e 32       	cpi	r24, 0x2E	; 46
 8b8:	99 40       	sbci	r25, 0x09	; 9
 8ba:	b8 f3       	brcs	.-18     	; 0x8aa <.L35>

000008bc <.L34>:
    }
    toggleStepperDirectionRight();
 8bc:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

000008c0 <.LVL38>:
    clearStepCnt();
 8c0:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

000008c4 <.LVL39>:
    vooruit();
 8c4:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

000008c8 <.LVL40>:
    while(distance_left>15){           //agv is in het volgende pad
 8c8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 8cc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
 8d0:	40 97       	sbiw	r24, 0x10	; 16
 8d2:	44 f0       	brlt	.+16     	; 0x8e4 <.L36>

000008d4 <.L37>:
        vooruit();
 8d4:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

000008d8 <.LVL41>:
    while(distance_left>15){           //agv is in het volgende pad
 8d8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 8dc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>
 8e0:	40 97       	sbiw	r24, 0x10	; 16
 8e2:	c4 f7       	brge	.-16     	; 0x8d4 <.L37>

000008e4 <.L36>:
    }
    stop();
 8e4:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

000008e8 <.LVL42>:
    disableStepCnt();
 8e8:	0e 94 34 06 	call	0xc68	; 0xc68 <disableStepCnt>

000008ec <.LVL43>:
    sendByte(0x01);   //send klaar met opdracht
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <sendByte>

000008f4 <.LVL44>:
    toggleKnipperRechts();
 8f4:	0e 94 cc 02 	call	0x598	; 0x598 <toggleKnipperRechts>

000008f8 <.LVL45>:
}
 8f8:	08 95       	ret

000008fa <rechtsom>:

void rechtsom(void){
    toggleKnipperLinks();
 8fa:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <toggleKnipperLinks>

000008fe <.LVL46>:
    enableStepCnt();
 8fe:	0e 94 29 06 	call	0xc52	; 0xc52 <enableStepCnt>

00000902 <.LVL47>:
    clearStepCnt();
 902:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000906 <.LVL48>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 906:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 90a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 90e:	84 3d       	cpi	r24, 0xD4	; 212
 910:	97 41       	sbci	r25, 0x17	; 23
 912:	48 f4       	brcc	.+18     	; 0x926 <.L44>

00000914 <.L45>:
        vooruit();
 914:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000918 <.LVL49>:
    while(stepCounterLeft<6100){      //agv rijdt ietsjes verder buiten het pad
 918:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 91c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 920:	84 3d       	cpi	r24, 0xD4	; 212
 922:	97 41       	sbci	r25, 0x17	; 23
 924:	b8 f3       	brcs	.-18     	; 0x914 <.L45>

00000926 <.L44>:
    }
    clearStepCnt();
 926:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

0000092a <.LVL50>:
    toggleStepperDirectionLeft();
 92a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <toggleStepperDirectionLeft>

0000092e <.LVL51>:
    while(stepCounterLeft<2250){   //agv draait 90 graden
 92e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 932:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 936:	8a 3c       	cpi	r24, 0xCA	; 202
 938:	98 40       	sbci	r25, 0x08	; 8
 93a:	48 f4       	brcc	.+18     	; 0x94e <.L46>

0000093c <.L47>:
        vooruit();
 93c:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000940 <.LVL52>:
    while(stepCounterLeft<2250){   //agv draait 90 graden
 940:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 944:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 948:	8a 3c       	cpi	r24, 0xCA	; 202
 94a:	98 40       	sbci	r25, 0x08	; 8
 94c:	b8 f3       	brcs	.-18     	; 0x93c <.L47>

0000094e <.L46>:
    }
    toggleStepperDirectionLeft();
 94e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <toggleStepperDirectionLeft>

00000952 <.LVL53>:
    clearStepCnt();
 952:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000956 <.LVL54>:
    while(stepCounterLeft<(5600)){    //agv rijdt naar volgende pad
 956:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 95a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 95e:	80 3e       	cpi	r24, 0xE0	; 224
 960:	95 41       	sbci	r25, 0x15	; 21
 962:	48 f4       	brcc	.+18     	; 0x976 <.L48>

00000964 <.L49>:
        vooruit();
 964:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000968 <.LVL55>:
    while(stepCounterLeft<(5600)){    //agv rijdt naar volgende pad
 968:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 96c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 970:	80 3e       	cpi	r24, 0xE0	; 224
 972:	95 41       	sbci	r25, 0x15	; 21
 974:	b8 f3       	brcs	.-18     	; 0x964 <.L49>

00000976 <.L48>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 976:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <toggleStepperDirectionLeft>

0000097a <.LVL56>:
    clearStepCnt();
 97a:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

0000097e <.LVL57>:
    while(stepCounterLeft<(2250)){
 97e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 982:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 986:	8a 3c       	cpi	r24, 0xCA	; 202
 988:	98 40       	sbci	r25, 0x08	; 8
 98a:	48 f4       	brcc	.+18     	; 0x99e <.L50>

0000098c <.L51>:
        vooruit();
 98c:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000990 <.LVL58>:
    while(stepCounterLeft<(2250)){
 990:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 994:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 998:	8a 3c       	cpi	r24, 0xCA	; 202
 99a:	98 40       	sbci	r25, 0x08	; 8
 99c:	b8 f3       	brcs	.-18     	; 0x98c <.L51>

0000099e <.L50>:
    }
    toggleStepperDirectionLeft();
 99e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <toggleStepperDirectionLeft>

000009a2 <.LVL59>:
    disableStepCnt();
 9a2:	0e 94 34 06 	call	0xc68	; 0xc68 <disableStepCnt>

000009a6 <.LVL60>:
    vooruit();
 9a6:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

000009aa <.LVL61>:
    if(distance_left<15){           //agv is in het volgende pad
 9aa:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <distance_left>
 9ae:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <distance_left+0x1>

000009b2 <.Loc.158>:
 9b2:	0f 97       	sbiw	r24, 0x0f	; 15
 9b4:	4c f0       	brlt	.+18     	; 0x9c8 <.L57>

000009b6 <.L52>:
        stop();
    }
    stop();
 9b6:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

000009ba <.LVL62>:
    sendByte(0x01);      //send klaar met opdracht
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 59 06 	call	0xcb2	; 0xcb2 <sendByte>

000009c2 <.LVL63>:
    toggleKnipperLinks();
 9c2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <toggleKnipperLinks>

000009c6 <.LVL64>:
}
 9c6:	08 95       	ret

000009c8 <.L57>:
        stop();
 9c8:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

000009cc <.LVL65>:
 9cc:	f4 cf       	rjmp	.-24     	; 0x9b6 <.L52>

000009ce <kwartslagDraaienRechts>:

void kwartslagDraaienRechts(void){
    toggleKnipperRechts();
 9ce:	0e 94 cc 02 	call	0x598	; 0x598 <toggleKnipperRechts>

000009d2 <.LVL66>:
    enableStepCnt();
 9d2:	0e 94 29 06 	call	0xc52	; 0xc52 <enableStepCnt>

000009d6 <.LVL67>:
    clearStepCnt();
 9d6:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

000009da <.LVL68>:
    toggleStepperDirectionLeft();
 9da:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <toggleStepperDirectionLeft>

000009de <.LVL69>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 9de:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 9e2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 9e6:	8e 32       	cpi	r24, 0x2E	; 46
 9e8:	99 40       	sbci	r25, 0x09	; 9
 9ea:	48 f4       	brcc	.+18     	; 0x9fe <.L59>

000009ec <.L60>:
        vooruit();
 9ec:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

000009f0 <.LVL70>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 9f0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 9f4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 9f8:	8e 32       	cpi	r24, 0x2E	; 46
 9fa:	99 40       	sbci	r25, 0x09	; 9
 9fc:	b8 f3       	brcs	.-18     	; 0x9ec <.L60>

000009fe <.L59>:
    }
    toggleStepperDirectionLeft();
 9fe:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <toggleStepperDirectionLeft>

00000a02 <.LVL71>:
    disableStepCnt();
 a02:	0e 94 34 06 	call	0xc68	; 0xc68 <disableStepCnt>

00000a06 <.LVL72>:
    toggleKnipperRechts();
 a06:	0e 94 cc 02 	call	0x598	; 0x598 <toggleKnipperRechts>

00000a0a <.LVL73>:

}
 a0a:	08 95       	ret

00000a0c <kwartslagDraaienLinks>:

void kwartslagDraaienLinks(void){
    toggleKnipperLinks();
 a0c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <toggleKnipperLinks>

00000a10 <.LVL74>:
    enableStepCnt();
 a10:	0e 94 29 06 	call	0xc52	; 0xc52 <enableStepCnt>

00000a14 <.LVL75>:
    clearStepCnt();
 a14:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000a18 <.LVL76>:
    toggleStepperDirectionRight();
 a18:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

00000a1c <.LVL77>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 a1c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a20:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a24:	8e 32       	cpi	r24, 0x2E	; 46
 a26:	99 40       	sbci	r25, 0x09	; 9
 a28:	48 f4       	brcc	.+18     	; 0xa3c <.L63>

00000a2a <.L64>:
        vooruit();
 a2a:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000a2e <.LVL78>:
    while(stepCounterLeft<2350){   //agv draait 90 graden
 a2e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a32:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a36:	8e 32       	cpi	r24, 0x2E	; 46
 a38:	99 40       	sbci	r25, 0x09	; 9
 a3a:	b8 f3       	brcs	.-18     	; 0xa2a <.L64>

00000a3c <.L63>:
    }
    toggleStepperDirectionRight();
 a3c:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

00000a40 <.LVL79>:
    disableStepCnt();
 a40:	0e 94 34 06 	call	0xc68	; 0xc68 <disableStepCnt>

00000a44 <.LVL80>:
    toggleKnipperLinks();
 a44:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <toggleKnipperLinks>

00000a48 <.LVL81>:
}
 a48:	08 95       	ret

00000a4a <Pirouette>:

void Pirouette(void){
        toggleKnipperLinks();
 a4a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <toggleKnipperLinks>

00000a4e <.LVL82>:
    enableStepCnt();
 a4e:	0e 94 29 06 	call	0xc52	; 0xc52 <enableStepCnt>

00000a52 <.LVL83>:
    clearStepCnt();
 a52:	0e 94 20 06 	call	0xc40	; 0xc40 <clearStepCnt>

00000a56 <.LVL84>:
    toggleStepperDirectionRight();
 a56:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

00000a5a <.LVL85>:
    while(stepCounterLeft<4700){   //agv draait 90 graden
 a5a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a5e:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a62:	8c 35       	cpi	r24, 0x5C	; 92
 a64:	92 41       	sbci	r25, 0x12	; 18
 a66:	48 f4       	brcc	.+18     	; 0xa7a <.L67>

00000a68 <.L68>:
        vooruit();
 a68:	0e 94 2c 03 	call	0x658	; 0x658 <vooruit>

00000a6c <.LVL86>:
    while(stepCounterLeft<4700){   //agv draait 90 graden
 a6c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 a70:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 a74:	8c 35       	cpi	r24, 0x5C	; 92
 a76:	92 41       	sbci	r25, 0x12	; 18
 a78:	b8 f3       	brcs	.-18     	; 0xa68 <.L68>

00000a7a <.L67>:
    }
    toggleStepperDirectionRight();
 a7a:	0e 94 d0 05 	call	0xba0	; 0xba0 <toggleStepperDirectionRight>

00000a7e <.LVL87>:
    disableStepCnt();
 a7e:	0e 94 34 06 	call	0xc68	; 0xc68 <disableStepCnt>

00000a82 <.LVL88>:
    toggleKnipperLinks();
 a82:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <toggleKnipperLinks>

00000a86 <.LVL89>:
}
 a86:	08 95       	ret

00000a88 <initNoodstop>:

#include <avr/interrupt.h>
#include <avr/io.h>

void initNoodstop(void){
    DDR_NOOD &= ~(1<<NOODKNOP);
 a88:	50 98       	cbi	0x0a, 0	; 10

00000a8a <.Loc.3>:
    PORT_NOOD |= (1<<NOODKNOP);
 a8a:	58 9a       	sbi	0x0b, 0	; 11

00000a8c <.Loc.5>:

    EIMSK |= (1<<INT0);       //ENABLE HARDWARE INTERRUPT ON PD0
 a8c:	e8 9a       	sbi	0x1d, 0	; 29

00000a8e <.Loc.7>:
    EICRA |= (0<<ISC01) | (1<<ISC00);   //Any edge of INTn generates asynchronously an interrupt request
 a8e:	e9 e6       	ldi	r30, 0x69	; 105
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	80 81       	ld	r24, Z

00000a94 <.Loc.8>:
 a94:	81 60       	ori	r24, 0x01	; 1
 a96:	80 83       	st	Z, r24

00000a98 <.Loc.9>:
    sei();
 a98:	78 94       	sei

00000a9a <.Loc.10>:
}
 a9a:	08 95       	ret

00000a9c <__vector_1>:

ISR(INT0_vect){
 a9c:	1f 92       	push	r1
 a9e:	0f 92       	push	r0
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	0f 92       	push	r0
 aa4:	11 24       	eor	r1, r1
 aa6:	0b b6       	in	r0, 0x3b	; 59
 aa8:	0f 92       	push	r0
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31

00000ac2 <.L5>:
    while(1){
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 ac2:	48 9b       	sbis	0x09, 0	; 9
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <.L3>

00000ac6 <.L4>:
            stop();
 ac6:	0e 94 35 03 	call	0x66a	; 0x66a <stop>

00000aca <.LVL0>:
            toggleKnipperNood();
 aca:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <toggleKnipperNood>

00000ace <.LVL1>:
        while((PIN_NOOD & (1<<NOODKNOP))){//while noodknop ingedrukt en start niet ingedrukt is (twee handeling voor noodstop)
 ace:	48 99       	sbic	0x09, 0	; 9
 ad0:	fa cf       	rjmp	.-12     	; 0xac6 <.L4>

00000ad2 <.L3>:
        }
        if(!(PIN_knop&(1<<start))){
 ad2:	06 99       	sbic	0x00, 6	; 0
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <.L5>

00000ad6 <.Loc.20>:
            //uitvoer();
            toggleKnipperNood();
 ad6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <toggleKnipperNood>

00000ada <.LVL2>:
            break;
        }
    }
}
 ada:	ff 91       	pop	r31
 adc:	ef 91       	pop	r30
 ade:	bf 91       	pop	r27
 ae0:	af 91       	pop	r26
 ae2:	9f 91       	pop	r25
 ae4:	8f 91       	pop	r24
 ae6:	7f 91       	pop	r23
 ae8:	6f 91       	pop	r22
 aea:	5f 91       	pop	r21
 aec:	4f 91       	pop	r20
 aee:	3f 91       	pop	r19
 af0:	2f 91       	pop	r18
 af2:	0f 90       	pop	r0
 af4:	0b be       	out	0x3b, r0	; 59
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

00000b00 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 b00:	6b 9a       	sbi	0x0d, 3	; 13

00000b02 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 b02:	e1 e0       	ldi	r30, 0x01	; 1
 b04:	f1 e0       	ldi	r31, 0x01	; 1
 b06:	80 81       	ld	r24, Z

00000b08 <.Loc.4>:
 b08:	88 60       	ori	r24, 0x08	; 8
 b0a:	80 83       	st	Z, r24

00000b0c <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 b0c:	9d 9a       	sbi	0x13, 5	; 19

00000b0e <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 b0e:	80 81       	ld	r24, Z

00000b10 <.Loc.8>:
 b10:	80 61       	ori	r24, 0x10	; 16
 b12:	80 83       	st	Z, r24

00000b14 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 b14:	73 98       	cbi	0x0e, 3	; 14

00000b16 <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 b16:	e2 e0       	ldi	r30, 0x02	; 2
 b18:	f1 e0       	ldi	r31, 0x01	; 1
 b1a:	80 81       	ld	r24, Z
 b1c:	87 7f       	andi	r24, 0xF7	; 247
 b1e:	80 83       	st	Z, r24

00000b20 <.Loc.13>:
	PORT_DIR_R |= (1<<DIRECTION_R);
 b20:	a5 9a       	sbi	0x14, 5	; 20

00000b22 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 b22:	80 81       	ld	r24, Z
 b24:	8f 7e       	andi	r24, 0xEF	; 239
 b26:	80 83       	st	Z, r24

00000b28 <.Loc.17>:
}
 b28:	08 95       	ret

00000b2a <disableStepper>:

void disableStepper(void){
        TCCR3A = (0<<WGM31) | (0<<WGM30) | (0<<COM3A1) | (0<<COM3A0);
 b2a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000b2e <.Loc.21>:
        TCCR3B = (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 b2e:	82 e0       	ldi	r24, 0x02	; 2
 b30:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000b34 <.Loc.23>:
        TCCR4A = (0<<WGM41) | (0<<WGM40) | (0<<COM4A1) | (0<<COM4A0);
 b34:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000b38 <.Loc.25>:
        TCCR4B = (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 b38:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000b3c <.Loc.27>:
}
 b3c:	08 95       	ret

00000b3e <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (0<<COM3A0);
 b3e:	82 e8       	ldi	r24, 0x82	; 130
 b40:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000b44 <.Loc.31>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (0<<CS32) | (1<<CS31) | (0<<CS30);
 b44:	8a e1       	ldi	r24, 0x1A	; 26
 b46:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000b4a <.Loc.33>:

	//define top value
    OCR3A = STEPVALUE;
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 b52:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000b56 <.Loc.35>:
    sei();
 b56:	78 94       	sei

00000b58 <.Loc.36>:
}
 b58:	08 95       	ret

00000b5a <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (0<<COM4A0);
 b5a:	82 e8       	ldi	r24, 0x82	; 130
 b5c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000b60 <.Loc.40>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40);
 b60:	8a e1       	ldi	r24, 0x1A	; 26
 b62:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000b66 <.Loc.42>:

	//define top value
    OCR4A = STEPVALUE;
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 b6e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000b72 <.Loc.44>:
    sei();
 b72:	78 94       	sei

00000b74 <.Loc.45>:
}
 b74:	08 95       	ret

00000b76 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 b76:	0e 94 ad 05 	call	0xb5a	; 0xb5a <initTimer4Stepper>

00000b7a <.LVL0>:
    initTimer3Stepper();
 b7a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <initTimer3Stepper>

00000b7e <.LVL1>:
    initPinsStepper();
 b7e:	0e 94 80 05 	call	0xb00	; 0xb00 <initPinsStepper>

00000b82 <.LVL2>:
}
 b82:	08 95       	ret

00000b84 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 b84:	28 2f       	mov	r18, r24
 b86:	39 2f       	mov	r19, r25

00000b88 <.Loc.53>:
    ICR3 = PWMRight;
 b88:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 b8c:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000b90 <.Loc.55>:
}
 b90:	08 95       	ret

00000b92 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 b92:	28 2f       	mov	r18, r24
 b94:	39 2f       	mov	r19, r25

00000b96 <.Loc.58>:
    ICR4 = PWMLeft;
 b96:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 b9a:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

00000b9e <.Loc.60>:
}
 b9e:	08 95       	ret

00000ba0 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 ba0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <state.1>
 ba4:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <state.1+0x1>
 ba8:	89 2b       	or	r24, r25
 baa:	41 f4       	brne	.+16     	; 0xbbc <.L9>

00000bac <.Loc.65>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 bac:	a5 98       	cbi	0x14, 5	; 20

00000bae <.Loc.67>:
        state = 1;
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	90 e0       	ldi	r25, 0x00	; 0

00000bb2 <.L10>:
 bb2:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <state.1+0x1>
 bb6:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <state.1>

00000bba <.Loc.69>:
    }
    else{
        PORT_DIR_R |= (1<<DIRECTION_R);
        state = 0;
    }
}
 bba:	08 95       	ret

00000bbc <.L9>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 bbc:	a5 9a       	sbi	0x14, 5	; 20

00000bbe <.Loc.72>:
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	f7 cf       	rjmp	.-18     	; 0xbb2 <.L10>

00000bc4 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 bc4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <state.0>
 bc8:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <state.0+0x1>
 bcc:	89 2b       	or	r24, r25
 bce:	61 f4       	brne	.+24     	; 0xbe8 <.L12>

00000bd0 <.Loc.78>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 bd0:	e2 e0       	ldi	r30, 0x02	; 2
 bd2:	f1 e0       	ldi	r31, 0x01	; 1
 bd4:	80 81       	ld	r24, Z

00000bd6 <.Loc.79>:
 bd6:	80 61       	ori	r24, 0x10	; 16
 bd8:	80 83       	st	Z, r24

00000bda <.Loc.80>:
        state = 1;
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0

00000bde <.L13>:
 bde:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <state.0+0x1>
 be2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <state.0>

00000be6 <.Loc.82>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 be6:	08 95       	ret

00000be8 <.L12>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 be8:	e2 e0       	ldi	r30, 0x02	; 2
 bea:	f1 e0       	ldi	r31, 0x01	; 1
 bec:	80 81       	ld	r24, Z
 bee:	8f 7e       	andi	r24, 0xEF	; 239
 bf0:	80 83       	st	Z, r24

00000bf2 <.Loc.85>:
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	f3 cf       	rjmp	.-26     	; 0xbde <.L13>

00000bf8 <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 bf8:	8f 93       	push	r24
 bfa:	8f b7       	in	r24, 0x3f	; 63
 bfc:	8f 93       	push	r24
 bfe:	9f 93       	push	r25

00000c00 <.Loc.88>:
    stepCounterLeft++;
 c00:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stepCounterLeft>
 c04:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stepCounterLeft+0x1>
 c08:	01 96       	adiw	r24, 0x01	; 1
 c0a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <stepCounterLeft+0x1>
 c0e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <stepCounterLeft>

00000c12 <.Loc.90>:
}
 c12:	9f 91       	pop	r25
 c14:	8f 91       	pop	r24
 c16:	8f bf       	out	0x3f, r24	; 63
 c18:	8f 91       	pop	r24
 c1a:	18 95       	reti

00000c1c <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 c1c:	8f 93       	push	r24
 c1e:	8f b7       	in	r24, 0x3f	; 63
 c20:	8f 93       	push	r24
 c22:	9f 93       	push	r25

00000c24 <.Loc.92>:
    stepCounterRight++;
 c24:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <stepCounterRight>
 c28:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <stepCounterRight+0x1>
 c2c:	01 96       	adiw	r24, 0x01	; 1
 c2e:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <stepCounterRight+0x1>
 c32:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <stepCounterRight>

00000c36 <.Loc.94>:
}
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	8f bf       	out	0x3f, r24	; 63
 c3c:	8f 91       	pop	r24
 c3e:	18 95       	reti

00000c40 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 c40:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <stepCounterLeft+0x1>
 c44:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <stepCounterLeft>

00000c48 <.Loc.98>:
    stepCounterRight = 0;
 c48:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <stepCounterRight+0x1>
 c4c:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <stepCounterRight>

00000c50 <.Loc.100>:
}
 c50:	08 95       	ret

00000c52 <enableStepCnt>:

//these two functions should help improve performance
void enableStepCnt(void){
    TIMSK4 |= (1<<TOIE4);
 c52:	e2 e7       	ldi	r30, 0x72	; 114
 c54:	f0 e0       	ldi	r31, 0x00	; 0
 c56:	80 81       	ld	r24, Z

00000c58 <.Loc.103>:
 c58:	81 60       	ori	r24, 0x01	; 1
 c5a:	80 83       	st	Z, r24

00000c5c <.Loc.104>:
    TIMSK3 |= (1<<TOIE3);
 c5c:	e1 e7       	ldi	r30, 0x71	; 113
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	80 81       	ld	r24, Z

00000c62 <.Loc.105>:
 c62:	81 60       	ori	r24, 0x01	; 1
 c64:	80 83       	st	Z, r24

00000c66 <.Loc.106>:
}
 c66:	08 95       	ret

00000c68 <disableStepCnt>:

void disableStepCnt(void){
    TIMSK4 &= ~(1<<TOIE4);
 c68:	e2 e7       	ldi	r30, 0x72	; 114
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	80 81       	ld	r24, Z
 c6e:	8e 7f       	andi	r24, 0xFE	; 254
 c70:	80 83       	st	Z, r24

00000c72 <.Loc.110>:
    TIMSK3 &= ~(1<<TOIE3);
 c72:	e1 e7       	ldi	r30, 0x71	; 113
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	80 81       	ld	r24, Z
 c78:	8e 7f       	andi	r24, 0xFE	; 254
 c7a:	80 83       	st	Z, r24

00000c7c <.Loc.112>:
}
 c7c:	08 95       	ret

00000c7e <stepperBackward>:

void stepperBackward(void){
    PORT_DIR_R &= ~(1<<DIRECTION_R);
 c7e:	a5 98       	cbi	0x14, 5	; 20

00000c80 <.Loc.116>:
	PORT_DIR_L |= (1<<DIRECTION_L);
 c80:	e2 e0       	ldi	r30, 0x02	; 2
 c82:	f1 e0       	ldi	r31, 0x01	; 1
 c84:	80 81       	ld	r24, Z

00000c86 <.Loc.117>:
 c86:	80 61       	ori	r24, 0x10	; 16
 c88:	80 83       	st	Z, r24

00000c8a <.Loc.118>:
}
 c8a:	08 95       	ret

00000c8c <stepperForward>:

void stepperForward(void){
    PORT_DIR_R |= (1<<DIRECTION_R);
 c8c:	a5 9a       	sbi	0x14, 5	; 20

00000c8e <.Loc.122>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 c8e:	e2 e0       	ldi	r30, 0x02	; 2
 c90:	f1 e0       	ldi	r31, 0x01	; 1
 c92:	80 81       	ld	r24, Z
 c94:	8f 7e       	andi	r24, 0xEF	; 239
 c96:	80 83       	st	Z, r24

00000c98 <.Loc.124>:
}
 c98:	08 95       	ret

00000c9a <initUsart>:

#define BAUD 9600   // BAUD rate
const uint16_t BRC = 103; // BAUD rate 9600 omgerekent

void initUsart(void) {   // initializeren USART 1
  UBRR1H = ((uint8_t)(BRC >> 8));   // USART 1 BAUD RATE HIGH instellen
 c9a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>

00000c9e <.Loc.3>:
  UBRR1L = ((uint8_t)(BRC & 0xFF)); // USART 1 BAUD RATE LOW instellen
 c9e:	87 e6       	ldi	r24, 0x67	; 103
 ca0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

00000ca4 <.Loc.5>:
  UCSR1B = (1 << TXEN1) | (1<<RXEN1) | (1<<RXCIE1);    // Transmit and receive enable, receive interrupt enable
 ca4:	88 e9       	ldi	r24, 0x98	; 152
 ca6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>

00000caa <.Loc.7>:
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // 8 bit (hex) sturen
 caa:	86 e0       	ldi	r24, 0x06	; 6
 cac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

00000cb0 <.Loc.9>:
}
 cb0:	08 95       	ret

00000cb2 <sendByte>:

//TRANSMIT
void sendByte(int byte) { // versturen van 1 HEX getal
  loop_until_bit_is_set(UCSR1A, UDRE1); // programma blijven loopen todat de vorige command helemaal is weg geschreven
 cb2:	e8 ec       	ldi	r30, 0xC8	; 200
 cb4:	f0 e0       	ldi	r31, 0x00	; 0

00000cb6 <.L3>:
 cb6:	90 81       	ld	r25, Z
 cb8:	95 ff       	sbrs	r25, 5
 cba:	fd cf       	rjmp	.-6      	; 0xcb6 <.L3>

00000cbc <.Loc.15>:
  UDR1 = byte; // hex in verstuur box zetten
 cbc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

00000cc0 <.Loc.17>:
}
 cc0:	08 95       	ret

00000cc2 <flushUsart2Buffer>:

//RECEIVE
void flushUsart2Buffer(void) {
    unsigned char dummy;
    while (UCSR1A & (1 << RXC1)) {
 cc2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 cc6:	88 23       	and	r24, r24
 cc8:	44 f4       	brge	.+16     	; 0xcda <.L5>

00000cca <.Loc.22>:
        dummy = UDR1; // Read and discard
 cca:	ae ec       	ldi	r26, 0xCE	; 206
 ccc:	b0 e0       	ldi	r27, 0x00	; 0

00000cce <.Loc.23>:
    while (UCSR1A & (1 << RXC1)) {
 cce:	e8 ec       	ldi	r30, 0xC8	; 200
 cd0:	f0 e0       	ldi	r31, 0x00	; 0

00000cd2 <.L7>:
        dummy = UDR1; // Read and discard
 cd2:	8c 91       	ld	r24, X

00000cd4 <.Loc.26>:
    while (UCSR1A & (1 << RXC1)) {
 cd4:	80 81       	ld	r24, Z
 cd6:	88 23       	and	r24, r24
 cd8:	e4 f3       	brlt	.-8      	; 0xcd2 <.L7>

00000cda <.L5>:
    }
    dummy--; //to avoid compiler warning "variable set but not used"
}
 cda:	08 95       	ret

00000cdc <__vector_36>:

unsigned int serialData;
volatile int stopRequest = 0;

ISR(USART1_RX_vect) {
 cdc:	1f 92       	push	r1
 cde:	1f b6       	in	r1, 0x3f	; 63
 ce0:	1f 92       	push	r1
 ce2:	11 24       	eor	r1, r1
 ce4:	8f 93       	push	r24
 ce6:	9f 93       	push	r25

00000ce8 <.Loc.29>:
    serialData = UDR1;
 ce8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 cec:	90 e0       	ldi	r25, 0x00	; 0

00000cee <.Loc.31>:
 cee:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <serialData+0x1>
 cf2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <serialData>

00000cf6 <.Loc.32>:

    if(serialData==0xFF){
 cf6:	8f 3f       	cpi	r24, 0xFF	; 255
 cf8:	91 05       	cpc	r25, r1
 cfa:	31 f0       	breq	.+12     	; 0xd08 <.L11>

00000cfc <.L9>:
        stopRequest = 1;
    }
}
 cfc:	9f 91       	pop	r25
 cfe:	8f 91       	pop	r24
 d00:	1f 90       	pop	r1
 d02:	1f be       	out	0x3f, r1	; 63
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti

00000d08 <.L11>:
        stopRequest = 1;
 d08:	81 e0       	ldi	r24, 0x01	; 1
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <stopRequest+0x1>
 d10:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <stopRequest>

00000d14 <.Loc.37>:
}
 d14:	f3 cf       	rjmp	.-26     	; 0xcfc <.L9>

00000d16 <init_timer5>:
#include "Debugging.h"
#include <stdlib.h>

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 d16:	8b e2       	ldi	r24, 0x2B	; 43
 d18:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000d1c <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 d1c:	8a e5       	ldi	r24, 0x5A	; 90
 d1e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000d22 <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 d22:	81 e2       	ldi	r24, 0x21	; 33
 d24:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000d28 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 d28:	8f ef       	ldi	r24, 0xFF	; 255
 d2a:	9f ef       	ldi	r25, 0xFF	; 255
 d2c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 d30:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

00000d34 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 d34:	84 e1       	ldi	r24, 0x14	; 20
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 d3c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000d40 <.Loc.11>:
    OCR5C = 20;
 d40:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 d44:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000d48 <.Loc.13>:
    //set enable interrupt
    sei();
 d48:	78 94       	sei

00000d4a <.Loc.14>:
}
 d4a:	08 95       	ret

00000d4c <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 d4c:	ea e0       	ldi	r30, 0x0A	; 10
 d4e:	f1 e0       	ldi	r31, 0x01	; 1
 d50:	80 81       	ld	r24, Z

00000d52 <.Loc.17>:
 d52:	80 61       	ori	r24, 0x10	; 16
 d54:	80 83       	st	Z, r24

00000d56 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 d56:	80 81       	ld	r24, Z

00000d58 <.Loc.19>:
 d58:	80 62       	ori	r24, 0x20	; 32
 d5a:	80 83       	st	Z, r24

00000d5c <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 d5c:	ab e0       	ldi	r26, 0x0B	; 11
 d5e:	b1 e0       	ldi	r27, 0x01	; 1
 d60:	8c 91       	ld	r24, X
 d62:	8f 7e       	andi	r24, 0xEF	; 239
 d64:	8c 93       	st	X, r24

00000d66 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 d66:	8c 91       	ld	r24, X
 d68:	8f 7d       	andi	r24, 0xDF	; 223
 d6a:	8c 93       	st	X, r24

00000d6c <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 d6c:	80 81       	ld	r24, Z
 d6e:	8d 7f       	andi	r24, 0xFD	; 253
 d70:	80 83       	st	Z, r24

00000d72 <.Loc.26>:
}
 d72:	08 95       	ret

00000d74 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 d74:	0e 94 a6 06 	call	0xd4c	; 0xd4c <init_pins_ultrasoon>

00000d78 <.LVL0>:
    init_timer5();
 d78:	0e 94 8b 06 	call	0xd16	; 0xd16 <init_timer5>

00000d7c <.LVL1>:
}
 d7c:	08 95       	ret

00000d7e <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 d7e:	8f 93       	push	r24
 d80:	8f b7       	in	r24, 0x3f	; 63
 d82:	8f 93       	push	r24
 d84:	8b b7       	in	r24, 0x3b	; 59
 d86:	8f 93       	push	r24
 d88:	ef 93       	push	r30
 d8a:	ff 93       	push	r31

00000d8c <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 d8c:	e1 e2       	ldi	r30, 0x21	; 33
 d8e:	f1 e0       	ldi	r31, 0x01	; 1
 d90:	80 81       	ld	r24, Z

00000d92 <.Loc.33>:
 d92:	80 64       	ori	r24, 0x40	; 64
 d94:	80 83       	st	Z, r24

00000d96 <.Loc.34>:
}
 d96:	ff 91       	pop	r31
 d98:	ef 91       	pop	r30
 d9a:	8f 91       	pop	r24
 d9c:	8b bf       	out	0x3b, r24	; 59
 d9e:	8f 91       	pop	r24
 da0:	8f bf       	out	0x3f, r24	; 63
 da2:	8f 91       	pop	r24
 da4:	18 95       	reti

00000da6 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 da6:	0f 92       	push	r0
 da8:	0f b6       	in	r0, 0x3f	; 63
 daa:	0f 92       	push	r0
 dac:	1f 92       	push	r1
 dae:	11 24       	eor	r1, r1
 db0:	2f 93       	push	r18
 db2:	2b b7       	in	r18, 0x3b	; 59
 db4:	2f 93       	push	r18
 db6:	3f 93       	push	r19
 db8:	6f 93       	push	r22
 dba:	7f 93       	push	r23
 dbc:	8f 93       	push	r24
 dbe:	9f 93       	push	r25
 dc0:	af 93       	push	r26
 dc2:	bf 93       	push	r27
 dc4:	ef 93       	push	r30
 dc6:	ff 93       	push	r31

00000dc8 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 dc8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000dcc <.Loc.39>:
 dcc:	86 ff       	sbrs	r24, 6
 dce:	1e c0       	rjmp	.+60     	; 0xe0c <.L6>

00000dd0 <.Loc.40>:
        start_time = ICR5;
 dd0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 dd4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000dd8 <.Loc.42>:
 dd8:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <start_time.0+0x1>
 ddc:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <start_time.0>

00000de0 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 de0:	e1 e2       	ldi	r30, 0x21	; 33
 de2:	f1 e0       	ldi	r31, 0x01	; 1
 de4:	80 81       	ld	r24, Z
 de6:	8f 7b       	andi	r24, 0xBF	; 191
 de8:	80 83       	st	Z, r24

00000dea <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 dea:	ff 91       	pop	r31
 dec:	ef 91       	pop	r30
 dee:	bf 91       	pop	r27
 df0:	af 91       	pop	r26
 df2:	9f 91       	pop	r25
 df4:	8f 91       	pop	r24
 df6:	7f 91       	pop	r23
 df8:	6f 91       	pop	r22
 dfa:	3f 91       	pop	r19
 dfc:	2f 91       	pop	r18
 dfe:	2b bf       	out	0x3b, r18	; 59
 e00:	2f 91       	pop	r18
 e02:	1f 90       	pop	r1
 e04:	0f 90       	pop	r0
 e06:	0f be       	out	0x3f, r0	; 63
 e08:	0f 90       	pop	r0
 e0a:	18 95       	reti

00000e0c <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 e0c:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 e10:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000e14 <.Loc.48>:
 e14:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <start_time.0>
 e18:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <start_time.0+0x1>
 e1c:	28 1b       	sub	r18, r24
 e1e:	39 0b       	sbc	r19, r25

00000e20 <.Loc.49>:
 e20:	a9 e0       	ldi	r26, 0x09	; 9
 e22:	bc e8       	ldi	r27, 0x8C	; 140
 e24:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 e28:	00 24       	eor	r0, r0
 e2a:	88 0f       	add	r24, r24
 e2c:	99 1f       	adc	r25, r25
 e2e:	00 1c       	adc	r0, r0
 e30:	88 0f       	add	r24, r24
 e32:	99 1f       	adc	r25, r25
 e34:	00 1c       	adc	r0, r0
 e36:	89 2f       	mov	r24, r25
 e38:	90 2d       	mov	r25, r0

00000e3a <.Loc.50>:
        if (current_sensor == 0) {
 e3a:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <current_sensor>
 e3e:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <current_sensor+0x1>

00000e42 <.Loc.52>:
 e42:	23 2b       	or	r18, r19
 e44:	c9 f4       	brne	.+50     	; 0xe78 <.L8>

00000e46 <.Loc.53>:
            distance_right = distance;  // Store distance for Sensor A
 e46:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <distance_right+0x1>
 e4a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <distance_right>

00000e4e <.L9>:
        if (current_sensor == 0) {
 e4e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <current_sensor>
 e52:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <current_sensor+0x1>

00000e56 <.Loc.57>:
 e56:	89 2b       	or	r24, r25
 e58:	a1 f4       	brne	.+40     	; 0xe82 <.L10>

00000e5a <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 e5a:	81 e0       	ldi	r24, 0x01	; 1
 e5c:	90 e0       	ldi	r25, 0x00	; 0
 e5e:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <current_sensor+0x1>
 e62:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <current_sensor>

00000e66 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 e66:	e0 e2       	ldi	r30, 0x20	; 32
 e68:	f1 e0       	ldi	r31, 0x01	; 1
 e6a:	80 81       	ld	r24, Z
 e6c:	87 7f       	andi	r24, 0xF7	; 247
 e6e:	80 83       	st	Z, r24

00000e70 <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 e70:	80 81       	ld	r24, Z

00000e72 <.Loc.63>:
 e72:	80 62       	ori	r24, 0x20	; 32
 e74:	80 83       	st	Z, r24
 e76:	b9 cf       	rjmp	.-142    	; 0xdea <.L5>

00000e78 <.L8>:
            distance_left = distance;  // Store distance for Sensor B
 e78:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <distance_left+0x1>
 e7c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <distance_left>
 e80:	e6 cf       	rjmp	.-52     	; 0xe4e <.L9>

00000e82 <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 e82:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <current_sensor+0x1>
 e86:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <current_sensor>

00000e8a <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 e8a:	e0 e2       	ldi	r30, 0x20	; 32
 e8c:	f1 e0       	ldi	r31, 0x01	; 1
 e8e:	80 81       	ld	r24, Z
 e90:	8f 7d       	andi	r24, 0xDF	; 223
 e92:	80 83       	st	Z, r24

00000e94 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 e94:	80 81       	ld	r24, Z

00000e96 <.Loc.71>:
 e96:	88 60       	ori	r24, 0x08	; 8
 e98:	80 83       	st	Z, r24

00000e9a <.LBE2>:
}
 e9a:	a7 cf       	rjmp	.-178    	; 0xdea <.L5>

00000e9c <__divmodhi4>:
 e9c:	97 fb       	bst	r25, 7

00000e9e <.Loc.1>:
 e9e:	07 2e       	mov	r0, r23

00000ea0 <.Loc.2>:
 ea0:	16 f4       	brtc	.+4      	; 0xea6 <.L^B1>

00000ea2 <.Loc.3>:
 ea2:	00 94       	com	r0

00000ea4 <.Loc.4>:
 ea4:	07 d0       	rcall	.+14     	; 0xeb4 <__divmodhi4_neg1>

00000ea6 <.L^B1>:
 ea6:	77 fd       	sbrc	r23, 7

00000ea8 <.Loc.6>:
 ea8:	09 d0       	rcall	.+18     	; 0xebc <__divmodhi4_neg2>

00000eaa <.Loc.7>:
 eaa:	0e 94 71 07 	call	0xee2	; 0xee2 <__udivmodhi4>

00000eae <.Loc.8>:
 eae:	07 fc       	sbrc	r0, 7

00000eb0 <.Loc.9>:
 eb0:	05 d0       	rcall	.+10     	; 0xebc <__divmodhi4_neg2>

00000eb2 <.Loc.10>:
 eb2:	3e f4       	brtc	.+14     	; 0xec2 <__divmodhi4_exit>

00000eb4 <__divmodhi4_neg1>:
 eb4:	90 95       	com	r25

00000eb6 <.Loc.12>:
 eb6:	81 95       	neg	r24

00000eb8 <.Loc.13>:
 eb8:	9f 4f       	sbci	r25, 0xFF	; 255

00000eba <.Loc.14>:
 eba:	08 95       	ret

00000ebc <__divmodhi4_neg2>:
 ebc:	70 95       	com	r23

00000ebe <.Loc.16>:
 ebe:	61 95       	neg	r22

00000ec0 <.Loc.17>:
 ec0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ec2 <__divmodhi4_exit>:
 ec2:	08 95       	ret

00000ec4 <__umulhisi3>:
 ec4:	a2 9f       	mul	r26, r18

00000ec6 <.Loc.1>:
 ec6:	b0 01       	movw	r22, r0

00000ec8 <.Loc.2>:
 ec8:	b3 9f       	mul	r27, r19

00000eca <.Loc.3>:
 eca:	c0 01       	movw	r24, r0

00000ecc <.Loc.4>:
 ecc:	a3 9f       	mul	r26, r19

00000ece <.Loc.5>:
 ece:	70 0d       	add	r23, r0

00000ed0 <.Loc.6>:
 ed0:	81 1d       	adc	r24, r1

00000ed2 <.Loc.7>:
 ed2:	11 24       	eor	r1, r1

00000ed4 <.Loc.8>:
 ed4:	91 1d       	adc	r25, r1

00000ed6 <.Loc.9>:
 ed6:	b2 9f       	mul	r27, r18

00000ed8 <.Loc.10>:
 ed8:	70 0d       	add	r23, r0

00000eda <.Loc.11>:
 eda:	81 1d       	adc	r24, r1

00000edc <.Loc.12>:
 edc:	11 24       	eor	r1, r1

00000ede <.Loc.13>:
 ede:	91 1d       	adc	r25, r1

00000ee0 <.Loc.14>:
 ee0:	08 95       	ret

00000ee2 <__udivmodhi4>:
 ee2:	aa 1b       	sub	r26, r26

00000ee4 <.Loc.1>:
 ee4:	bb 1b       	sub	r27, r27

00000ee6 <.Loc.2>:
 ee6:	51 e1       	ldi	r21, 0x11	; 17

00000ee8 <.Loc.3>:
 ee8:	07 c0       	rjmp	.+14     	; 0xef8 <__udivmodhi4_ep>

00000eea <__udivmodhi4_loop>:
 eea:	aa 1f       	adc	r26, r26

00000eec <.Loc.5>:
 eec:	bb 1f       	adc	r27, r27

00000eee <.Loc.6>:
 eee:	a6 17       	cp	r26, r22

00000ef0 <.Loc.7>:
 ef0:	b7 07       	cpc	r27, r23

00000ef2 <.Loc.8>:
 ef2:	10 f0       	brcs	.+4      	; 0xef8 <__udivmodhi4_ep>

00000ef4 <.Loc.9>:
 ef4:	a6 1b       	sub	r26, r22

00000ef6 <.Loc.10>:
 ef6:	b7 0b       	sbc	r27, r23

00000ef8 <__udivmodhi4_ep>:
 ef8:	88 1f       	adc	r24, r24

00000efa <.Loc.12>:
 efa:	99 1f       	adc	r25, r25

00000efc <.Loc.13>:
 efc:	5a 95       	dec	r21

00000efe <.Loc.14>:
 efe:	a9 f7       	brne	.-22     	; 0xeea <__udivmodhi4_loop>

00000f00 <.Loc.15>:
 f00:	80 95       	com	r24

00000f02 <.Loc.16>:
 f02:	90 95       	com	r25

00000f04 <.Loc.17>:
 f04:	bc 01       	movw	r22, r24

00000f06 <.Loc.18>:
 f06:	cd 01       	movw	r24, r26

00000f08 <.Loc.19>:
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
